

    index
    modules |
    Global Mapper Python Documentation »
    Module code »
    globalmapper

Source code for globalmapper

# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _globalmapper
else:
    import _globalmapper

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


[docs]
class POINT(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x = property(_globalmapper.POINT_x_get, _globalmapper.POINT_x_set)
    y = property(_globalmapper.POINT_y_get, _globalmapper.POINT_y_set)

    def __init__(self, *args):
        _globalmapper.POINT_swiginit(self, _globalmapper.new_POINT(*args))

    def __repr__( self ) :
        return str( (self.x, self.y ) )

    __swig_destroy__ = _globalmapper.delete_POINT


# Register POINT in _globalmapper:
_globalmapper.POINT_swigregister(POINT)


def _to_enum(k, prefix):
    for s in dir(_globalmapper):
        if s.startswith(prefix) and k == _globalmapper.__getattribute__(s):
            return s
    return str(k)

[docs]
def strerror(code):
    return _to_enum(code, 'GM_Error_') 


[docs]
def gmobject_to_map( self ) :
    txt = {}
    for s in dir( self ) :
        if s.startswith( 'm' ) :
            v = self.__getattribute__( s )
            txt[s] = v
    return txt




[docs]
def carray_to_list(arr, size):
    if arr is None:
        return None
    lst = []
    for i in range(size):
        lst.append(arr[i])
    return lst


[docs]
class GM_LayerHandle_array(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements: "size_t"):
        _globalmapper.GM_LayerHandle_array_swiginit(self, _globalmapper.new_GM_LayerHandle_array(nelements))
    __swig_destroy__ = _globalmapper.delete_GM_LayerHandle_array

    def __getitem__(self, index: "size_t") -> "GM_LayerHandle_t32":
        return _globalmapper.GM_LayerHandle_array___getitem__(self, index)

    def __setitem__(self, index: "size_t", value: "GM_LayerHandle_t32") -> "void":
        return _globalmapper.GM_LayerHandle_array___setitem__(self, index, value)

[docs]
    def cast(self) -> "GM_LayerHandle_t32 *":
        return _globalmapper.GM_LayerHandle_array_cast(self)


[docs]
    @staticmethod
    def frompointer(t: "GM_LayerHandle_t32 *") -> "GM_LayerHandle_array *":
        return _globalmapper.GM_LayerHandle_array_frompointer(t)


# Register GM_LayerHandle_array in _globalmapper:
_globalmapper.GM_LayerHandle_array_swigregister(GM_LayerHandle_array)

def GM_LayerHandle_array_frompointer(t: "GM_LayerHandle_t32 *") -> "GM_LayerHandle_array *":
    return _globalmapper.GM_LayerHandle_array_frompointer(t)

[docs]
class float_array(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements: "size_t"):
        _globalmapper.float_array_swiginit(self, _globalmapper.new_float_array(nelements))
    __swig_destroy__ = _globalmapper.delete_float_array

    def __getitem__(self, index: "size_t") -> "float":
        return _globalmapper.float_array___getitem__(self, index)

    def __setitem__(self, index: "size_t", value: "float") -> "void":
        return _globalmapper.float_array___setitem__(self, index, value)

[docs]
    def cast(self) -> "float *":
        return _globalmapper.float_array_cast(self)


[docs]
    @staticmethod
    def frompointer(t: "float *") -> "float_array *":
        return _globalmapper.float_array_frompointer(t)


# Register float_array in _globalmapper:
_globalmapper.float_array_swigregister(float_array)

def float_array_frompointer(t: "float *") -> "float_array *":
    return _globalmapper.float_array_frompointer(t)

[docs]
class uint8_array(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements: "size_t"):
        _globalmapper.uint8_array_swiginit(self, _globalmapper.new_uint8_array(nelements))
    __swig_destroy__ = _globalmapper.delete_uint8_array

    def __getitem__(self, index: "size_t") -> "uint8":
        return _globalmapper.uint8_array___getitem__(self, index)

    def __setitem__(self, index: "size_t", value: "uint8") -> "void":
        return _globalmapper.uint8_array___setitem__(self, index, value)

[docs]
    def cast(self) -> "uint8 *":
        return _globalmapper.uint8_array_cast(self)


[docs]
    @staticmethod
    def frompointer(t: "uint8 *") -> "uint8_array *":
        return _globalmapper.uint8_array_frompointer(t)


# Register uint8_array in _globalmapper:
_globalmapper.uint8_array_swigregister(uint8_array)

def uint8_array_frompointer(t: "uint8 *") -> "uint8_array *":
    return _globalmapper.uint8_array_frompointer(t)

[docs]
class uint32_array(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements: "size_t"):
        _globalmapper.uint32_array_swiginit(self, _globalmapper.new_uint32_array(nelements))
    __swig_destroy__ = _globalmapper.delete_uint32_array

    def __getitem__(self, index: "size_t") -> "unsigned long":
        return _globalmapper.uint32_array___getitem__(self, index)

    def __setitem__(self, index: "size_t", value: "unsigned long") -> "void":
        return _globalmapper.uint32_array___setitem__(self, index, value)

[docs]
    def cast(self) -> "unsigned long *":
        return _globalmapper.uint32_array_cast(self)


[docs]
    @staticmethod
    def frompointer(t: "unsigned long *") -> "uint32_array *":
        return _globalmapper.uint32_array_frompointer(t)


# Register uint32_array in _globalmapper:
_globalmapper.uint32_array_swigregister(uint32_array)

def uint32_array_frompointer(t: "unsigned long *") -> "uint32_array *":
    return _globalmapper.uint32_array_frompointer(t)

[docs]
class GM_Point_t_array(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements: "size_t"):
        _globalmapper.GM_Point_t_array_swiginit(self, _globalmapper.new_GM_Point_t_array(nelements))
    __swig_destroy__ = _globalmapper.delete_GM_Point_t_array

    def __getitem__(self, index: "size_t") -> "GM_Point_t":
        return _globalmapper.GM_Point_t_array___getitem__(self, index)

    def __setitem__(self, index: "size_t", value: "GM_Point_t") -> "void":
        return _globalmapper.GM_Point_t_array___setitem__(self, index, value)

[docs]
    def cast(self) -> "GM_Point_t *":
        return _globalmapper.GM_Point_t_array_cast(self)


[docs]
    @staticmethod
    def frompointer(t: "GM_Point_t") -> "GM_Point_t_array *":
        return _globalmapper.GM_Point_t_array_frompointer(t)


# Register GM_Point_t_array in _globalmapper:
_globalmapper.GM_Point_t_array_swigregister(GM_Point_t_array)

def GM_Point_t_array_frompointer(t: "GM_Point_t") -> "GM_Point_t_array *":
    return _globalmapper.GM_Point_t_array_frompointer(t)

[docs]
class GM_GroundControlPoint_array(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements: "size_t"):
        _globalmapper.GM_GroundControlPoint_array_swiginit(self, _globalmapper.new_GM_GroundControlPoint_array(nelements))
    __swig_destroy__ = _globalmapper.delete_GM_GroundControlPoint_array

    def __getitem__(self, index: "size_t") -> "GM_GroundControlPoint_t":
        return _globalmapper.GM_GroundControlPoint_array___getitem__(self, index)

    def __setitem__(self, index: "size_t", value: "GM_GroundControlPoint_t") -> "void":
        return _globalmapper.GM_GroundControlPoint_array___setitem__(self, index, value)

[docs]
    def cast(self) -> "GM_GroundControlPoint_t *":
        return _globalmapper.GM_GroundControlPoint_array_cast(self)


[docs]
    @staticmethod
    def frompointer(t: "GM_GroundControlPoint_t") -> "GM_GroundControlPoint_array *":
        return _globalmapper.GM_GroundControlPoint_array_frompointer(t)


# Register GM_GroundControlPoint_array in _globalmapper:
_globalmapper.GM_GroundControlPoint_array_swigregister(GM_GroundControlPoint_array)

def GM_GroundControlPoint_array_frompointer(t: "GM_GroundControlPoint_t") -> "GM_GroundControlPoint_array *":
    return _globalmapper.GM_GroundControlPoint_array_frompointer(t)

[docs]
class GM_P2PControlPoint_array(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements: "size_t"):
        _globalmapper.GM_P2PControlPoint_array_swiginit(self, _globalmapper.new_GM_P2PControlPoint_array(nelements))
    __swig_destroy__ = _globalmapper.delete_GM_P2PControlPoint_array

    def __getitem__(self, index: "size_t") -> "GM_P2PControlPoint_t":
        return _globalmapper.GM_P2PControlPoint_array___getitem__(self, index)

    def __setitem__(self, index: "size_t", value: "GM_P2PControlPoint_t") -> "void":
        return _globalmapper.GM_P2PControlPoint_array___setitem__(self, index, value)

[docs]
    def cast(self) -> "GM_P2PControlPoint_t *":
        return _globalmapper.GM_P2PControlPoint_array_cast(self)


[docs]
    @staticmethod
    def frompointer(t: "GM_P2PControlPoint_t") -> "GM_P2PControlPoint_array *":
        return _globalmapper.GM_P2PControlPoint_array_frompointer(t)


# Register GM_P2PControlPoint_array in _globalmapper:
_globalmapper.GM_P2PControlPoint_array_swigregister(GM_P2PControlPoint_array)

[docs]
def GM_P2PControlPoint_array_frompointer(t: "GM_P2PControlPoint_t") -> "GM_P2PControlPoint_array *":
    return _globalmapper.GM_P2PControlPoint_array_frompointer(t)


[docs]
class GM_P2PImagePixel_array(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements: "size_t"):
        _globalmapper.GM_P2PImagePixel_array_swiginit(self, _globalmapper.new_GM_P2PImagePixel_array(nelements))
    __swig_destroy__ = _globalmapper.delete_GM_P2PImagePixel_array

    def __getitem__(self, index: "size_t") -> "GM_P2PImagePixel_t":
        return _globalmapper.GM_P2PImagePixel_array___getitem__(self, index)

    def __setitem__(self, index: "size_t", value: "GM_P2PImagePixel_t") -> "void":
        return _globalmapper.GM_P2PImagePixel_array___setitem__(self, index, value)

[docs]
    def cast(self) -> "GM_P2PImagePixel_t *":
        return _globalmapper.GM_P2PImagePixel_array_cast(self)


[docs]
    @staticmethod
    def frompointer(t: "GM_P2PImagePixel_t") -> "GM_P2PImagePixel_array *":
        return _globalmapper.GM_P2PImagePixel_array_frompointer(t)


# Register GM_P2PImagePixel_array in _globalmapper:
_globalmapper.GM_P2PImagePixel_array_swigregister(GM_P2PImagePixel_array)

[docs]
def GM_P2PImagePixel_array_frompointer(t: "GM_P2PImagePixel_t") -> "GM_P2PImagePixel_array *":
    return _globalmapper.GM_P2PImagePixel_array_frompointer(t)


[docs]
class GM_AttrValue_array(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements: "size_t"):
        _globalmapper.GM_AttrValue_array_swiginit(self, _globalmapper.new_GM_AttrValue_array(nelements))
    __swig_destroy__ = _globalmapper.delete_GM_AttrValue_array

    def __getitem__(self, index: "size_t") -> "GM_AttrValue_t":
        return _globalmapper.GM_AttrValue_array___getitem__(self, index)

    def __setitem__(self, index: "size_t", value: "GM_AttrValue_t") -> "void":
        return _globalmapper.GM_AttrValue_array___setitem__(self, index, value)

[docs]
    def cast(self) -> "GM_AttrValue_t *":
        return _globalmapper.GM_AttrValue_array_cast(self)


[docs]
    @staticmethod
    def frompointer(t: "GM_AttrValue_t") -> "GM_AttrValue_array *":
        return _globalmapper.GM_AttrValue_array_frompointer(t)


# Register GM_AttrValue_array in _globalmapper:
_globalmapper.GM_AttrValue_array_swigregister(GM_AttrValue_array)

def GM_AttrValue_array_frompointer(t: "GM_AttrValue_t") -> "GM_AttrValue_array *":
    return _globalmapper.GM_AttrValue_array_frompointer(t)

[docs]
class GM_PaletteEntry_array(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements: "size_t"):
        _globalmapper.GM_PaletteEntry_array_swiginit(self, _globalmapper.new_GM_PaletteEntry_array(nelements))
    __swig_destroy__ = _globalmapper.delete_GM_PaletteEntry_array

    def __getitem__(self, index: "size_t") -> "GM_PaletteEntry_t":
        return _globalmapper.GM_PaletteEntry_array___getitem__(self, index)

    def __setitem__(self, index: "size_t", value: "GM_PaletteEntry_t") -> "void":
        return _globalmapper.GM_PaletteEntry_array___setitem__(self, index, value)

[docs]
    def cast(self) -> "GM_PaletteEntry_t *":
        return _globalmapper.GM_PaletteEntry_array_cast(self)


[docs]
    @staticmethod
    def frompointer(t: "GM_PaletteEntry_t") -> "GM_PaletteEntry_array *":
        return _globalmapper.GM_PaletteEntry_array_frompointer(t)


# Register GM_PaletteEntry_array in _globalmapper:
_globalmapper.GM_PaletteEntry_array_swigregister(GM_PaletteEntry_array)

def GM_PaletteEntry_array_frompointer(t: "GM_PaletteEntry_t") -> "GM_PaletteEntry_array *":
    return _globalmapper.GM_PaletteEntry_array_frompointer(t)

[docs]
class GM_CustomShader_array(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements: "size_t"):
        _globalmapper.GM_CustomShader_array_swiginit(self, _globalmapper.new_GM_CustomShader_array(nelements))
    __swig_destroy__ = _globalmapper.delete_GM_CustomShader_array

    def __getitem__(self, index: "size_t") -> "GM_CustomShader_t":
        return _globalmapper.GM_CustomShader_array___getitem__(self, index)

    def __setitem__(self, index: "size_t", value: "GM_CustomShader_t") -> "void":
        return _globalmapper.GM_CustomShader_array___setitem__(self, index, value)

[docs]
    def cast(self) -> "GM_CustomShader_t *":
        return _globalmapper.GM_CustomShader_array_cast(self)


[docs]
    @staticmethod
    def frompointer(t: "GM_CustomShader_t") -> "GM_CustomShader_array *":
        return _globalmapper.GM_CustomShader_array_frompointer(t)


# Register GM_CustomShader_array in _globalmapper:
_globalmapper.GM_CustomShader_array_swigregister(GM_CustomShader_array)

def GM_CustomShader_array_frompointer(t: "GM_CustomShader_t") -> "GM_CustomShader_array *":
    return _globalmapper.GM_CustomShader_array_frompointer(t)

[docs]
class GM_OnlineSourceInfo_array(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements: "size_t"):
        _globalmapper.GM_OnlineSourceInfo_array_swiginit(self, _globalmapper.new_GM_OnlineSourceInfo_array(nelements))
    __swig_destroy__ = _globalmapper.delete_GM_OnlineSourceInfo_array

    def __getitem__(self, index: "size_t") -> "GM_OnlineSourceInfo_t":
        return _globalmapper.GM_OnlineSourceInfo_array___getitem__(self, index)

    def __setitem__(self, index: "size_t", value: "GM_OnlineSourceInfo_t") -> "void":
        return _globalmapper.GM_OnlineSourceInfo_array___setitem__(self, index, value)

[docs]
    def cast(self) -> "GM_OnlineSourceInfo_t *":
        return _globalmapper.GM_OnlineSourceInfo_array_cast(self)


[docs]
    @staticmethod
    def frompointer(t: "GM_OnlineSourceInfo_t") -> "GM_OnlineSourceInfo_array *":
        return _globalmapper.GM_OnlineSourceInfo_array_frompointer(t)


# Register GM_OnlineSourceInfo_array in _globalmapper:
_globalmapper.GM_OnlineSourceInfo_array_swigregister(GM_OnlineSourceInfo_array)

def GM_OnlineSourceInfo_array_frompointer(t: "GM_OnlineSourceInfo_t") -> "GM_OnlineSourceInfo_array *":
    return _globalmapper.GM_OnlineSourceInfo_array_frompointer(t)

[docs]
class GM_ElevColor_array(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements: "size_t"):
        _globalmapper.GM_ElevColor_array_swiginit(self, _globalmapper.new_GM_ElevColor_array(nelements))
    __swig_destroy__ = _globalmapper.delete_GM_ElevColor_array

    def __getitem__(self, index: "size_t") -> "GM_ElevColor_t":
        return _globalmapper.GM_ElevColor_array___getitem__(self, index)

    def __setitem__(self, index: "size_t", value: "GM_ElevColor_t") -> "void":
        return _globalmapper.GM_ElevColor_array___setitem__(self, index, value)

[docs]
    def cast(self) -> "GM_ElevColor_t *":
        return _globalmapper.GM_ElevColor_array_cast(self)


[docs]
    @staticmethod
    def frompointer(t: "GM_ElevColor_t") -> "GM_ElevColor_array *":
        return _globalmapper.GM_ElevColor_array_frompointer(t)


# Register GM_ElevColor_array in _globalmapper:
_globalmapper.GM_ElevColor_array_swigregister(GM_ElevColor_array)

def GM_ElevColor_array_frompointer(t: "GM_ElevColor_t") -> "GM_ElevColor_array *":
    return _globalmapper.GM_ElevColor_array_frompointer(t)

[docs]
class COLORREF_array(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements: "size_t"):
        _globalmapper.COLORREF_array_swiginit(self, _globalmapper.new_COLORREF_array(nelements))
    __swig_destroy__ = _globalmapper.delete_COLORREF_array

    def __getitem__(self, index: "size_t") -> "COLORREF":
        return _globalmapper.COLORREF_array___getitem__(self, index)

    def __setitem__(self, index: "size_t", value: "COLORREF") -> "void":
        return _globalmapper.COLORREF_array___setitem__(self, index, value)

[docs]
    def cast(self) -> "COLORREF *":
        return _globalmapper.COLORREF_array_cast(self)


[docs]
    @staticmethod
    def frompointer(t: "COLORREF *") -> "COLORREF_array *":
        return _globalmapper.COLORREF_array_frompointer(t)


# Register COLORREF_array in _globalmapper:
_globalmapper.COLORREF_array_swigregister(COLORREF_array)

def COLORREF_array_frompointer(t: "COLORREF *") -> "COLORREF_array *":
    return _globalmapper.COLORREF_array_frompointer(t)

[docs]
class GM_LidarAttrInfo_array(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements: "size_t"):
        _globalmapper.GM_LidarAttrInfo_array_swiginit(self, _globalmapper.new_GM_LidarAttrInfo_array(nelements))
    __swig_destroy__ = _globalmapper.delete_GM_LidarAttrInfo_array

    def __getitem__(self, index: "size_t") -> "GM_LidarAttrInfo_t":
        return _globalmapper.GM_LidarAttrInfo_array___getitem__(self, index)

    def __setitem__(self, index: "size_t", value: "GM_LidarAttrInfo_t") -> "void":
        return _globalmapper.GM_LidarAttrInfo_array___setitem__(self, index, value)

[docs]
    def cast(self) -> "GM_LidarAttrInfo_t *":
        return _globalmapper.GM_LidarAttrInfo_array_cast(self)


[docs]
    @staticmethod
    def frompointer(t: "GM_LidarAttrInfo_t") -> "GM_LidarAttrInfo_array *":
        return _globalmapper.GM_LidarAttrInfo_array_frompointer(t)


# Register GM_LidarAttrInfo_array in _globalmapper:
_globalmapper.GM_LidarAttrInfo_array_swigregister(GM_LidarAttrInfo_array)

def GM_LidarAttrInfo_array_frompointer(t: "GM_LidarAttrInfo_t") -> "GM_LidarAttrInfo_array *":
    return _globalmapper.GM_LidarAttrInfo_array_frompointer(t)

[docs]
class GM_LidarPoint_array(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements: "size_t"):
        _globalmapper.GM_LidarPoint_array_swiginit(self, _globalmapper.new_GM_LidarPoint_array(nelements))
    __swig_destroy__ = _globalmapper.delete_GM_LidarPoint_array

    def __getitem__(self, index: "size_t") -> "GM_LidarPoint_t":
        return _globalmapper.GM_LidarPoint_array___getitem__(self, index)

    def __setitem__(self, index: "size_t", value: "GM_LidarPoint_t") -> "void":
        return _globalmapper.GM_LidarPoint_array___setitem__(self, index, value)

[docs]
    def cast(self) -> "GM_LidarPoint_t *":
        return _globalmapper.GM_LidarPoint_array_cast(self)


[docs]
    @staticmethod
    def frompointer(t: "GM_LidarPoint_t") -> "GM_LidarPoint_array *":
        return _globalmapper.GM_LidarPoint_array_frompointer(t)


# Register GM_LidarPoint_array in _globalmapper:
_globalmapper.GM_LidarPoint_array_swigregister(GM_LidarPoint_array)

def GM_LidarPoint_array_frompointer(t: "GM_LidarPoint_t") -> "GM_LidarPoint_array *":
    return _globalmapper.GM_LidarPoint_array_frompointer(t)

[docs]
class GM_LidarReturnInfo_array(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements: "size_t"):
        _globalmapper.GM_LidarReturnInfo_array_swiginit(self, _globalmapper.new_GM_LidarReturnInfo_array(nelements))
    __swig_destroy__ = _globalmapper.delete_GM_LidarReturnInfo_array

    def __getitem__(self, index: "size_t") -> "GM_LidarReturnInfo_t":
        return _globalmapper.GM_LidarReturnInfo_array___getitem__(self, index)

    def __setitem__(self, index: "size_t", value: "GM_LidarReturnInfo_t") -> "void":
        return _globalmapper.GM_LidarReturnInfo_array___setitem__(self, index, value)

[docs]
    def cast(self) -> "GM_LidarReturnInfo_t *":
        return _globalmapper.GM_LidarReturnInfo_array_cast(self)


[docs]
    @staticmethod
    def frompointer(t: "GM_LidarReturnInfo_t") -> "GM_LidarReturnInfo_array *":
        return _globalmapper.GM_LidarReturnInfo_array_frompointer(t)


# Register GM_LidarReturnInfo_array in _globalmapper:
_globalmapper.GM_LidarReturnInfo_array_swigregister(GM_LidarReturnInfo_array)

def GM_LidarReturnInfo_array_frompointer(t: "GM_LidarReturnInfo_t") -> "GM_LidarReturnInfo_array *":
    return _globalmapper.GM_LidarReturnInfo_array_frompointer(t)

[docs]
class GM_AreaFeature_array(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements: "size_t"):
        _globalmapper.GM_AreaFeature_array_swiginit(self, _globalmapper.new_GM_AreaFeature_array(nelements))
    __swig_destroy__ = _globalmapper.delete_GM_AreaFeature_array

    def __getitem__(self, index: "size_t") -> "GM_AreaFeature_t":
        return _globalmapper.GM_AreaFeature_array___getitem__(self, index)

    def __setitem__(self, index: "size_t", value: "GM_AreaFeature_t") -> "void":
        return _globalmapper.GM_AreaFeature_array___setitem__(self, index, value)

[docs]
    def cast(self) -> "GM_AreaFeature_t *":
        return _globalmapper.GM_AreaFeature_array_cast(self)


[docs]
    @staticmethod
    def frompointer(t: "GM_AreaFeature_t") -> "GM_AreaFeature_array *":
        return _globalmapper.GM_AreaFeature_array_frompointer(t)


# Register GM_AreaFeature_array in _globalmapper:
_globalmapper.GM_AreaFeature_array_swigregister(GM_AreaFeature_array)

def GM_AreaFeature_array_frompointer(t: "GM_AreaFeature_t") -> "GM_AreaFeature_array *":
    return _globalmapper.GM_AreaFeature_array_frompointer(t)

[docs]
class GM_ValName_array(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements: "size_t"):
        _globalmapper.GM_ValName_array_swiginit(self, _globalmapper.new_GM_ValName_array(nelements))
    __swig_destroy__ = _globalmapper.delete_GM_ValName_array

    def __getitem__(self, index: "size_t") -> "GM_ValName_t":
        return _globalmapper.GM_ValName_array___getitem__(self, index)

    def __setitem__(self, index: "size_t", value: "GM_ValName_t") -> "void":
        return _globalmapper.GM_ValName_array___setitem__(self, index, value)

[docs]
    def cast(self) -> "GM_ValName_t *":
        return _globalmapper.GM_ValName_array_cast(self)


[docs]
    @staticmethod
    def frompointer(t: "GM_ValName_t") -> "GM_ValName_array *":
        return _globalmapper.GM_ValName_array_frompointer(t)


# Register GM_ValName_array in _globalmapper:
_globalmapper.GM_ValName_array_swigregister(GM_ValName_array)

def GM_ValName_array_frompointer(t: "GM_ValName_t") -> "GM_ValName_array *":
    return _globalmapper.GM_ValName_array_frompointer(t)

[docs]
class GM_FoundFeature_array(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements: "size_t"):
        _globalmapper.GM_FoundFeature_array_swiginit(self, _globalmapper.new_GM_FoundFeature_array(nelements))
    __swig_destroy__ = _globalmapper.delete_GM_FoundFeature_array

    def __getitem__(self, index: "size_t") -> "GM_FoundFeature_t":
        return _globalmapper.GM_FoundFeature_array___getitem__(self, index)

    def __setitem__(self, index: "size_t", value: "GM_FoundFeature_t") -> "void":
        return _globalmapper.GM_FoundFeature_array___setitem__(self, index, value)

[docs]
    def cast(self) -> "GM_FoundFeature_t *":
        return _globalmapper.GM_FoundFeature_array_cast(self)


[docs]
    @staticmethod
    def frompointer(t: "GM_FoundFeature_t") -> "GM_FoundFeature_array *":
        return _globalmapper.GM_FoundFeature_array_frompointer(t)


# Register GM_FoundFeature_array in _globalmapper:
_globalmapper.GM_FoundFeature_array_swigregister(GM_FoundFeature_array)

def GM_FoundFeature_array_frompointer(t: "GM_FoundFeature_t") -> "GM_FoundFeature_array *":
    return _globalmapper.GM_FoundFeature_array_frompointer(t)

[docs]
class double_array(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements: "size_t"):
        _globalmapper.double_array_swiginit(self, _globalmapper.new_double_array(nelements))
    __swig_destroy__ = _globalmapper.delete_double_array

    def __getitem__(self, index: "size_t") -> "double":
        return _globalmapper.double_array___getitem__(self, index)

    def __setitem__(self, index: "size_t", value: "double") -> "void":
        return _globalmapper.double_array___setitem__(self, index, value)

[docs]
    def cast(self) -> "double *":
        return _globalmapper.double_array_cast(self)


[docs]
    @staticmethod
    def frompointer(t: "double *") -> "double_array *":
        return _globalmapper.double_array_frompointer(t)


# Register double_array in _globalmapper:
_globalmapper.double_array_swigregister(double_array)

def double_array_frompointer(t: "double *") -> "double_array *":
    return _globalmapper.double_array_frompointer(t)

[docs]
class GM_HoleInArea_array(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements: "size_t"):
        _globalmapper.GM_HoleInArea_array_swiginit(self, _globalmapper.new_GM_HoleInArea_array(nelements))
    __swig_destroy__ = _globalmapper.delete_GM_HoleInArea_array

    def __getitem__(self, index: "size_t") -> "GM_HoleInArea_t":
        return _globalmapper.GM_HoleInArea_array___getitem__(self, index)

    def __setitem__(self, index: "size_t", value: "GM_HoleInArea_t") -> "void":
        return _globalmapper.GM_HoleInArea_array___setitem__(self, index, value)

[docs]
    def cast(self) -> "GM_HoleInArea_t *":
        return _globalmapper.GM_HoleInArea_array_cast(self)


[docs]
    @staticmethod
    def frompointer(t: "GM_HoleInArea_t") -> "GM_HoleInArea_array *":
        return _globalmapper.GM_HoleInArea_array_frompointer(t)


# Register GM_HoleInArea_array in _globalmapper:
_globalmapper.GM_HoleInArea_array_swigregister(GM_HoleInArea_array)

[docs]
def GM_HoleInArea_array_frompointer(t: "GM_HoleInArea_t") -> "GM_HoleInArea_array *":
    return _globalmapper.GM_HoleInArea_array_frompointer(t)



[docs]
def malloc_void(nbytes: "size_t") -> "void *":
    return _globalmapper.malloc_void(nbytes)


[docs]
def free_void(ptr: "void *") -> "void":
    return _globalmapper.free_void(ptr)

GM_MAX_NON_REGISTERED_VECTOR_IDX = _globalmapper.GM_MAX_NON_REGISTERED_VECTOR_IDX

GM_GROUP_SEP_STR = _globalmapper.GM_GROUP_SEP_STR

GM_INVALID_ELEV_VALUE = _globalmapper.GM_INVALID_ELEV_VALUE

GM_Error_None = _globalmapper.GM_Error_None

GM_Error_InvalidLayer = _globalmapper.GM_Error_InvalidLayer

GM_Error_InvalidParam = _globalmapper.GM_Error_InvalidParam

GM_Error_LoadError = _globalmapper.GM_Error_LoadError

GM_Error_MultipleLayers = _globalmapper.GM_Error_MultipleLayers

GM_Error_CollarSetup = _globalmapper.GM_Error_CollarSetup

GM_Error_DrawError = _globalmapper.GM_Error_DrawError

GM_Error_ExportError = _globalmapper.GM_Error_ExportError

GM_Error_NothingToExport = _globalmapper.GM_Error_NothingToExport

GM_Error_InvalidFormat = _globalmapper.GM_Error_InvalidFormat

GM_Error_RectifyError = _globalmapper.GM_Error_RectifyError

GM_Error_NotSupported = _globalmapper.GM_Error_NotSupported

GM_Error_NotRegistered = _globalmapper.GM_Error_NotRegistered

GM_Error_NoDataAtLocation = _globalmapper.GM_Error_NoDataAtLocation

GM_Error_OutOfMemory = _globalmapper.GM_Error_OutOfMemory

GM_Error_Projection = _globalmapper.GM_Error_Projection

GM_Error_NoProjectionSet = _globalmapper.GM_Error_NoProjectionSet

GM_Error_ViewShedCalc = _globalmapper.GM_Error_ViewShedCalc

GM_Error_OperationCanceled = _globalmapper.GM_Error_OperationCanceled

GM_Error_OnlineConnect = _globalmapper.GM_Error_OnlineConnect

GM_Error_OnlineUnknownSource = _globalmapper.GM_Error_OnlineUnknownSource

GM_Error_GenerateContours = _globalmapper.GM_Error_GenerateContours

GM_Error_NotRasterLayer = _globalmapper.GM_Error_NotRasterLayer

GM_Error_InvalidPackage = _globalmapper.GM_Error_InvalidPackage

GM_Error_InvalidFeatureIndex = _globalmapper.GM_Error_InvalidFeatureIndex

GM_Error_InvalidDrawStyle = _globalmapper.GM_Error_InvalidDrawStyle

GM_Error_InvalidSymbolName = _globalmapper.GM_Error_InvalidSymbolName

GM_Error_SymbolAlreadyCreated = _globalmapper.GM_Error_SymbolAlreadyCreated

GM_Error_MissingFile = _globalmapper.GM_Error_MissingFile

GM_Error_GPSDataNotValid = _globalmapper.GM_Error_GPSDataNotValid

GM_Error_GPSAlreadyTracking = _globalmapper.GM_Error_GPSAlreadyTracking

GM_Error_VolumeCalcFailed = _globalmapper.GM_Error_VolumeCalcFailed

GM_Error_InvalidHoleIndex = _globalmapper.GM_Error_InvalidHoleIndex

GM_Error_InvalidMapIndex = _globalmapper.GM_Error_InvalidMapIndex

GM_Error_3DNotOpen = _globalmapper.GM_Error_3DNotOpen

GM_Error_3DLibraryNotFound = _globalmapper.GM_Error_3DLibraryNotFound

GM_Error_3DLibraryBadInterface = _globalmapper.GM_Error_3DLibraryBadInterface

GM_Error_3DCreateError = _globalmapper.GM_Error_3DCreateError

GM_Error_3DSetViewError = _globalmapper.GM_Error_3DSetViewError

GM_Error_NothingFound = _globalmapper.GM_Error_NothingFound

GM_Error_SearchError = _globalmapper.GM_Error_SearchError

GM_Error_LowMemory = _globalmapper.GM_Error_LowMemory

GM_Error_NotElevationLayer = _globalmapper.GM_Error_NotElevationLayer

GM_Error_FileAlreadyInCatalog = _globalmapper.GM_Error_FileAlreadyInCatalog

GM_Error_TypeAlreadyExists = _globalmapper.GM_Error_TypeAlreadyExists

GM_Error_DatumAlreadyExists = _globalmapper.GM_Error_DatumAlreadyExists

GM_Error_UnknownEllipsoid = _globalmapper.GM_Error_UnknownEllipsoid

GM_Error_GridError = _globalmapper.GM_Error_GridError

GM_Error_InvalidShaderName = _globalmapper.GM_Error_InvalidShaderName

GM_Error_SymbolNotCustom = _globalmapper.GM_Error_SymbolNotCustom

GM_Error_MGRSParseError = _globalmapper.GM_Error_MGRSParseError

GM_Error_CreateBufferError = _globalmapper.GM_Error_CreateBufferError

GM_Error_CopyrightedData = _globalmapper.GM_Error_CopyrightedData

GM_Error_BrushAlreadyCreated = _globalmapper.GM_Error_BrushAlreadyCreated

GM_Error_BrushError = _globalmapper.GM_Error_BrushError

GM_Error_EllipsoidAlreadyExists = _globalmapper.GM_Error_EllipsoidAlreadyExists

GM_Error_CombineError = _globalmapper.GM_Error_CombineError

GM_Error_SkippedEmpty = _globalmapper.GM_Error_SkippedEmpty

GM_Error_NoFeatureElev = _globalmapper.GM_Error_NoFeatureElev

GM_Error_ArcGISNotLicensed = _globalmapper.GM_Error_ArcGISNotLicensed

GM_Error_NotSupportedIn64BitBuild = _globalmapper.GM_Error_NotSupportedIn64BitBuild

GM_Error_UnableToConnectToDB = _globalmapper.GM_Error_UnableToConnectToDB

GM_Error_Unspecified = _globalmapper.GM_Error_Unspecified

GM_Error_Script = _globalmapper.GM_Error_Script

GM_Error_InvalidLidarPointIdx = _globalmapper.GM_Error_InvalidLidarPointIdx

GM_Error_NothingChanged = _globalmapper.GM_Error_NothingChanged

GM_Error_NotPaletteLayer = _globalmapper.GM_Error_NotPaletteLayer

GM_Error_NotImageLayer = _globalmapper.GM_Error_NotImageLayer

GM_Error_InvalidBand = _globalmapper.GM_Error_InvalidBand

GM_Error_NoElevationLayersLoaded = _globalmapper.GM_Error_NoElevationLayersLoaded

GM_Error_NoVectorLayersLoaded = _globalmapper.GM_Error_NoVectorLayersLoaded

GM_Error_COAST = _globalmapper.GM_Error_COAST

GM_Error_NoCOASTModelParmsLoaded = _globalmapper.GM_Error_NoCOASTModelParmsLoaded

GM_Error_RegistryOpFailed = _globalmapper.GM_Error_RegistryOpFailed

GM_Error_InvalidCodePage = _globalmapper.GM_Error_InvalidCodePage

GM_Error_InvalidLidarQuery = _globalmapper.GM_Error_InvalidLidarQuery

GM_Error_LidarPointInQuery = _globalmapper.GM_Error_LidarPointInQuery

GM_Error_LidarPointNotInQuery = _globalmapper.GM_Error_LidarPointNotInQuery

GM_Error_GenAreas = _globalmapper.GM_Error_GenAreas

GM_Error_DownloadFailed = _globalmapper.GM_Error_DownloadFailed

GM_Error_ExportFileAlreadyExists = _globalmapper.GM_Error_ExportFileAlreadyExists

GM_Error_DeleteFailed = _globalmapper.GM_Error_DeleteFailed

GM_Error_DatabaseCreationFailed = _globalmapper.GM_Error_DatabaseCreationFailed

GM_Error_SpatialOperationsError = _globalmapper.GM_Error_SpatialOperationsError

GM_Error_LidarOpFailed = _globalmapper.GM_Error_LidarOpFailed

GM_Error_NoChangesFound = _globalmapper.GM_Error_NoChangesFound

GM_Error_PixelsToPoints = _globalmapper.GM_Error_PixelsToPoints

GM_Error_NonEditable = _globalmapper.GM_Error_NonEditable

GM_Error_HoleNotInParent = _globalmapper.GM_Error_HoleNotInParent

GM_Error_InvalidLayerName = _globalmapper.GM_Error_InvalidLayerName

GM_Error_PositionOutOfBounds = _globalmapper.GM_Error_PositionOutOfBounds

GM_Error_FileError = _globalmapper.GM_Error_FileError

GM_Error_NoLidarLayersLoaded = _globalmapper.GM_Error_NoLidarLayersLoaded

GM_Error_CoordOutOfRange = _globalmapper.GM_Error_CoordOutOfRange

GM_Error_InvalidProjDef = _globalmapper.GM_Error_InvalidProjDef

GM_Error_NumCodes = _globalmapper.GM_Error_NumCodes

GM_Error_NotImplemented = _globalmapper.GM_Error_NotImplemented

GM_Error_TerraServerConnect = _globalmapper.GM_Error_TerraServerConnect

GM_Error_TerraServerBadTheme = _globalmapper.GM_Error_TerraServerBadTheme

GM_FeatureClass_Area = _globalmapper.GM_FeatureClass_Area

GM_FeatureClass_Line = _globalmapper.GM_FeatureClass_Line

GM_FeatureClass_Point = _globalmapper.GM_FeatureClass_Point

GM_FeatureClass_Mesh = _globalmapper.GM_FeatureClass_Mesh

GM_FeatureClass_Lidar = _globalmapper.GM_FeatureClass_Lidar

GM_FeatureClass_NumTypes = _globalmapper.GM_FeatureClass_NumTypes

GM_LoadFlags_HideProgress = _globalmapper.GM_LoadFlags_HideProgress

GM_LoadFlags_NoProjPrompt = _globalmapper.GM_LoadFlags_NoProjPrompt

GM_LoadFlags_UseDefaultProj = _globalmapper.GM_LoadFlags_UseDefaultProj

GM_LoadFlags_HideWarnings = _globalmapper.GM_LoadFlags_HideWarnings

GM_LoadFlags_HideUnknownPrompt = _globalmapper.GM_LoadFlags_HideUnknownPrompt

GM_LoadFlags_UseDefaultPos = _globalmapper.GM_LoadFlags_UseDefaultPos

GM_LoadFlags_HideAllPrompts = _globalmapper.GM_LoadFlags_HideAllPrompts

GM_LoadFlags_SkipUnloadAll = _globalmapper.GM_LoadFlags_SkipUnloadAll

GM_LoadFlags_AssumeFileExists = _globalmapper.GM_LoadFlags_AssumeFileExists

GM_LoadFlags_LoadMetadataOnly = _globalmapper.GM_LoadFlags_LoadMetadataOnly

GM_LoadFlags_UseHiddenLayers = _globalmapper.GM_LoadFlags_UseHiddenLayers

GM_LoadFlags_ForceRectify = _globalmapper.GM_LoadFlags_ForceRectify

GM_LoadFlags_IsModelLoad = _globalmapper.GM_LoadFlags_IsModelLoad

GM_LoadFlags_NoPicturePos = _globalmapper.GM_LoadFlags_NoPicturePos

GM_LoadFlags_LoadUnknownAsImage = _globalmapper.GM_LoadFlags_LoadUnknownAsImage

GM_LoadFlags_LoadUnknownAsGrid = _globalmapper.GM_LoadFlags_LoadUnknownAsGrid

GM_LoadFlags_OnlyPicturePos = _globalmapper.GM_LoadFlags_OnlyPicturePos

GM_LoadFlags_NoEmptyError = _globalmapper.GM_LoadFlags_NoEmptyError

GM_LoadFlags_No3dModels = _globalmapper.GM_LoadFlags_No3dModels

GM_LoadFlags_UseDefaultLoadOpts = _globalmapper.GM_LoadFlags_UseDefaultLoadOpts

GM_LoadFlags_NoBlendAllowed = _globalmapper.GM_LoadFlags_NoBlendAllowed

GM_LoadFlags_DisableSplit = _globalmapper.GM_LoadFlags_DisableSplit

GM_LoadFlags_NoWebDownload = _globalmapper.GM_LoadFlags_NoWebDownload

GM_Export_GeoTIFF = _globalmapper.GM_Export_GeoTIFF

GM_Export_JPG = _globalmapper.GM_Export_JPG

GM_Export_PNG = _globalmapper.GM_Export_PNG

GM_Export_Erdas_Imagine = _globalmapper.GM_Export_Erdas_Imagine

GM_Export_BMP = _globalmapper.GM_Export_BMP

GM_Export_ECW = _globalmapper.GM_Export_ECW

GM_Export_BIL_Raster = _globalmapper.GM_Export_BIL_Raster

GM_Export_JPEG2000 = _globalmapper.GM_Export_JPEG2000

GM_Export_NITF = _globalmapper.GM_Export_NITF

GM_Export_BIP = _globalmapper.GM_Export_BIP

GM_Export_BSQ = _globalmapper.GM_Export_BSQ

GM_Export_EsriGDB_Raster = _globalmapper.GM_Export_EsriGDB_Raster

GM_Export_CADRG_CIB = _globalmapper.GM_Export_CADRG_CIB

GM_Export_GMG_WebTiles = _globalmapper.GM_Export_GMG_WebTiles

GM_Export_NumRasterFormats = _globalmapper.GM_Export_NumRasterFormats

GM_Export_GMG = _globalmapper.GM_Export_GMG

GM_Export_BIL = _globalmapper.GM_Export_BIL

GM_Export_Erdas_Elevation = _globalmapper.GM_Export_Erdas_Elevation

GM_Export_Surfer_ASCII = _globalmapper.GM_Export_Surfer_ASCII

GM_Export_Surfer_Binary_v6 = _globalmapper.GM_Export_Surfer_Binary_v6

GM_Export_Surfer_Binary_v7 = _globalmapper.GM_Export_Surfer_Binary_v7

GM_Export_DEM = _globalmapper.GM_Export_DEM

GM_Export_XYZ_ASCII_Grid = _globalmapper.GM_Export_XYZ_ASCII_Grid

GM_Export_Arc_ASCII_Grid = _globalmapper.GM_Export_Arc_ASCII_Grid

GM_Export_ElevGeoTIFF = _globalmapper.GM_Export_ElevGeoTIFF

GM_Export_DXF_Point = _globalmapper.GM_Export_DXF_Point

GM_Export_Float_Grid = _globalmapper.GM_Export_Float_Grid

GM_Export_DTED = _globalmapper.GM_Export_DTED

GM_Export_Vertical_Mapper_Grid = _globalmapper.GM_Export_Vertical_Mapper_Grid

GM_Export_Windsim_GWS = _globalmapper.GM_Export_Windsim_GWS

GM_Export_VRML = _globalmapper.GM_Export_VRML

GM_Export_STL = _globalmapper.GM_Export_STL

GM_Export_STL_Binary = _globalmapper.GM_Export_STL_Binary

GM_Export_EsriGDB_Elevation = _globalmapper.GM_Export_EsriGDB_Elevation

GM_Export_Vulcan_TIN = _globalmapper.GM_Export_Vulcan_TIN

GM_Export_Geosoft_Grid = _globalmapper.GM_Export_Geosoft_Grid

GM_Export_NumElevationFormats = _globalmapper.GM_Export_NumElevationFormats

GM_Export_DXF = _globalmapper.GM_Export_DXF

GM_Export_Shapefile = _globalmapper.GM_Export_Shapefile

GM_Export_KML = _globalmapper.GM_Export_KML

GM_Export_MapInfo_MIF = _globalmapper.GM_Export_MapInfo_MIF

GM_Export_MapInfo_TAB = _globalmapper.GM_Export_MapInfo_TAB

GM_Export_WaspMap = _globalmapper.GM_Export_WaspMap

GM_Export_SimpleText = _globalmapper.GM_Export_SimpleText

GM_Export_CSV = _globalmapper.GM_Export_CSV

GM_Export_SVG = _globalmapper.GM_Export_SVG

GM_Export_SpatialDB = _globalmapper.GM_Export_SpatialDB

GM_Export_DWG = _globalmapper.GM_Export_DWG

GM_Export_NumVectorFormats = _globalmapper.GM_Export_NumVectorFormats

GM_Export_GoogleMaps = _globalmapper.GM_Export_GoogleMaps

GM_Export_VirtualEarth = _globalmapper.GM_Export_VirtualEarth

GM_Export_KMLRaster = _globalmapper.GM_Export_KMLRaster

GM_Export_WorldWind = _globalmapper.GM_Export_WorldWind

GM_Export_TMS = _globalmapper.GM_Export_TMS

GM_Export_OSM = _globalmapper.GM_Export_OSM

GM_Export_MBTiles = _globalmapper.GM_Export_MBTiles

GM_Export_RMaps = _globalmapper.GM_Export_RMaps

GM_Export_Zoomify = _globalmapper.GM_Export_Zoomify

GM_Export_GeoPackage = _globalmapper.GM_Export_GeoPackage

GM_Export_MBVTiles = _globalmapper.GM_Export_MBVTiles

GM_Export_NumWebFormats = _globalmapper.GM_Export_NumWebFormats

GM_Export_BingMaps = _globalmapper.GM_Export_BingMaps

GM_ExportFlags_GenWorldFile = _globalmapper.GM_ExportFlags_GenWorldFile

GM_ExportFlags_GenPRJFile = _globalmapper.GM_ExportFlags_GenPRJFile

GM_ExportFlags_GenTABFile = _globalmapper.GM_ExportFlags_GenTABFile

GM_ExportFlags_Grayscale = _globalmapper.GM_ExportFlags_Grayscale

GM_ExportFlags_Palette = _globalmapper.GM_ExportFlags_Palette

GM_ExportFlags_HideProgress = _globalmapper.GM_ExportFlags_HideProgress

GM_ExportFlags_JPGinTIFF = _globalmapper.GM_ExportFlags_JPGinTIFF

GM_ExportFlags_FillSmallGaps = _globalmapper.GM_ExportFlags_FillSmallGaps

GM_ExportFlags_AllowLossy = _globalmapper.GM_ExportFlags_AllowLossy

GM_ExportFlags_16BitSamples = _globalmapper.GM_ExportFlags_16BitSamples

GM_ExportFlags_UseLZW = _globalmapper.GM_ExportFlags_UseLZW

GM_ExportFlags_NoTransparent = _globalmapper.GM_ExportFlags_NoTransparent

GM_ExportFlags_AddAlpha = _globalmapper.GM_ExportFlags_AddAlpha

GM_ExportFlags_SeparateVectorLayers = _globalmapper.GM_ExportFlags_SeparateVectorLayers

GM_ExportFlags_HidePartialLabels = _globalmapper.GM_ExportFlags_HidePartialLabels

GM_ExportFlags_ExportSlopeValues = _globalmapper.GM_ExportFlags_ExportSlopeValues

GM_ExportFlags_ExportSlopeDirValues = _globalmapper.GM_ExportFlags_ExportSlopeDirValues

GM_ExportFlags_UseEsriHdrFormat = _globalmapper.GM_ExportFlags_UseEsriHdrFormat

GM_ExportFlags_BigEndian = _globalmapper.GM_ExportFlags_BigEndian

GM_ExportFlags_ForceSquareSamples = _globalmapper.GM_ExportFlags_ForceSquareSamples

GM_ExportFlags_NoCompression = _globalmapper.GM_ExportFlags_NoCompression

GM_ExportFlags_UseRGBIfTooManyColors = _globalmapper.GM_ExportFlags_UseRGBIfTooManyColors

GM_ExportFlags_SkipEmpty = _globalmapper.GM_ExportFlags_SkipEmpty

GM_ExportFlags_GenAuxXmlFile = _globalmapper.GM_ExportFlags_GenAuxXmlFile

GM_ExportFlags_UseDeflate = _globalmapper.GM_ExportFlags_UseDeflate

GM_ExportFlags_ExcludeVectorLayers = _globalmapper.GM_ExportFlags_ExcludeVectorLayers

GM_ExportFlags_IncludeMapLayout = _globalmapper.GM_ExportFlags_IncludeMapLayout

GM_ExportFlags_UseNearBlack = _globalmapper.GM_ExportFlags_UseNearBlack

GM_ExportFlags_BestRasterLayers = _globalmapper.GM_ExportFlags_BestRasterLayers

GM_ExportFlags_BestRasterLayersHiRes = _globalmapper.GM_ExportFlags_BestRasterLayersHiRes

GM_ExportFlags_LowResRasterLayers = _globalmapper.GM_ExportFlags_LowResRasterLayers

GM_ExportFlags_HiResRasterLayers = _globalmapper.GM_ExportFlags_HiResRasterLayers

GM_ExportFlags_BestRasterChart = _globalmapper.GM_ExportFlags_BestRasterChart

GM_ExportFlags_RasterMask = _globalmapper.GM_ExportFlags_RasterMask

GM_VectorExportFlags_GenPRJFile = _globalmapper.GM_VectorExportFlags_GenPRJFile

GM_VectorExportFlags_HideProgress = _globalmapper.GM_VectorExportFlags_HideProgress

GM_VectorExportFlags_ExportAreas = _globalmapper.GM_VectorExportFlags_ExportAreas

GM_VectorExportFlags_ExportLines = _globalmapper.GM_VectorExportFlags_ExportLines

GM_VectorExportFlags_ExportPoints = _globalmapper.GM_VectorExportFlags_ExportPoints

GM_VectorExportFlags_ExportAttrs = _globalmapper.GM_VectorExportFlags_ExportAttrs

GM_VectorExportFlags_Export3D = _globalmapper.GM_VectorExportFlags_Export3D

GM_VectorExportFlags_NoHeaderRow = _globalmapper.GM_VectorExportFlags_NoHeaderRow

GM_VectorExportFlags_IncludeLatLonCols = _globalmapper.GM_VectorExportFlags_IncludeLatLonCols

GM_VectorExportFlags_NoLatLonFormatting = _globalmapper.GM_VectorExportFlags_NoLatLonFormatting

GM_VectorExportFlags_ExportMGRS = _globalmapper.GM_VectorExportFlags_ExportMGRS

GM_VectorExportFlags_ExportAll = _globalmapper.GM_VectorExportFlags_ExportAll

GM_ExportPackage_LatLongWGS84 = _globalmapper.GM_ExportPackage_LatLongWGS84

GM_ExportPackage_DoublePrecision = _globalmapper.GM_ExportPackage_DoublePrecision

GM_ExportPackage_DiscardAttributes = _globalmapper.GM_ExportPackage_DiscardAttributes

GM_ExportPackage_HideProgress = _globalmapper.GM_ExportPackage_HideProgress

GM_ExportPackage_KeepAllStyles = _globalmapper.GM_ExportPackage_KeepAllStyles

GM_ExportPackage_UseNativeProj = _globalmapper.GM_ExportPackage_UseNativeProj

GM_ExportPackage_CombineVectorLayers = _globalmapper.GM_ExportPackage_CombineVectorLayers

GM_ExportPackage_ExtraElevPrecision = _globalmapper.GM_ExportPackage_ExtraElevPrecision

GM_ExportPackage_EmbedImages = _globalmapper.GM_ExportPackage_EmbedImages

GM_ExportPackage_NoAreaFeatures = _globalmapper.GM_ExportPackage_NoAreaFeatures

GM_ExportPackage_NoLineFeatures = _globalmapper.GM_ExportPackage_NoLineFeatures

GM_ExportPackage_NoPointFeatures = _globalmapper.GM_ExportPackage_NoPointFeatures

GM_ExportPackage_MobileFormat = _globalmapper.GM_ExportPackage_MobileFormat

GM_ExportPackage_IncludeThumbnail = _globalmapper.GM_ExportPackage_IncludeThumbnail

GM_ExportPackage_UseJP2 = _globalmapper.GM_ExportPackage_UseJP2

GM_ExportPackage_AlwaysUseJP2 = _globalmapper.GM_ExportPackage_AlwaysUseJP2

GM_ExportPackage_SortLidar = _globalmapper.GM_ExportPackage_SortLidar

GM_ExportPackage_ResampleExternally = _globalmapper.GM_ExportPackage_ResampleExternally

GM_ExportPackage_KeepHiddenFeatures = _globalmapper.GM_ExportPackage_KeepHiddenFeatures

GM_ExportPackage_IgnoreBounds = _globalmapper.GM_ExportPackage_IgnoreBounds

GM_ExportPackage_IncludeViewBounds = _globalmapper.GM_ExportPackage_IncludeViewBounds

GM_ExportPackage_EmbedImagesAll = _globalmapper.GM_ExportPackage_EmbedImagesAll

GM_ExportPackage_EmbedAudio = _globalmapper.GM_ExportPackage_EmbedAudio

GM_GridValType_SInt16 = _globalmapper.GM_GridValType_SInt16

GM_GridValType_SInt32 = _globalmapper.GM_GridValType_SInt32

GM_GridValType_Float = _globalmapper.GM_GridValType_Float

GM_GridValType_NumTypes = _globalmapper.GM_GridValType_NumTypes

GM_DrawFlags_BestRasterLayers = _globalmapper.GM_DrawFlags_BestRasterLayers

GM_DrawFlags_BestRasterLayersHiRes = _globalmapper.GM_DrawFlags_BestRasterLayersHiRes

GM_DrawFlags_LowResRasterLayers = _globalmapper.GM_DrawFlags_LowResRasterLayers

GM_DrawFlags_HiResRasterLayers = _globalmapper.GM_DrawFlags_HiResRasterLayers

GM_DrawFlags_BestRasterChart = _globalmapper.GM_DrawFlags_BestRasterChart

GM_DrawFlags_EraseBackground = _globalmapper.GM_DrawFlags_EraseBackground

GM_DrawFlags_HideAreas = _globalmapper.GM_DrawFlags_HideAreas

GM_DrawFlags_HideLines = _globalmapper.GM_DrawFlags_HideLines

GM_DrawFlags_HidePoints = _globalmapper.GM_DrawFlags_HidePoints

GM_DrawFlags_SeparateVectorLayers = _globalmapper.GM_DrawFlags_SeparateVectorLayers

GM_DrawFlags_HideLabels = _globalmapper.GM_DrawFlags_HideLabels

GM_DrawFlags_DontMaintainAspectRatio = _globalmapper.GM_DrawFlags_DontMaintainAspectRatio

GM_DrawFlags_HidePartialLabels = _globalmapper.GM_DrawFlags_HidePartialLabels

GM_DrawFlags_ShowRenderProgress = _globalmapper.GM_DrawFlags_ShowRenderProgress

GM_DrawFlags_HideExtraIconText = _globalmapper.GM_DrawFlags_HideExtraIconText

GM_DrawFlags_HideNonIconRoadLabels = _globalmapper.GM_DrawFlags_HideNonIconRoadLabels

GM_DrawFlags_RenderVertices = _globalmapper.GM_DrawFlags_RenderVertices

GM_DrawFlags_IncrementalRender = _globalmapper.GM_DrawFlags_IncrementalRender

GM_DrawFlags_NoAutoInterpolation = _globalmapper.GM_DrawFlags_NoAutoInterpolation

GM_DrawFlags_DrawMapLayoutLayers = _globalmapper.GM_DrawFlags_DrawMapLayoutLayers

GM_DrawFlags_Hide3DFeatures = _globalmapper.GM_DrawFlags_Hide3DFeatures

GM_DrawFlags_NoValidBgColorPixels = _globalmapper.GM_DrawFlags_NoValidBgColorPixels

GM_DrawFlags_OnlyLoadedLayers = _globalmapper.GM_DrawFlags_OnlyLoadedLayers

GM_DrawFlags_HideSelFeatures = _globalmapper.GM_DrawFlags_HideSelFeatures

GM_DrawFlags_IgnoreTypeFilter = _globalmapper.GM_DrawFlags_IgnoreTypeFilter

GM_DrawFlags_NoResampling = _globalmapper.GM_DrawFlags_NoResampling

GM_DrawFlags_DontSaveDrawBounds = _globalmapper.GM_DrawFlags_DontSaveDrawBounds

GM_DrawFlags_RasterMask = _globalmapper.GM_DrawFlags_RasterMask

GM_MiscOpt_DXFInsertsAsPoints = _globalmapper.GM_MiscOpt_DXFInsertsAsPoints

GM_MiscOpt_TIFFPreferTFW = _globalmapper.GM_MiscOpt_TIFFPreferTFW

GM_MiscOpt_ExportOldFormatPRJ = _globalmapper.GM_MiscOpt_ExportOldFormatPRJ

GM_MiscOpt_DXFLayersAsCustomTypes = _globalmapper.GM_MiscOpt_DXFLayersAsCustomTypes

GM_MiscOpt_HideNonIconRoadLabels = _globalmapper.GM_MiscOpt_HideNonIconRoadLabels

GM_MiscOpt_ClampGridToDataBounds = _globalmapper.GM_MiscOpt_ClampGridToDataBounds

GM_MiscOpt_BILQueryFor16BitType = _globalmapper.GM_MiscOpt_BILQueryFor16BitType

GM_MiscOpt_BorderHighlightAreas = _globalmapper.GM_MiscOpt_BorderHighlightAreas

GM_MiscOpt_AddRecIDAttribute = _globalmapper.GM_MiscOpt_AddRecIDAttribute

GM_MiscOpt_DefaultToOEMCharset = _globalmapper.GM_MiscOpt_DefaultToOEMCharset

GM_MiscOpt_CenterLabelsTransparent = _globalmapper.GM_MiscOpt_CenterLabelsTransparent

GM_MiscOpt_MarkAddressedSegments = _globalmapper.GM_MiscOpt_MarkAddressedSegments

GM_MiscOpt_HideOffscreenLabels = _globalmapper.GM_MiscOpt_HideOffscreenLabels

GM_MiscOpt_UseCRLFInWorldFiles = _globalmapper.GM_MiscOpt_UseCRLFInWorldFiles

GM_MiscOpt_LogDebugMessages = _globalmapper.GM_MiscOpt_LogDebugMessages

GM_MiscOpt_DontCropAtATM = _globalmapper.GM_MiscOpt_DontCropAtATM

GM_MiscOpt_DisableAutoSmooth = _globalmapper.GM_MiscOpt_DisableAutoSmooth

GM_MiscOpt_UseFilePathForExport = _globalmapper.GM_MiscOpt_UseFilePathForExport

GM_MiscOpt_MarkTurnRestrictions = _globalmapper.GM_MiscOpt_MarkTurnRestrictions

GM_MiscOpt_DontAutoContrastDGTiffs = _globalmapper.GM_MiscOpt_DontAutoContrastDGTiffs

GM_MiscOpt_HideMeasureAttrUnitNames = _globalmapper.GM_MiscOpt_HideMeasureAttrUnitNames

GM_MiscOpt_DGNImportCellsAsPoints = _globalmapper.GM_MiscOpt_DGNImportCellsAsPoints

GM_MiscOpt_DGNAddColorToDesc = _globalmapper.GM_MiscOpt_DGNAddColorToDesc

GM_MiscOpt_MaintainExportBounds = _globalmapper.GM_MiscOpt_MaintainExportBounds

GM_MiscOpt_AutoIconizeRoadNames = _globalmapper.GM_MiscOpt_AutoIconizeRoadNames

GM_MiscOpt_RenderEndpoints = _globalmapper.GM_MiscOpt_RenderEndpoints

GM_MiscOpt_KeepPixelIfAnyInCropPoly = _globalmapper.GM_MiscOpt_KeepPixelIfAnyInCropPoly

GM_MiscOpt_LabelLinesOnLongestSeg = _globalmapper.GM_MiscOpt_LabelLinesOnLongestSeg

GM_MiscOpt_AreaLabelsMustFitInArea = _globalmapper.GM_MiscOpt_AreaLabelsMustFitInArea

GM_MiscOpt_TreatDbfTextAsUtf8 = _globalmapper.GM_MiscOpt_TreatDbfTextAsUtf8

GM_MiscOpt_AlwaysInterpolateRasters = _globalmapper.GM_MiscOpt_AlwaysInterpolateRasters

GM_MiscOpt_DisableAutoExportInterp = _globalmapper.GM_MiscOpt_DisableAutoExportInterp

GM_MiscOpt_UsePenUpBorderDrawMode = _globalmapper.GM_MiscOpt_UsePenUpBorderDrawMode

GM_MiscOpt_UseGridDistance = _globalmapper.GM_MiscOpt_UseGridDistance

GM_MiscOpt_AlwaysFakeRasterPos = _globalmapper.GM_MiscOpt_AlwaysFakeRasterPos

GM_MiscOpt_PlacePRJAfterFullFName = _globalmapper.GM_MiscOpt_PlacePRJAfterFullFName

GM_MiscOpt_IncludeDatumXFormAndEpsgInPRJ = _globalmapper.GM_MiscOpt_IncludeDatumXFormAndEpsgInPRJ

GM_MiscOpt_DefaultContrastMinMax = _globalmapper.GM_MiscOpt_DefaultContrastMinMax

GM_MiscOpt_S57IncludeValAndDesc = _globalmapper.GM_MiscOpt_S57IncludeValAndDesc

GM_MiscOpt_UseRhumbLineDistance = _globalmapper.GM_MiscOpt_UseRhumbLineDistance

GM_MiscOpt_DisableAutoContrast = _globalmapper.GM_MiscOpt_DisableAutoContrast

GM_MiscOpt_SnapExportToPixel = _globalmapper.GM_MiscOpt_SnapExportToPixel

GM_MiscOpt_NoAutoInterpTerrain = _globalmapper.GM_MiscOpt_NoAutoInterpTerrain

GM_MiscOpt_GeoTIFFNoCompDefault = _globalmapper.GM_MiscOpt_GeoTIFFNoCompDefault

GM_MiscOpt_MeasureWholeNumbers = _globalmapper.GM_MiscOpt_MeasureWholeNumbers

GM_MiscOpt_ShowSegLensOnMap = _globalmapper.GM_MiscOpt_ShowSegLensOnMap

GM_MiscOpt_ShowSegBearingsOnMap = _globalmapper.GM_MiscOpt_ShowSegBearingsOnMap

GM_MiscOpt_CheckBinarySTL = _globalmapper.GM_MiscOpt_CheckBinarySTL

GM_MiscOpt_DontCopyErrorToClip = _globalmapper.GM_MiscOpt_DontCopyErrorToClip

GM_MiscOpt_LoadExifJpgAsImage = _globalmapper.GM_MiscOpt_LoadExifJpgAsImage

GM_MiscOpt_DontAppendGridUnits = _globalmapper.GM_MiscOpt_DontAppendGridUnits

GM_MiscOpt_DisableCustomFileSave = _globalmapper.GM_MiscOpt_DisableCustomFileSave

GM_MiscOpt_OnlySnapToPoints = _globalmapper.GM_MiscOpt_OnlySnapToPoints

GM_MiscOpt_SnapExportToSpacing = _globalmapper.GM_MiscOpt_SnapExportToSpacing

GM_MiscOpt_S57ShortAttrNameVal = _globalmapper.GM_MiscOpt_S57ShortAttrNameVal

GM_MiscOpt_ElevCropAreaBoundsGrid = _globalmapper.GM_MiscOpt_ElevCropAreaBoundsGrid

GM_MiscOpt_RectifyNo2ndDegPoly = _globalmapper.GM_MiscOpt_RectifyNo2ndDegPoly

GM_MiscOpt_ScaleElevShaderToView = _globalmapper.GM_MiscOpt_ScaleElevShaderToView

GM_MiscOpt_GPSUseShaderForVessel = _globalmapper.GM_MiscOpt_GPSUseShaderForVessel

GM_MiscOpt_GPSUseShaderForTrack = _globalmapper.GM_MiscOpt_GPSUseShaderForTrack

GM_MiscOpt_OnlineExportZoomSameAsDraw = _globalmapper.GM_MiscOpt_OnlineExportZoomSameAsDraw

GM_MiscOpt_RestoreLastMapLayout = _globalmapper.GM_MiscOpt_RestoreLastMapLayout

GM_MiscOpt_HideStyleAttr = _globalmapper.GM_MiscOpt_HideStyleAttr

GM_MiscOpt_KeepEntireClippedFeature = _globalmapper.GM_MiscOpt_KeepEntireClippedFeature

GM_MiscOpt_MSSQLUseGeometryColumns = _globalmapper.GM_MiscOpt_MSSQLUseGeometryColumns

GM_MiscOpt_DontPrependGroupsToLayerNames = _globalmapper.GM_MiscOpt_DontPrependGroupsToLayerNames

GM_MiscOpt_OnlineTilesSaveWorldFile = _globalmapper.GM_MiscOpt_OnlineTilesSaveWorldFile

GM_MiscOpt_DontPreventLabelCollisionsAcrossLayerGroups = _globalmapper.GM_MiscOpt_DontPreventLabelCollisionsAcrossLayerGroups

GM_MiscOpt_PdfUseOldRenderer = _globalmapper.GM_MiscOpt_PdfUseOldRenderer

GM_MiscOpt_DontSaveViewLayoutToGMW = _globalmapper.GM_MiscOpt_DontSaveViewLayoutToGMW

GM_MiscOpt_DontShowPerpProfileHelpTip = _globalmapper.GM_MiscOpt_DontShowPerpProfileHelpTip

GM_MiscOpt_GPSStartTrackingAtStartup = _globalmapper.GM_MiscOpt_GPSStartTrackingAtStartup

GM_MiscOpt_RenderAutoCropPolyOnMap = _globalmapper.GM_MiscOpt_RenderAutoCropPolyOnMap

GM_MiscOpt_ControlCenterReverseOrder = _globalmapper.GM_MiscOpt_ControlCenterReverseOrder

GM_MiscOpt_DontCenterMapOnSelVertex = _globalmapper.GM_MiscOpt_DontCenterMapOnSelVertex

GM_MiscOpt_ReformatDbfNumbers = _globalmapper.GM_MiscOpt_ReformatDbfNumbers

GM_MiscOpt_OverviewDrawLabels = _globalmapper.GM_MiscOpt_OverviewDrawLabels

GM_MiscOpt_OverviewTrackVisibleLayers = _globalmapper.GM_MiscOpt_OverviewTrackVisibleLayers

GM_MiscOpt_DisableScriptRunCommand = _globalmapper.GM_MiscOpt_DisableScriptRunCommand

GM_MiscOpt_DisplayLatLongPadding = _globalmapper.GM_MiscOpt_DisplayLatLongPadding

GM_MiscOpt_OverlapFakePosRasterLayers = _globalmapper.GM_MiscOpt_OverlapFakePosRasterLayers

GM_MiscOpt_GridRemoveTrailingZeros = _globalmapper.GM_MiscOpt_GridRemoveTrailingZeros

GM_MiscOpt_HideSelFeatures = _globalmapper.GM_MiscOpt_HideSelFeatures

GM_MiscOpt_LidarUpdateRetCountOnDelete = _globalmapper.GM_MiscOpt_LidarUpdateRetCountOnDelete

GM_MiscOpt_DefaultUserCreatedLayer = _globalmapper.GM_MiscOpt_DefaultUserCreatedLayer

GM_MiscOpt_DefaultUseDisplayProjection = _globalmapper.GM_MiscOpt_DefaultUseDisplayProjection

GM_MiscOpt_DisplayTimesAsUTC = _globalmapper.GM_MiscOpt_DisplayTimesAsUTC

GM_MiscOpt_UseUserDefinedAnimationTime = _globalmapper.GM_MiscOpt_UseUserDefinedAnimationTime

GM_MiscOpt_NoLayerSaveWarning = _globalmapper.GM_MiscOpt_NoLayerSaveWarning

GM_MiscOpt_NoLayerReorderWarning = _globalmapper.GM_MiscOpt_NoLayerReorderWarning

GM_MiscOpt_LidarSaveRetCountUpdatedPts = _globalmapper.GM_MiscOpt_LidarSaveRetCountUpdatedPts

GM_MiscOpt_SnapToLidar = _globalmapper.GM_MiscOpt_SnapToLidar

GM_MiscOpt_DGNImportByLevel = _globalmapper.GM_MiscOpt_DGNImportByLevel

GM_MiscOpt_DWGImportByLayer = _globalmapper.GM_MiscOpt_DWGImportByLayer

GM_MiscOpt_XYZLoadAsLidarCloud = _globalmapper.GM_MiscOpt_XYZLoadAsLidarCloud

GM_MiscOpt_UpdatePicturePointExifOnMove = _globalmapper.GM_MiscOpt_UpdatePicturePointExifOnMove

GM_MiscOpt_BackupPicturePointImageOnUpdateExif = _globalmapper.GM_MiscOpt_BackupPicturePointImageOnUpdateExif

GM_MiscOpt_GeoTIFFExportOverview = _globalmapper.GM_MiscOpt_GeoTIFFExportOverview

GM_MiscOpt_DWGUseLegacyImporter = _globalmapper.GM_MiscOpt_DWGUseLegacyImporter

GM_MiscOpt_DXFUseLegacyImporter = _globalmapper.GM_MiscOpt_DXFUseLegacyImporter

GM_MiscOpt_S57DontMultiLayerLoad = _globalmapper.GM_MiscOpt_S57DontMultiLayerLoad

GM_MiscOpt_ShowGridRefForBritGrid = _globalmapper.GM_MiscOpt_ShowGridRefForBritGrid

GM_MiscOpt_FormatEpochAttrEditor = _globalmapper.GM_MiscOpt_FormatEpochAttrEditor

GM_MiscOpt_GpsDontExportActiveTrack = _globalmapper.GM_MiscOpt_GpsDontExportActiveTrack

GM_MiscOpt_StayInMoveMode = _globalmapper.GM_MiscOpt_StayInMoveMode

GM_MiscOpt_DrawFatRoads = _globalmapper.GM_MiscOpt_DrawFatRoads

GM_MiscOpt_LinearMeasureUnits = _globalmapper.GM_MiscOpt_LinearMeasureUnits

GM_MiscOpt_AllowUnlimitedECWExportSize = _globalmapper.GM_MiscOpt_AllowUnlimitedECWExportSize

GM_MiscOpt_SetVectorExportElevUnits = _globalmapper.GM_MiscOpt_SetVectorExportElevUnits

GM_MiscOpt_PositionDisplayFormat = _globalmapper.GM_MiscOpt_PositionDisplayFormat

GM_MiscOpt_AreaMeasureUnits = _globalmapper.GM_MiscOpt_AreaMeasureUnits

GM_MiscOpt_VolumeMeasureUnits = _globalmapper.GM_MiscOpt_VolumeMeasureUnits

GM_MiscOpt_SetDefaultFontCharset = _globalmapper.GM_MiscOpt_SetDefaultFontCharset

GM_MiscOpt_ElevDispExpUnits = _globalmapper.GM_MiscOpt_ElevDispExpUnits

GM_MiscOpt_SetLogLevel = _globalmapper.GM_MiscOpt_SetLogLevel

GM_MiscOpt_SetLogFilename = _globalmapper.GM_MiscOpt_SetLogFilename

GM_MiscOpt_SetTimingsFilename = _globalmapper.GM_MiscOpt_SetTimingsFilename

GM_MiscOpt_SetTempFolder = _globalmapper.GM_MiscOpt_SetTempFolder

GM_MiscOpt_GPSCenterOnVehicle = _globalmapper.GM_MiscOpt_GPSCenterOnVehicle

GM_MiscOpt_GPSOrientTrackUp = _globalmapper.GM_MiscOpt_GPSOrientTrackUp

GM_MiscOpt_CenterOnTargetPoly = _globalmapper.GM_MiscOpt_CenterOnTargetPoly

GM_MiscOpt_VideoCenterOnVehicle = _globalmapper.GM_MiscOpt_VideoCenterOnVehicle

GM_MiscOpt_VideoOrientTrackUp = _globalmapper.GM_MiscOpt_VideoOrientTrackUp

GM_MiscOpt_BearingSense = _globalmapper.GM_MiscOpt_BearingSense

GM_MiscOpt_SetLidarDrawMode = _globalmapper.GM_MiscOpt_SetLidarDrawMode

GM_MiscOpt_SetDefaultProjection = _globalmapper.GM_MiscOpt_SetDefaultProjection

GM_MiscOpt_Invalid = _globalmapper.GM_MiscOpt_Invalid

GM_MiscOpt_IncludeDatumXFormInPRJ = _globalmapper.GM_MiscOpt_IncludeDatumXFormInPRJ

GM_MiscOptVal_Off = _globalmapper.GM_MiscOptVal_Off

GM_MiscOptVal_On = _globalmapper.GM_MiscOptVal_On

GM_MiscOptVal_Toggle = _globalmapper.GM_MiscOptVal_Toggle

GM_FindFlags_FindAreas = _globalmapper.GM_FindFlags_FindAreas

GM_FindFlags_FindLines = _globalmapper.GM_FindFlags_FindLines

GM_FindFlags_FindPoints = _globalmapper.GM_FindFlags_FindPoints

GM_FindFlags_GetAllFeatures = _globalmapper.GM_FindFlags_GetAllFeatures

GM_FindFlags_DoFullCropTest = _globalmapper.GM_FindFlags_DoFullCropTest

GM_FindFlags_PartialOk = _globalmapper.GM_FindFlags_PartialOk

GM_FindFlags_FindLidar = _globalmapper.GM_FindFlags_FindLidar

GM_FindFlags_FindMeshes = _globalmapper.GM_FindFlags_FindMeshes

GM_FindFlags_FindAll = _globalmapper.GM_FindFlags_FindAll

GM_FindFlags_FindAllEx = _globalmapper.GM_FindFlags_FindAllEx

GM_SelectFlags_Areas = _globalmapper.GM_SelectFlags_Areas

GM_SelectFlags_Lines = _globalmapper.GM_SelectFlags_Lines

GM_SelectFlags_Points = _globalmapper.GM_SelectFlags_Points

GM_SelectFlags_Meshes = _globalmapper.GM_SelectFlags_Meshes

GM_SelectFlags_Lidar = _globalmapper.GM_SelectFlags_Lidar

GM_SelectFlags_All = _globalmapper.GM_SelectFlags_All

GM_SelectFlags_AllEx = _globalmapper.GM_SelectFlags_AllEx

GM_PathProfile_LOSValid = _globalmapper.GM_PathProfile_LOSValid

GM_PathProfile_LOSIgnoreEndpoints = _globalmapper.GM_PathProfile_LOSIgnoreEndpoints

GM_PathProfile_LOSFromHeightAbsolute = _globalmapper.GM_PathProfile_LOSFromHeightAbsolute

GM_PathProfile_LOSToHeightAbsolute = _globalmapper.GM_PathProfile_LOSToHeightAbsolute

GM_PathProfile_IgnoreEarthCurvature = _globalmapper.GM_PathProfile_IgnoreEarthCurvature

GM_ColorFormat_32Bit_ABGR = _globalmapper.GM_ColorFormat_32Bit_ABGR

GM_ColorFormat_32Bit_ARGB = _globalmapper.GM_ColorFormat_32Bit_ARGB

GM_ColorFormat_16Bit_565 = _globalmapper.GM_ColorFormat_16Bit_565

GM_ColorFormat_24Bit_BGR = _globalmapper.GM_ColorFormat_24Bit_BGR

GM_ColorFormat_24Bit_RGB = _globalmapper.GM_ColorFormat_24Bit_RGB

GM_ColorFormat_NumFormats = _globalmapper.GM_ColorFormat_NumFormats

GM_SelectProj_NoInterplanetaryDatums = _globalmapper.GM_SelectProj_NoInterplanetaryDatums

[docs]
class GM_RotatedRect_t(object):
    r"""Proxy of C++ GM_RotatedRect_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _globalmapper.GM_RotatedRect_t_swiginit(self, _globalmapper.new_GM_RotatedRect_t(*args))

    def __repr__( self ) :
        return str( (self.mTopLeft, self.mTopRight, self.mBottomRight, self.mBottomLeft) )

    mTopLeft = property(_globalmapper.GM_RotatedRect_t_mTopLeft_get, _globalmapper.GM_RotatedRect_t_mTopLeft_set, doc=r"""mTopLeft : GM_Point_t""")
    mTopRight = property(_globalmapper.GM_RotatedRect_t_mTopRight_get, _globalmapper.GM_RotatedRect_t_mTopRight_set, doc=r"""mTopRight : GM_Point_t""")
    mBottomRight = property(_globalmapper.GM_RotatedRect_t_mBottomRight_get, _globalmapper.GM_RotatedRect_t_mBottomRight_set, doc=r"""mBottomRight : GM_Point_t""")
    mBottomLeft = property(_globalmapper.GM_RotatedRect_t_mBottomLeft_get, _globalmapper.GM_RotatedRect_t_mBottomLeft_set, doc=r"""mBottomLeft : GM_Point_t""")
    __swig_destroy__ = _globalmapper.delete_GM_RotatedRect_t


# Register GM_RotatedRect_t in _globalmapper:
_globalmapper.GM_RotatedRect_t_swigregister(GM_RotatedRect_t)

[docs]
class GM_GroundControlPoint_t(object):
    r"""Proxy of C++ GM_GroundControlPoint_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, a: "double", b: "double", c: "double", d: "double"):
        _globalmapper.GM_GroundControlPoint_t_swiginit(self, _globalmapper.new_GM_GroundControlPoint_t(a, b, c, d))

    def __repr__( self ) :
        return str( gmobject_to_map( self ) )

    mPixelX = property(_globalmapper.GM_GroundControlPoint_t_mPixelX_get, _globalmapper.GM_GroundControlPoint_t_mPixelX_set, doc=r"""mPixelX : double""")
    mPixelY = property(_globalmapper.GM_GroundControlPoint_t_mPixelY_get, _globalmapper.GM_GroundControlPoint_t_mPixelY_set, doc=r"""mPixelY : double""")
    mGroundX = property(_globalmapper.GM_GroundControlPoint_t_mGroundX_get, _globalmapper.GM_GroundControlPoint_t_mGroundX_set, doc=r"""mGroundX : double""")
    mGroundY = property(_globalmapper.GM_GroundControlPoint_t_mGroundY_get, _globalmapper.GM_GroundControlPoint_t_mGroundY_set, doc=r"""mGroundY : double""")
    __swig_destroy__ = _globalmapper.delete_GM_GroundControlPoint_t


# Register GM_GroundControlPoint_t in _globalmapper:
_globalmapper.GM_GroundControlPoint_t_swigregister(GM_GroundControlPoint_t)

[docs]
class GM_AttrValue_t(object):
    r"""Proxy of C++ GM_AttrValue_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, k: "char const *"=None, v: "char const *"=None):
        _globalmapper.GM_AttrValue_t_swiginit(self, _globalmapper.new_GM_AttrValue_t(k, v))

    def __repr__( self ) :
        return str( gmobject_to_map( self ) )

    mName = property(_globalmapper.GM_AttrValue_t_mName_get, _globalmapper.GM_AttrValue_t_mName_set, doc=r"""mName : p.char""")
    mVal = property(_globalmapper.GM_AttrValue_t_mVal_get, _globalmapper.GM_AttrValue_t_mVal_set, doc=r"""mVal : p.char""")
    __swig_destroy__ = _globalmapper.delete_GM_AttrValue_t


# Register GM_AttrValue_t in _globalmapper:
_globalmapper.GM_AttrValue_t_swigregister(GM_AttrValue_t)

[docs]
class GM_PaletteEntry_t(object):
    r"""Proxy of C++ GM_PaletteEntry_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, a: "unsigned long"=0, b: "char const *"=None):
        _globalmapper.GM_PaletteEntry_t_swiginit(self, _globalmapper.new_GM_PaletteEntry_t(a, b))

    def __repr__( self ) :
        return str( gmobject_to_map( self ) )

    mColor = property(_globalmapper.GM_PaletteEntry_t_mColor_get, _globalmapper.GM_PaletteEntry_t_mColor_set, doc=r"""mColor : COLORREF""")
    mName = property(_globalmapper.GM_PaletteEntry_t_mName_get, _globalmapper.GM_PaletteEntry_t_mName_set, doc=r"""mName : p.char""")
    __swig_destroy__ = _globalmapper.delete_GM_PaletteEntry_t


# Register GM_PaletteEntry_t in _globalmapper:
_globalmapper.GM_PaletteEntry_t_swigregister(GM_PaletteEntry_t)

GM_LayerFlags_MeshWireframeOnly = _globalmapper.GM_LayerFlags_MeshWireframeOnly

GM_LayerFlags_MeshNoWireframe = _globalmapper.GM_LayerFlags_MeshNoWireframe

GM_LayerFlags_MeshDontInterpolateTextures = _globalmapper.GM_LayerFlags_MeshDontInterpolateTextures

GM_LayerFlags_Animate = _globalmapper.GM_LayerFlags_Animate

GM_LayerFlags_DisableSelection = _globalmapper.GM_LayerFlags_DisableSelection

GM_LayerFlags_DisableEdit = _globalmapper.GM_LayerFlags_DisableEdit

GM_LayerFlags_Default = _globalmapper.GM_LayerFlags_Default

[docs]
class GM_LayerInfo_t(object):
    r"""Proxy of C++ GM_LayerInfo_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __repr__( self ) :
        attr_map = gmobject_to_map( self )
    # GM_GroundControlPoint_t * mControlPoints
        attr_map['mControlPoints'] = carray_to_list( GM_GroundControlPoint_array_frompointer( self.mControlPoints ), self.mNumGCPs )

    # GM_AttrValue_t *mMetadataList; mMetadataListSize;
        attr_map['mMetadataList'] = carray_to_list( GM_AttrValue_array_frompointer( self.mMetadataList ), self.mMetadataListSize )

    # GM_PaletteEntry_t *mPalette, mPaletteSize
        attr_map['mPalette'] = carray_to_list( GM_PaletteEntry_array_frompointer( self.mPalette ), self.mPaletteSize )
        return str( attr_map )

    mDescription = property(_globalmapper.GM_LayerInfo_t_mDescription_get, _globalmapper.GM_LayerInfo_t_mDescription_set, doc=r"""mDescription : p.char""")
    mNativeRect = property(_globalmapper.GM_LayerInfo_t_mNativeRect_get, _globalmapper.GM_LayerInfo_t_mNativeRect_set, doc=r"""mNativeRect : GM_Rectangle_t""")
    mGlobalRect = property(_globalmapper.GM_LayerInfo_t_mGlobalRect_get, _globalmapper.GM_LayerInfo_t_mGlobalRect_set, doc=r"""mGlobalRect : GM_Rectangle_t""")
    mPixelWidth = property(_globalmapper.GM_LayerInfo_t_mPixelWidth_get, _globalmapper.GM_LayerInfo_t_mPixelWidth_set, doc=r"""mPixelWidth : uint32""")
    mPixelHeight = property(_globalmapper.GM_LayerInfo_t_mPixelHeight_get, _globalmapper.GM_LayerInfo_t_mPixelHeight_set, doc=r"""mPixelHeight : uint32""")
    mNativeProj = property(_globalmapper.GM_LayerInfo_t_mNativeProj_get, _globalmapper.GM_LayerInfo_t_mNativeProj_set, doc=r"""mNativeProj : GM_Projection_t""")
    mControlPoints = property(_globalmapper.GM_LayerInfo_t_mControlPoints_get, _globalmapper.GM_LayerInfo_t_mControlPoints_set, doc=r"""mControlPoints : p.GM_GroundControlPoint_t""")
    mNumGCPs = property(_globalmapper.GM_LayerInfo_t_mNumGCPs_get, _globalmapper.GM_LayerInfo_t_mNumGCPs_set, doc=r"""mNumGCPs : uint32""")
    mMinElevation = property(_globalmapper.GM_LayerInfo_t_mMinElevation_get, _globalmapper.GM_LayerInfo_t_mMinElevation_set, doc=r"""mMinElevation : float""")
    mMaxElevation = property(_globalmapper.GM_LayerInfo_t_mMaxElevation_get, _globalmapper.GM_LayerInfo_t_mMaxElevation_set, doc=r"""mMaxElevation : float""")
    mNumAreas = property(_globalmapper.GM_LayerInfo_t_mNumAreas_get, _globalmapper.GM_LayerInfo_t_mNumAreas_set, doc=r"""mNumAreas : uint32""")
    mNumLines = property(_globalmapper.GM_LayerInfo_t_mNumLines_get, _globalmapper.GM_LayerInfo_t_mNumLines_set, doc=r"""mNumLines : uint32""")
    mNumPoints = property(_globalmapper.GM_LayerInfo_t_mNumPoints_get, _globalmapper.GM_LayerInfo_t_mNumPoints_set, doc=r"""mNumPoints : uint32""")
    mPixelSizeX = property(_globalmapper.GM_LayerInfo_t_mPixelSizeX_get, _globalmapper.GM_LayerInfo_t_mPixelSizeX_set, doc=r"""mPixelSizeX : double""")
    mPixelSizeY = property(_globalmapper.GM_LayerInfo_t_mPixelSizeY_get, _globalmapper.GM_LayerInfo_t_mPixelSizeY_set, doc=r"""mPixelSizeY : double""")
    mHasRasterData = property(_globalmapper.GM_LayerInfo_t_mHasRasterData_get, _globalmapper.GM_LayerInfo_t_mHasRasterData_set, doc=r"""mHasRasterData : boolean""")
    mEnabled = property(_globalmapper.GM_LayerInfo_t_mEnabled_get, _globalmapper.GM_LayerInfo_t_mEnabled_set, doc=r"""mEnabled : boolean""")
    mHasVectorData = property(_globalmapper.GM_LayerInfo_t_mHasVectorData_get, _globalmapper.GM_LayerInfo_t_mHasVectorData_set, doc=r"""mHasVectorData : boolean""")
    mUsedDefaultPos = property(_globalmapper.GM_LayerInfo_t_mUsedDefaultPos_get, _globalmapper.GM_LayerInfo_t_mUsedDefaultPos_set, doc=r"""mUsedDefaultPos : boolean""")
    mFilename = property(_globalmapper.GM_LayerInfo_t_mFilename_get, _globalmapper.GM_LayerInfo_t_mFilename_set, doc=r"""mFilename : p.char""")
    mArchiveFilename = property(_globalmapper.GM_LayerInfo_t_mArchiveFilename_get, _globalmapper.GM_LayerInfo_t_mArchiveFilename_set, doc=r"""mArchiveFilename : p.char""")
    mTypeName = property(_globalmapper.GM_LayerInfo_t_mTypeName_get, _globalmapper.GM_LayerInfo_t_mTypeName_set, doc=r"""mTypeName : p.char""")
    mGlobalPixelWidth = property(_globalmapper.GM_LayerInfo_t_mGlobalPixelWidth_get, _globalmapper.GM_LayerInfo_t_mGlobalPixelWidth_set, doc=r"""mGlobalPixelWidth : uint32""")
    mGlobalPixelHeight = property(_globalmapper.GM_LayerInfo_t_mGlobalPixelHeight_get, _globalmapper.GM_LayerInfo_t_mGlobalPixelHeight_set, doc=r"""mGlobalPixelHeight : uint32""")
    mMetadataList = property(_globalmapper.GM_LayerInfo_t_mMetadataList_get, _globalmapper.GM_LayerInfo_t_mMetadataList_set, doc=r"""mMetadataList : p.GM_AttrValue_t""")
    mMetadataListSize = property(_globalmapper.GM_LayerInfo_t_mMetadataListSize_get, _globalmapper.GM_LayerInfo_t_mMetadataListSize_set, doc=r"""mMetadataListSize : uint32""")
    mNumBands = property(_globalmapper.GM_LayerInfo_t_mNumBands_get, _globalmapper.GM_LayerInfo_t_mNumBands_set, doc=r"""mNumBands : uint32""")
    mExtraLoadFlags = property(_globalmapper.GM_LayerInfo_t_mExtraLoadFlags_get, _globalmapper.GM_LayerInfo_t_mExtraLoadFlags_set, doc=r"""mExtraLoadFlags : p.char""")
    mPalette = property(_globalmapper.GM_LayerInfo_t_mPalette_get, _globalmapper.GM_LayerInfo_t_mPalette_set, doc=r"""mPalette : p.GM_PaletteEntry_t""")
    mPaletteSize = property(_globalmapper.GM_LayerInfo_t_mPaletteSize_get, _globalmapper.GM_LayerInfo_t_mPaletteSize_set, doc=r"""mPaletteSize : uint32""")
    mUserData = property(_globalmapper.GM_LayerInfo_t_mUserData_get, _globalmapper.GM_LayerInfo_t_mUserData_set, doc=r"""mUserData : p.void""")
    mElevUnits = property(_globalmapper.GM_LayerInfo_t_mElevUnits_get, _globalmapper.GM_LayerInfo_t_mElevUnits_set, doc=r"""mElevUnits : GM_ElevUnits_t8""")
    mBandValType = property(_globalmapper.GM_LayerInfo_t_mBandValType_get, _globalmapper.GM_LayerInfo_t_mBandValType_set, doc=r"""mBandValType : GM_BandValType_t8""")
    mBandBitDepth = property(_globalmapper.GM_LayerInfo_t_mBandBitDepth_get, _globalmapper.GM_LayerInfo_t_mBandBitDepth_set, doc=r"""mBandBitDepth : uint16""")
    mRasterTypeFlags = property(_globalmapper.GM_LayerInfo_t_mRasterTypeFlags_get, _globalmapper.GM_LayerInfo_t_mRasterTypeFlags_set, doc=r"""mRasterTypeFlags : GM_RasterTypeFlags_t32""")
    mUserText = property(_globalmapper.GM_LayerInfo_t_mUserText_get, _globalmapper.GM_LayerInfo_t_mUserText_set, doc=r"""mUserText : p.q(const).char""")
    mNumLidarPoints = property(_globalmapper.GM_LayerInfo_t_mNumLidarPoints_get, _globalmapper.GM_LayerInfo_t_mNumLidarPoints_set, doc=r"""mNumLidarPoints : uint64""")
    mParentLayer = property(_globalmapper.GM_LayerInfo_t_mParentLayer_get, _globalmapper.GM_LayerInfo_t_mParentLayer_set, doc=r"""mParentLayer : GM_LayerHandle_t32""")
    mDfltViewGlobal = property(_globalmapper.GM_LayerInfo_t_mDfltViewGlobal_get, _globalmapper.GM_LayerInfo_t_mDfltViewGlobal_set, doc=r"""mDfltViewGlobal : GM_Rectangle_t""")
    mCodePage = property(_globalmapper.GM_LayerInfo_t_mCodePage_get, _globalmapper.GM_LayerInfo_t_mCodePage_set, doc=r"""mCodePage : sint32""")
    mGroupName = property(_globalmapper.GM_LayerInfo_t_mGroupName_get, _globalmapper.GM_LayerInfo_t_mGroupName_set, doc=r"""mGroupName : p.q(const).char""")
    mUsedDefaultProj = property(_globalmapper.GM_LayerInfo_t_mUsedDefaultProj_get, _globalmapper.GM_LayerInfo_t_mUsedDefaultProj_set, doc=r"""mUsedDefaultProj : boolean""")
    mLayerFlags = property(_globalmapper.GM_LayerInfo_t_mLayerFlags_get, _globalmapper.GM_LayerInfo_t_mLayerFlags_set, doc=r"""mLayerFlags : GM_LayerFlags_t32""")
    mNumMeshes = property(_globalmapper.GM_LayerInfo_t_mNumMeshes_get, _globalmapper.GM_LayerInfo_t_mNumMeshes_set, doc=r"""mNumMeshes : uint32""")

    def __init__(self):
        r"""__init__(GM_LayerInfo_t self) -> GM_LayerInfo_t"""
        _globalmapper.GM_LayerInfo_t_swiginit(self, _globalmapper.new_GM_LayerInfo_t())
    __swig_destroy__ = _globalmapper.delete_GM_LayerInfo_t


# Register GM_LayerInfo_t in _globalmapper:
_globalmapper.GM_LayerInfo_t_swigregister(GM_LayerInfo_t)

[docs]
class GM_Color_t(object):
    r"""Proxy of C++ GM_Color_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _globalmapper.GM_Color_t_swiginit(self, _globalmapper.new_GM_Color_t(*args))

    def __repr__( self ) :
        return str( (self.mRed, self.mGreen, self.mBlue) )

    mRed = property(_globalmapper.GM_Color_t_mRed_get, _globalmapper.GM_Color_t_mRed_set, doc=r"""mRed : uint8""")
    mGreen = property(_globalmapper.GM_Color_t_mGreen_get, _globalmapper.GM_Color_t_mGreen_set, doc=r"""mGreen : uint8""")
    mBlue = property(_globalmapper.GM_Color_t_mBlue_get, _globalmapper.GM_Color_t_mBlue_set, doc=r"""mBlue : uint8""")
    __swig_destroy__ = _globalmapper.delete_GM_Color_t


# Register GM_Color_t in _globalmapper:
_globalmapper.GM_Color_t_swigregister(GM_Color_t)

GM_Font_BgAuto = _globalmapper.GM_Font_BgAuto

GM_Font_BgOpaque = _globalmapper.GM_Font_BgOpaque

GM_Font_BgTransparent = _globalmapper.GM_Font_BgTransparent

[docs]
class GM_FontDef_t(object):
    r"""Proxy of C++ GM_FontDef_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __repr__( self ) :
        return str( gmobject_to_map( self ) )

    mFaceName = property(_globalmapper.GM_FontDef_t_mFaceName_get, _globalmapper.GM_FontDef_t_mFaceName_set, doc=r"""mFaceName : p.q(const).char""")
    mColor = property(_globalmapper.GM_FontDef_t_mColor_get, _globalmapper.GM_FontDef_t_mColor_set, doc=r"""mColor : COLORREF""")
    mWeight = property(_globalmapper.GM_FontDef_t_mWeight_get, _globalmapper.GM_FontDef_t_mWeight_set, doc=r"""mWeight : uint16""")
    mPointSize = property(_globalmapper.GM_FontDef_t_mPointSize_get, _globalmapper.GM_FontDef_t_mPointSize_set, doc=r"""mPointSize : uint8""")
    mItalicize = property(_globalmapper.GM_FontDef_t_mItalicize_get, _globalmapper.GM_FontDef_t_mItalicize_set, doc=r"""mItalicize : boolean""")
    mUnderline = property(_globalmapper.GM_FontDef_t_mUnderline_get, _globalmapper.GM_FontDef_t_mUnderline_set, doc=r"""mUnderline : boolean""")
    mStrikeout = property(_globalmapper.GM_FontDef_t_mStrikeout_get, _globalmapper.GM_FontDef_t_mStrikeout_set, doc=r"""mStrikeout : boolean""")
    mCharset = property(_globalmapper.GM_FontDef_t_mCharset_get, _globalmapper.GM_FontDef_t_mCharset_set, doc=r"""mCharset : uint8""")
    mBgMode = property(_globalmapper.GM_FontDef_t_mBgMode_get, _globalmapper.GM_FontDef_t_mBgMode_set, doc=r"""mBgMode : GM_FontBackground_t8""")
    mFixedHgt = property(_globalmapper.GM_FontDef_t_mFixedHgt_get, _globalmapper.GM_FontDef_t_mFixedHgt_set, doc=r"""mFixedHgt : float""")
    mPlacement = property(_globalmapper.GM_FontDef_t_mPlacement_get, _globalmapper.GM_FontDef_t_mPlacement_set, doc=r"""mPlacement : GM_LabelPlacement_t8""")
    mHalo = property(_globalmapper.GM_FontDef_t_mHalo_get, _globalmapper.GM_FontDef_t_mHalo_set, doc=r"""mHalo : boolean""")
    mReserved2 = property(_globalmapper.GM_FontDef_t_mReserved2_get, _globalmapper.GM_FontDef_t_mReserved2_set, doc=r"""mReserved2 : uint8""")
    mReserved3 = property(_globalmapper.GM_FontDef_t_mReserved3_get, _globalmapper.GM_FontDef_t_mReserved3_set, doc=r"""mReserved3 : uint8""")
    mAngle = property(_globalmapper.GM_FontDef_t_mAngle_get, _globalmapper.GM_FontDef_t_mAngle_set, doc=r"""mAngle : float""")

    def __init__(self):
        r"""__init__(GM_FontDef_t self) -> GM_FontDef_t"""
        _globalmapper.GM_FontDef_t_swiginit(self, _globalmapper.new_GM_FontDef_t())
    __swig_destroy__ = _globalmapper.delete_GM_FontDef_t


# Register GM_FontDef_t in _globalmapper:
_globalmapper.GM_FontDef_t_swigregister(GM_FontDef_t)

[docs]
class GM_AreaStyle_t(object):
    r"""Proxy of C++ GM_AreaStyle_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __repr__( self ) :
        return str( gmobject_to_map( self ) )

    mBorderPenStyle = property(_globalmapper.GM_AreaStyle_t_mBorderPenStyle_get, _globalmapper.GM_AreaStyle_t_mBorderPenStyle_set, doc=r"""mBorderPenStyle : GM_PenStyle_t16""")
    mBorderPenWidth = property(_globalmapper.GM_AreaStyle_t_mBorderPenWidth_get, _globalmapper.GM_AreaStyle_t_mBorderPenWidth_set, doc=r"""mBorderPenWidth : uint16""")
    mBorderPenColor = property(_globalmapper.GM_AreaStyle_t_mBorderPenColor_get, _globalmapper.GM_AreaStyle_t_mBorderPenColor_set, doc=r"""mBorderPenColor : COLORREF""")
    mBrushColor = property(_globalmapper.GM_AreaStyle_t_mBrushColor_get, _globalmapper.GM_AreaStyle_t_mBrushColor_set, doc=r"""mBrushColor : COLORREF""")
    mBrushStyle = property(_globalmapper.GM_AreaStyle_t_mBrushStyle_get, _globalmapper.GM_AreaStyle_t_mBrushStyle_set, doc=r"""mBrushStyle : GM_BrushStyle_t16""")
    mDrawLabel = property(_globalmapper.GM_AreaStyle_t_mDrawLabel_get, _globalmapper.GM_AreaStyle_t_mDrawLabel_set, doc=r"""mDrawLabel : boolean""")
    mDrawLabelAlways = property(_globalmapper.GM_AreaStyle_t_mDrawLabelAlways_get, _globalmapper.GM_AreaStyle_t_mDrawLabelAlways_set, doc=r"""mDrawLabelAlways : boolean""")
    mFont = property(_globalmapper.GM_AreaStyle_t_mFont_get, _globalmapper.GM_AreaStyle_t_mFont_set, doc=r"""mFont : GM_FontDef_t""")

    def __init__(self):
        r"""__init__(GM_AreaStyle_t self) -> GM_AreaStyle_t"""
        _globalmapper.GM_AreaStyle_t_swiginit(self, _globalmapper.new_GM_AreaStyle_t())
    __swig_destroy__ = _globalmapper.delete_GM_AreaStyle_t


# Register GM_AreaStyle_t in _globalmapper:
_globalmapper.GM_AreaStyle_t_swigregister(GM_AreaStyle_t)

[docs]
class GM_LineStyle_t(object):
    r"""Proxy of C++ GM_LineStyle_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __repr__( self ) :
        return str( gmobject_to_map( self ) )

    mPenStyle = property(_globalmapper.GM_LineStyle_t_mPenStyle_get, _globalmapper.GM_LineStyle_t_mPenStyle_set, doc=r"""mPenStyle : GM_PenStyle_t16""")
    mPenWidth = property(_globalmapper.GM_LineStyle_t_mPenWidth_get, _globalmapper.GM_LineStyle_t_mPenWidth_set, doc=r"""mPenWidth : uint16""")
    mPenColor = property(_globalmapper.GM_LineStyle_t_mPenColor_get, _globalmapper.GM_LineStyle_t_mPenColor_set, doc=r"""mPenColor : COLORREF""")
    mDrawLabel = property(_globalmapper.GM_LineStyle_t_mDrawLabel_get, _globalmapper.GM_LineStyle_t_mDrawLabel_set, doc=r"""mDrawLabel : boolean""")
    mDrawLabelAlways = property(_globalmapper.GM_LineStyle_t_mDrawLabelAlways_get, _globalmapper.GM_LineStyle_t_mDrawLabelAlways_set, doc=r"""mDrawLabelAlways : boolean""")
    mDrawLabelOnLine = property(_globalmapper.GM_LineStyle_t_mDrawLabelOnLine_get, _globalmapper.GM_LineStyle_t_mDrawLabelOnLine_set, doc=r"""mDrawLabelOnLine : boolean""")
    mExtraStyleData = property(_globalmapper.GM_LineStyle_t_mExtraStyleData_get, _globalmapper.GM_LineStyle_t_mExtraStyleData_set, doc=r"""mExtraStyleData : uint8""")
    mFont = property(_globalmapper.GM_LineStyle_t_mFont_get, _globalmapper.GM_LineStyle_t_mFont_set, doc=r"""mFont : GM_FontDef_t""")
    mLabelSegment = property(_globalmapper.GM_LineStyle_t_mLabelSegment_get, _globalmapper.GM_LineStyle_t_mLabelSegment_set, doc=r"""mLabelSegment : sint32""")
    mFixedWidthMeters = property(_globalmapper.GM_LineStyle_t_mFixedWidthMeters_get, _globalmapper.GM_LineStyle_t_mFixedWidthMeters_set, doc=r"""mFixedWidthMeters : float""")
    mBgPenWidth = property(_globalmapper.GM_LineStyle_t_mBgPenWidth_get, _globalmapper.GM_LineStyle_t_mBgPenWidth_set, doc=r"""mBgPenWidth : uint16""")
    mBgPenColor = property(_globalmapper.GM_LineStyle_t_mBgPenColor_get, _globalmapper.GM_LineStyle_t_mBgPenColor_set, doc=r"""mBgPenColor : COLORREF""")

    def __init__(self):
        r"""__init__(GM_LineStyle_t self) -> GM_LineStyle_t"""
        _globalmapper.GM_LineStyle_t_swiginit(self, _globalmapper.new_GM_LineStyle_t())
    __swig_destroy__ = _globalmapper.delete_GM_LineStyle_t


# Register GM_LineStyle_t in _globalmapper:
_globalmapper.GM_LineStyle_t_swigregister(GM_LineStyle_t)

GM_RotateSense_TopOfMap = _globalmapper.GM_RotateSense_TopOfMap

GM_RotateSense_TrueNorth = _globalmapper.GM_RotateSense_TrueNorth

GM_RotateSense_MagNorth = _globalmapper.GM_RotateSense_MagNorth

GM_RotateSense_Mask = _globalmapper.GM_RotateSense_Mask

GM_RotateAngle_Mask = _globalmapper.GM_RotateAngle_Mask

[docs]
class GM_PointStyle_t(object):
    r"""Proxy of C++ GM_PointStyle_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __repr__( self ) :
        return str( gmobject_to_map( self ) )

    mSymbolName = property(_globalmapper.GM_PointStyle_t_mSymbolName_get, _globalmapper.GM_PointStyle_t_mSymbolName_set, doc=r"""mSymbolName : p.q(const).char""")
    mFont = property(_globalmapper.GM_PointStyle_t_mFont_get, _globalmapper.GM_PointStyle_t_mFont_set, doc=r"""mFont : GM_FontDef_t""")
    mDrawLabel = property(_globalmapper.GM_PointStyle_t_mDrawLabel_get, _globalmapper.GM_PointStyle_t_mDrawLabel_set, doc=r"""mDrawLabel : boolean""")
    mDrawLabelAlways = property(_globalmapper.GM_PointStyle_t_mDrawLabelAlways_get, _globalmapper.GM_PointStyle_t_mDrawLabelAlways_set, doc=r"""mDrawLabelAlways : boolean""")
    mRotation = property(_globalmapper.GM_PointStyle_t_mRotation_get, _globalmapper.GM_PointStyle_t_mRotation_set, doc=r"""mRotation : uint16""")
    mScale = property(_globalmapper.GM_PointStyle_t_mScale_get, _globalmapper.GM_PointStyle_t_mScale_set, doc=r"""mScale : float""")

    def __init__(self):
        r"""__init__(GM_PointStyle_t self) -> GM_PointStyle_t"""
        _globalmapper.GM_PointStyle_t_swiginit(self, _globalmapper.new_GM_PointStyle_t())
    __swig_destroy__ = _globalmapper.delete_GM_PointStyle_t


# Register GM_PointStyle_t in _globalmapper:
_globalmapper.GM_PointStyle_t_swigregister(GM_PointStyle_t)

[docs]
class GM_VectorFeature_t(object):
    r"""Proxy of C++ GM_VectorFeature_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __repr__( self ) :
        return str( gmobject_to_map( self ) )

    mName = property(_globalmapper.GM_VectorFeature_t_mName_get, _globalmapper.GM_VectorFeature_t_mName_set, doc=r"""mName : p.char""")
    mDesc = property(_globalmapper.GM_VectorFeature_t_mDesc_get, _globalmapper.GM_VectorFeature_t_mDesc_set, doc=r"""mDesc : p.char""")
    mClass = property(_globalmapper.GM_VectorFeature_t_mClass_get, _globalmapper.GM_VectorFeature_t_mClass_set, doc=r"""mClass : FeatureClass_t16""")
    mAttrList = property(_globalmapper.GM_VectorFeature_t_mAttrList_get, _globalmapper.GM_VectorFeature_t_mAttrList_set, doc=r"""mAttrList : p.GM_AttrValue_t""")
    mNumAttrs = property(_globalmapper.GM_VectorFeature_t_mNumAttrs_get, _globalmapper.GM_VectorFeature_t_mNumAttrs_set, doc=r"""mNumAttrs : uint16""")

    def __init__(self):
        r"""__init__(GM_VectorFeature_t self) -> GM_VectorFeature_t"""
        _globalmapper.GM_VectorFeature_t_swiginit(self, _globalmapper.new_GM_VectorFeature_t())
    __swig_destroy__ = _globalmapper.delete_GM_VectorFeature_t


# Register GM_VectorFeature_t in _globalmapper:
_globalmapper.GM_VectorFeature_t_swigregister(GM_VectorFeature_t)

[docs]
class GM_HoleInArea_t(object):
    r"""Proxy of C++ GM_HoleInArea_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __repr__( self ) :
        return str( gmobject_to_map( self ) )

    mPoints = property(_globalmapper.GM_HoleInArea_t_mPoints_get, _globalmapper.GM_HoleInArea_t_mPoints_set, doc=r"""mPoints : p.GM_Point_t""")
    mNumPoints = property(_globalmapper.GM_HoleInArea_t_mNumPoints_get, _globalmapper.GM_HoleInArea_t_mNumPoints_set, doc=r"""mNumPoints : uint32""")
    mVertexElevList = property(_globalmapper.GM_HoleInArea_t_mVertexElevList_get, _globalmapper.GM_HoleInArea_t_mVertexElevList_set, doc=r"""mVertexElevList : p.float""")

    def __init__(self):
        r"""__init__(GM_HoleInArea_t self) -> GM_HoleInArea_t"""
        _globalmapper.GM_HoleInArea_t_swiginit(self, _globalmapper.new_GM_HoleInArea_t())
    __swig_destroy__ = _globalmapper.delete_GM_HoleInArea_t


# Register GM_HoleInArea_t in _globalmapper:
_globalmapper.GM_HoleInArea_t_swigregister(GM_HoleInArea_t)

[docs]
class GM_AreaFeature_t(object):
    r"""Proxy of C++ GM_AreaFeature_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __repr__( self ) :
        return str( gmobject_to_map( self ) )

    mFeatureInfo = property(_globalmapper.GM_AreaFeature_t_mFeatureInfo_get, _globalmapper.GM_AreaFeature_t_mFeatureInfo_set, doc=r"""mFeatureInfo : GM_VectorFeature_t""")
    mPointList = property(_globalmapper.GM_AreaFeature_t_mPointList_get, _globalmapper.GM_AreaFeature_t_mPointList_set, doc=r"""mPointList : p.GM_Point_t""")
    mNumPoints = property(_globalmapper.GM_AreaFeature_t_mNumPoints_get, _globalmapper.GM_AreaFeature_t_mNumPoints_set, doc=r"""mNumPoints : uint32""")
    mHoleList = property(_globalmapper.GM_AreaFeature_t_mHoleList_get, _globalmapper.GM_AreaFeature_t_mHoleList_set, doc=r"""mHoleList : p.GM_HoleInArea_t""")
    mNumHoles = property(_globalmapper.GM_AreaFeature_t_mNumHoles_get, _globalmapper.GM_AreaFeature_t_mNumHoles_set, doc=r"""mNumHoles : uint32""")
    mAreaStyle = property(_globalmapper.GM_AreaFeature_t_mAreaStyle_get, _globalmapper.GM_AreaFeature_t_mAreaStyle_set, doc=r"""mAreaStyle : GM_AreaStyle_t""")
    mVertexElevList = property(_globalmapper.GM_AreaFeature_t_mVertexElevList_get, _globalmapper.GM_AreaFeature_t_mVertexElevList_set, doc=r"""mVertexElevList : p.float""")

    def __init__(self):
        r"""__init__(GM_AreaFeature_t self) -> GM_AreaFeature_t"""
        _globalmapper.GM_AreaFeature_t_swiginit(self, _globalmapper.new_GM_AreaFeature_t())
    __swig_destroy__ = _globalmapper.delete_GM_AreaFeature_t


# Register GM_AreaFeature_t in _globalmapper:
_globalmapper.GM_AreaFeature_t_swigregister(GM_AreaFeature_t)

[docs]
class GM_LineFeature_t(object):
    r"""Proxy of C++ GM_LineFeature_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __repr__( self ) :
        return str( gmobject_to_map( self ) )

    mFeatureInfo = property(_globalmapper.GM_LineFeature_t_mFeatureInfo_get, _globalmapper.GM_LineFeature_t_mFeatureInfo_set, doc=r"""mFeatureInfo : GM_VectorFeature_t""")
    mPointList = property(_globalmapper.GM_LineFeature_t_mPointList_get, _globalmapper.GM_LineFeature_t_mPointList_set, doc=r"""mPointList : p.GM_Point_t""")
    mNumPoints = property(_globalmapper.GM_LineFeature_t_mNumPoints_get, _globalmapper.GM_LineFeature_t_mNumPoints_set, doc=r"""mNumPoints : uint32""")
    mLineStyle = property(_globalmapper.GM_LineFeature_t_mLineStyle_get, _globalmapper.GM_LineFeature_t_mLineStyle_set, doc=r"""mLineStyle : GM_LineStyle_t""")
    mVertexElevList = property(_globalmapper.GM_LineFeature_t_mVertexElevList_get, _globalmapper.GM_LineFeature_t_mVertexElevList_set, doc=r"""mVertexElevList : p.float""")

    def __init__(self):
        r"""__init__(GM_LineFeature_t self) -> GM_LineFeature_t"""
        _globalmapper.GM_LineFeature_t_swiginit(self, _globalmapper.new_GM_LineFeature_t())
    __swig_destroy__ = _globalmapper.delete_GM_LineFeature_t


# Register GM_LineFeature_t in _globalmapper:
_globalmapper.GM_LineFeature_t_swigregister(GM_LineFeature_t)

[docs]
class GM_PointFeature_t(object):
    r"""Proxy of C++ GM_PointFeature_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __repr__( self ) :
        return str( gmobject_to_map( self ) )

    mFeatureInfo = property(_globalmapper.GM_PointFeature_t_mFeatureInfo_get, _globalmapper.GM_PointFeature_t_mFeatureInfo_set, doc=r"""mFeatureInfo : GM_VectorFeature_t""")
    mPos = property(_globalmapper.GM_PointFeature_t_mPos_get, _globalmapper.GM_PointFeature_t_mPos_set, doc=r"""mPos : GM_Point_t""")
    mPointStyle = property(_globalmapper.GM_PointFeature_t_mPointStyle_get, _globalmapper.GM_PointFeature_t_mPointStyle_set, doc=r"""mPointStyle : GM_PointStyle_t""")

    def __init__(self):
        r"""__init__(GM_PointFeature_t self) -> GM_PointFeature_t"""
        _globalmapper.GM_PointFeature_t_swiginit(self, _globalmapper.new_GM_PointFeature_t())
    __swig_destroy__ = _globalmapper.delete_GM_PointFeature_t


# Register GM_PointFeature_t in _globalmapper:
_globalmapper.GM_PointFeature_t_swigregister(GM_PointFeature_t)

[docs]
class GM_FeatureClassInfo_t(object):
    r"""Proxy of C++ GM_FeatureClassInfo_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __repr__( self ) :
        return str( gmobject_to_map( self ) )

    mIsEnabled = property(_globalmapper.GM_FeatureClassInfo_t_mIsEnabled_get, _globalmapper.GM_FeatureClassInfo_t_mIsEnabled_set, doc=r"""mIsEnabled : boolean""")
    mPriority = property(_globalmapper.GM_FeatureClassInfo_t_mPriority_get, _globalmapper.GM_FeatureClassInfo_t_mPriority_set, doc=r"""mPriority : uint8""")
    mZLevel = property(_globalmapper.GM_FeatureClassInfo_t_mZLevel_get, _globalmapper.GM_FeatureClassInfo_t_mZLevel_set, doc=r"""mZLevel : ZLevel_t16""")
    mDesc = property(_globalmapper.GM_FeatureClassInfo_t_mDesc_get, _globalmapper.GM_FeatureClassInfo_t_mDesc_set, doc=r"""mDesc : p.q(const).char""")

    def __init__(self):
        r"""__init__(GM_FeatureClassInfo_t self) -> GM_FeatureClassInfo_t"""
        _globalmapper.GM_FeatureClassInfo_t_swiginit(self, _globalmapper.new_GM_FeatureClassInfo_t())
    __swig_destroy__ = _globalmapper.delete_GM_FeatureClassInfo_t


# Register GM_FeatureClassInfo_t in _globalmapper:
_globalmapper.GM_FeatureClassInfo_t_swigregister(GM_FeatureClassInfo_t)

[docs]
class GM_FoundFeature_t(object):
    r"""Proxy of C++ GM_FoundFeature_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __repr__( self ) :
        return str( gmobject_to_map( self ) )

    mLayer = property(_globalmapper.GM_FoundFeature_t_mLayer_get, _globalmapper.GM_FoundFeature_t_mLayer_set, doc=r"""mLayer : GM_LayerHandle_t32""")
    mFeatureClassType = property(_globalmapper.GM_FoundFeature_t_mFeatureClassType_get, _globalmapper.GM_FoundFeature_t_mFeatureClassType_set, doc=r"""mFeatureClassType : GM_FeatureClassType_t8""")
    mFeatureIndex = property(_globalmapper.GM_FoundFeature_t_mFeatureIndex_get, _globalmapper.GM_FoundFeature_t_mFeatureIndex_set, doc=r"""mFeatureIndex : uint32""")
    mDistance = property(_globalmapper.GM_FoundFeature_t_mDistance_get, _globalmapper.GM_FoundFeature_t_mDistance_set, doc=r"""mDistance : uint32""")

    def __init__(self):
        r"""__init__(GM_FoundFeature_t self) -> GM_FoundFeature_t"""
        _globalmapper.GM_FoundFeature_t_swiginit(self, _globalmapper.new_GM_FoundFeature_t())
    __swig_destroy__ = _globalmapper.delete_GM_FoundFeature_t


# Register GM_FoundFeature_t in _globalmapper:
_globalmapper.GM_FoundFeature_t_swigregister(GM_FoundFeature_t)

[docs]
class GM_FoundFeatureResults_t(object):
    r"""Proxy of C++ GM_FoundFeatureResults_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __repr__( self ) :
        return str( gmobject_to_map( self ) )

    mFeatureList = property(_globalmapper.GM_FoundFeatureResults_t_mFeatureList_get, _globalmapper.GM_FoundFeatureResults_t_mFeatureList_set, doc=r"""mFeatureList : p.GM_FoundFeature_t""")
    mFeatureCount = property(_globalmapper.GM_FoundFeatureResults_t_mFeatureCount_get, _globalmapper.GM_FoundFeatureResults_t_mFeatureCount_set, doc=r"""mFeatureCount : uint64""")

    def __init__(self):
        r"""__init__(GM_FoundFeatureResults_t self) -> GM_FoundFeatureResults_t"""
        _globalmapper.GM_FoundFeatureResults_t_swiginit(self, _globalmapper.new_GM_FoundFeatureResults_t())
    __swig_destroy__ = _globalmapper.delete_GM_FoundFeatureResults_t


# Register GM_FoundFeatureResults_t in _globalmapper:
_globalmapper.GM_FoundFeatureResults_t_swigregister(GM_FoundFeatureResults_t)

GM_ExportDXF_NoLabels = _globalmapper.GM_ExportDXF_NoLabels

GM_ExportDXF_LabelsAsPointsFeatureLayer = _globalmapper.GM_ExportDXF_LabelsAsPointsFeatureLayer

GM_ExportDXF_LabelsAsPoints = _globalmapper.GM_ExportDXF_LabelsAsPoints

GM_ExportDXF_LabelsAsAttrs = _globalmapper.GM_ExportDXF_LabelsAsAttrs

GM_ExportDXF_LabelsNumOpts = _globalmapper.GM_ExportDXF_LabelsNumOpts

GM_ExportDXF_UseLabelsForLayers = _globalmapper.GM_ExportDXF_UseLabelsForLayers

GM_ExportDXF_UseZeroWidthLines = _globalmapper.GM_ExportDXF_UseZeroWidthLines

GM_ExportDXF_TextSizeAbsolute = _globalmapper.GM_ExportDXF_TextSizeAbsolute

GM_ExportDXF_ExportElevLinesAs2D = _globalmapper.GM_ExportDXF_ExportElevLinesAs2D

GM_ExportDXF_AllowLongLabels = _globalmapper.GM_ExportDXF_AllowLongLabels

GM_ExportDXF_ExportECEF = _globalmapper.GM_ExportDXF_ExportECEF

GM_ExportDXF_PreserveAttributes = _globalmapper.GM_ExportDXF_PreserveAttributes

GM_ExportDXF_UseLegacyExporter = _globalmapper.GM_ExportDXF_UseLegacyExporter

GM_ExportDXF_ExportProjection = _globalmapper.GM_ExportDXF_ExportProjection

GM_ExportDWG_VerDefault = _globalmapper.GM_ExportDWG_VerDefault

GM_ExportDWG_VerAC1_2 = _globalmapper.GM_ExportDWG_VerAC1_2

GM_ExportDWG_VerAC1_40 = _globalmapper.GM_ExportDWG_VerAC1_40

GM_ExportDWG_VerAC1_50 = _globalmapper.GM_ExportDWG_VerAC1_50

GM_ExportDWG_VerAC2_20 = _globalmapper.GM_ExportDWG_VerAC2_20

GM_ExportDWG_VerAC2_10 = _globalmapper.GM_ExportDWG_VerAC2_10

GM_ExportDWG_VerAC2_21 = _globalmapper.GM_ExportDWG_VerAC2_21

GM_ExportDWG_VerAC2_22 = _globalmapper.GM_ExportDWG_VerAC2_22

GM_ExportDWG_Ver1001 = _globalmapper.GM_ExportDWG_Ver1001

GM_ExportDWG_Ver1002 = _globalmapper.GM_ExportDWG_Ver1002

GM_ExportDWG_VerAC025 = _globalmapper.GM_ExportDWG_VerAC025

GM_ExportDWG_Ver1003 = _globalmapper.GM_ExportDWG_Ver1003

GM_ExportDWG_VerAC026 = _globalmapper.GM_ExportDWG_VerAC026

GM_ExportDWG_Ver1004 = _globalmapper.GM_ExportDWG_Ver1004

GM_ExportDWG_VerAC09 = _globalmapper.GM_ExportDWG_VerAC09

GM_ExportDWG_Ver1005 = _globalmapper.GM_ExportDWG_Ver1005

GM_ExportDWG_Ver1006 = _globalmapper.GM_ExportDWG_Ver1006

GM_ExportDWG_VerAC10 = _globalmapper.GM_ExportDWG_VerAC10

GM_ExportDWG_Ver1007 = _globalmapper.GM_ExportDWG_Ver1007

GM_ExportDWG_Ver1008 = _globalmapper.GM_ExportDWG_Ver1008

GM_ExportDWG_Ver1009 = _globalmapper.GM_ExportDWG_Ver1009

GM_ExportDWG_VerAC12 = _globalmapper.GM_ExportDWG_VerAC12

GM_ExportDWG_Ver1010 = _globalmapper.GM_ExportDWG_Ver1010

GM_ExportDWG_Ver1011 = _globalmapper.GM_ExportDWG_Ver1011

GM_ExportDWG_Ver1012 = _globalmapper.GM_ExportDWG_Ver1012

GM_ExportDWG_VerAC13 = _globalmapper.GM_ExportDWG_VerAC13

GM_ExportDWG_Ver1013 = _globalmapper.GM_ExportDWG_Ver1013

GM_ExportDWG_VerAC14beta = _globalmapper.GM_ExportDWG_VerAC14beta

GM_ExportDWG_Ver1014 = _globalmapper.GM_ExportDWG_Ver1014

GM_ExportDWG_VerAC14 = _globalmapper.GM_ExportDWG_VerAC14

GM_ExportDWG_Ver1500 = _globalmapper.GM_ExportDWG_Ver1500

GM_ExportDWG_Ver1015 = _globalmapper.GM_ExportDWG_Ver1015

GM_ExportDWG_VerAC15 = _globalmapper.GM_ExportDWG_VerAC15

GM_ExportDWG_Ver1800a = _globalmapper.GM_ExportDWG_Ver1800a

GM_ExportDWG_Ver1800 = _globalmapper.GM_ExportDWG_Ver1800

GM_ExportDWG_VerAC18 = _globalmapper.GM_ExportDWG_VerAC18

GM_ExportDWG_Ver2100a = _globalmapper.GM_ExportDWG_Ver2100a

GM_ExportDWG_Ver1021 = _globalmapper.GM_ExportDWG_Ver1021

GM_ExportDWG_VerAC21 = _globalmapper.GM_ExportDWG_VerAC21

GM_ExportDWG_Ver2400a = _globalmapper.GM_ExportDWG_Ver2400a

GM_ExportDWG_Ver1024 = _globalmapper.GM_ExportDWG_Ver1024

GM_ExportDWG_VerAC24 = _globalmapper.GM_ExportDWG_VerAC24

GM_ExportDWG_Ver2700a = _globalmapper.GM_ExportDWG_Ver2700a

GM_ExportDWG_Ver1027 = _globalmapper.GM_ExportDWG_Ver1027

GM_ExportDWG_VerAC27 = _globalmapper.GM_ExportDWG_VerAC27

GM_ExportDWG_Ver1032 = _globalmapper.GM_ExportDWG_Ver1032

GM_ExportDWG_VerAC32 = _globalmapper.GM_ExportDWG_VerAC32

GM_ExportDWG_VerNewest = _globalmapper.GM_ExportDWG_VerNewest

GM_CADType_DWG = _globalmapper.GM_CADType_DWG

GM_CADType_DXF = _globalmapper.GM_CADType_DXF

GM_CADType_BinaryDXF = _globalmapper.GM_CADType_BinaryDXF

[docs]
class GM_ExportOptsDXF_DWG_t(object):
    r"""Proxy of C++ GM_ExportOptsDXF_DWG_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __repr__( self ) :
        return str( gmobject_to_map( self ) )

    mTenPointFontHeight = property(_globalmapper.GM_ExportOptsDXF_DWG_t_mTenPointFontHeight_get, _globalmapper.GM_ExportOptsDXF_DWG_t_mTenPointFontHeight_set, doc=r"""mTenPointFontHeight : float""")
    mLabelType = property(_globalmapper.GM_ExportOptsDXF_DWG_t_mLabelType_get, _globalmapper.GM_ExportOptsDXF_DWG_t_mLabelType_set, doc=r"""mLabelType : GM_ExportOptsDXFLabels_t8""")
    mDWGVersion = property(_globalmapper.GM_ExportOptsDXF_DWG_t_mDWGVersion_get, _globalmapper.GM_ExportOptsDXF_DWG_t_mDWGVersion_set, doc=r"""mDWGVersion : GM_ExportOptsDWGVersion_t8""")
    mFlags = property(_globalmapper.GM_ExportOptsDXF_DWG_t_mFlags_get, _globalmapper.GM_ExportOptsDXF_DWG_t_mFlags_set, doc=r"""mFlags : GM_ExportOptsDXFFlags_t32""")
    mCADType = property(_globalmapper.GM_ExportOptsDXF_DWG_t_mCADType_get, _globalmapper.GM_ExportOptsDXF_DWG_t_mCADType_set, doc=r"""mCADType : GM_ExportOptsCADType_t8""")
    mLayerAttr = property(_globalmapper.GM_ExportOptsDXF_DWG_t_mLayerAttr_get, _globalmapper.GM_ExportOptsDXF_DWG_t_mLayerAttr_set, doc=r"""mLayerAttr : p.q(const).char""")

    def __init__(self):
        r"""__init__(GM_ExportOptsDXF_DWG_t self) -> GM_ExportOptsDXF_DWG_t"""
        _globalmapper.GM_ExportOptsDXF_DWG_t_swiginit(self, _globalmapper.new_GM_ExportOptsDXF_DWG_t())
    __swig_destroy__ = _globalmapper.delete_GM_ExportOptsDXF_DWG_t


# Register GM_ExportOptsDXF_DWG_t in _globalmapper:
_globalmapper.GM_ExportOptsDXF_DWG_t_swigregister(GM_ExportOptsDXF_DWG_t)

[docs]
class GM_ExportOptsKML_t(object):
    r"""Proxy of C++ GM_ExportOptsKML_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __repr__( self ) :
        return str( gmobject_to_map( self ) )

    mAreaOpacity = property(_globalmapper.GM_ExportOptsKML_t_mAreaOpacity_get, _globalmapper.GM_ExportOptsKML_t_mAreaOpacity_set, doc=r"""mAreaOpacity : float""")
    mAreaDisplayAtElev = property(_globalmapper.GM_ExportOptsKML_t_mAreaDisplayAtElev_get, _globalmapper.GM_ExportOptsKML_t_mAreaDisplayAtElev_set, doc=r"""mAreaDisplayAtElev : boolean""")
    mAreaElevsRelative = property(_globalmapper.GM_ExportOptsKML_t_mAreaElevsRelative_get, _globalmapper.GM_ExportOptsKML_t_mAreaElevsRelative_set, doc=r"""mAreaElevsRelative : boolean""")
    mExtrudeAreas = property(_globalmapper.GM_ExportOptsKML_t_mExtrudeAreas_get, _globalmapper.GM_ExportOptsKML_t_mExtrudeAreas_set, doc=r"""mExtrudeAreas : boolean""")
    mLineDisplayAtElev = property(_globalmapper.GM_ExportOptsKML_t_mLineDisplayAtElev_get, _globalmapper.GM_ExportOptsKML_t_mLineDisplayAtElev_set, doc=r"""mLineDisplayAtElev : boolean""")
    mLineElevsRelative = property(_globalmapper.GM_ExportOptsKML_t_mLineElevsRelative_get, _globalmapper.GM_ExportOptsKML_t_mLineElevsRelative_set, doc=r"""mLineElevsRelative : boolean""")
    mHidePointsInitially = property(_globalmapper.GM_ExportOptsKML_t_mHidePointsInitially_get, _globalmapper.GM_ExportOptsKML_t_mHidePointsInitially_set, doc=r"""mHidePointsInitially : boolean""")

    def __init__(self):
        r"""__init__(GM_ExportOptsKML_t self) -> GM_ExportOptsKML_t"""
        _globalmapper.GM_ExportOptsKML_t_swiginit(self, _globalmapper.new_GM_ExportOptsKML_t())
    __swig_destroy__ = _globalmapper.delete_GM_ExportOptsKML_t


# Register GM_ExportOptsKML_t in _globalmapper:
_globalmapper.GM_ExportOptsKML_t_swigregister(GM_ExportOptsKML_t)

GM_PDF_FillPage = _globalmapper.GM_PDF_FillPage

GM_PDF_Landscape = _globalmapper.GM_PDF_Landscape

GM_PDF_UseFilenamesForLayers = _globalmapper.GM_PDF_UseFilenamesForLayers

GM_PDF_BorderStyleValid = _globalmapper.GM_PDF_BorderStyleValid

GM_PDF_HideProgress = _globalmapper.GM_PDF_HideProgress

GM_PDF_NoJPGCompression = _globalmapper.GM_PDF_NoJPGCompression

GM_PDF_DontIncludeMapLayout = _globalmapper.GM_PDF_DontIncludeMapLayout

[docs]
class GM_ExportOptsPDF_t(object):
    r"""Proxy of C++ GM_ExportOptsPDF_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __repr__( self ) :
        return str( gmobject_to_map( self ) )

    mFlags = property(_globalmapper.GM_ExportOptsPDF_t_mFlags_get, _globalmapper.GM_ExportOptsPDF_t_mFlags_set, doc=r"""mFlags : GM_PDFExportFlags_t32""")
    mPageSizeName = property(_globalmapper.GM_ExportOptsPDF_t_mPageSizeName_get, _globalmapper.GM_ExportOptsPDF_t_mPageSizeName_set, doc=r"""mPageSizeName : p.q(const).char""")
    mDPI = property(_globalmapper.GM_ExportOptsPDF_t_mDPI_get, _globalmapper.GM_ExportOptsPDF_t_mDPI_set, doc=r"""mDPI : uint32""")
    mMarginRect = property(_globalmapper.GM_ExportOptsPDF_t_mMarginRect_get, _globalmapper.GM_ExportOptsPDF_t_mMarginRect_set, doc=r"""mMarginRect : GM_Rectangle_t""")
    mHeaderStr = property(_globalmapper.GM_ExportOptsPDF_t_mHeaderStr_get, _globalmapper.GM_ExportOptsPDF_t_mHeaderStr_set, doc=r"""mHeaderStr : p.q(const).char""")
    mHeaderFont = property(_globalmapper.GM_ExportOptsPDF_t_mHeaderFont_get, _globalmapper.GM_ExportOptsPDF_t_mHeaderFont_set, doc=r"""mHeaderFont : p.q(const).GM_FontDef_t""")
    mFooterStr = property(_globalmapper.GM_ExportOptsPDF_t_mFooterStr_get, _globalmapper.GM_ExportOptsPDF_t_mFooterStr_set, doc=r"""mFooterStr : p.q(const).char""")
    mFooterFont = property(_globalmapper.GM_ExportOptsPDF_t_mFooterFont_get, _globalmapper.GM_ExportOptsPDF_t_mFooterFont_set, doc=r"""mFooterFont : p.q(const).GM_FontDef_t""")
    mSymbolScale = property(_globalmapper.GM_ExportOptsPDF_t_mSymbolScale_get, _globalmapper.GM_ExportOptsPDF_t_mSymbolScale_set, doc=r"""mSymbolScale : double""")
    mBorderStyle = property(_globalmapper.GM_ExportOptsPDF_t_mBorderStyle_get, _globalmapper.GM_ExportOptsPDF_t_mBorderStyle_set, doc=r"""mBorderStyle : GM_PenStyle_t16""")
    mBorderWidth = property(_globalmapper.GM_ExportOptsPDF_t_mBorderWidth_get, _globalmapper.GM_ExportOptsPDF_t_mBorderWidth_set, doc=r"""mBorderWidth : uint16""")
    mBorderColor = property(_globalmapper.GM_ExportOptsPDF_t_mBorderColor_get, _globalmapper.GM_ExportOptsPDF_t_mBorderColor_set, doc=r"""mBorderColor : COLORREF""")

    def __init__(self):
        r"""__init__(GM_ExportOptsPDF_t self) -> GM_ExportOptsPDF_t"""
        _globalmapper.GM_ExportOptsPDF_t_swiginit(self, _globalmapper.new_GM_ExportOptsPDF_t())
    __swig_destroy__ = _globalmapper.delete_GM_ExportOptsPDF_t


# Register GM_ExportOptsPDF_t in _globalmapper:
_globalmapper.GM_ExportOptsPDF_t_swigregister(GM_ExportOptsPDF_t)

[docs]
class GM_ExportOptsSHP_t(object):
    r"""Proxy of C++ GM_ExportOptsSHP_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __repr__( self ) :
        return str( gmobject_to_map( self ) )

    mAddLabelAttr = property(_globalmapper.GM_ExportOptsSHP_t_mAddLabelAttr_get, _globalmapper.GM_ExportOptsSHP_t_mAddLabelAttr_set, doc=r"""mAddLabelAttr : boolean""")
    mAddLayerAttr = property(_globalmapper.GM_ExportOptsSHP_t_mAddLayerAttr_get, _globalmapper.GM_ExportOptsSHP_t_mAddLayerAttr_set, doc=r"""mAddLayerAttr : boolean""")
    mAddStyleAttrs = property(_globalmapper.GM_ExportOptsSHP_t_mAddStyleAttrs_get, _globalmapper.GM_ExportOptsSHP_t_mAddStyleAttrs_set, doc=r"""mAddStyleAttrs : boolean""")

    def __init__(self):
        r"""__init__(GM_ExportOptsSHP_t self) -> GM_ExportOptsSHP_t"""
        _globalmapper.GM_ExportOptsSHP_t_swiginit(self, _globalmapper.new_GM_ExportOptsSHP_t())
    __swig_destroy__ = _globalmapper.delete_GM_ExportOptsSHP_t


# Register GM_ExportOptsSHP_t in _globalmapper:
_globalmapper.GM_ExportOptsSHP_t_swigregister(GM_ExportOptsSHP_t)

[docs]
class GM_ExportOptsSimpleText_t(object):
    r"""Proxy of C++ GM_ExportOptsSimpleText_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __repr__( self ) :
        return str( gmobject_to_map( self ) )

    mCoordSep = property(_globalmapper.GM_ExportOptsSimpleText_t_mCoordSep_get, _globalmapper.GM_ExportOptsSimpleText_t_mCoordSep_set, doc=r"""mCoordSep : p.q(const).char""")
    mFeatureSep = property(_globalmapper.GM_ExportOptsSimpleText_t_mFeatureSep_get, _globalmapper.GM_ExportOptsSimpleText_t_mFeatureSep_set, doc=r"""mFeatureSep : p.q(const).char""")
    mAddStyleAttrs = property(_globalmapper.GM_ExportOptsSimpleText_t_mAddStyleAttrs_get, _globalmapper.GM_ExportOptsSimpleText_t_mAddStyleAttrs_set, doc=r"""mAddStyleAttrs : boolean""")
    mYCoordFirst = property(_globalmapper.GM_ExportOptsSimpleText_t_mYCoordFirst_get, _globalmapper.GM_ExportOptsSimpleText_t_mYCoordFirst_set, doc=r"""mYCoordFirst : boolean""")
    mReserved1 = property(_globalmapper.GM_ExportOptsSimpleText_t_mReserved1_get, _globalmapper.GM_ExportOptsSimpleText_t_mReserved1_set, doc=r"""mReserved1 : uint8""")
    mReserved2 = property(_globalmapper.GM_ExportOptsSimpleText_t_mReserved2_get, _globalmapper.GM_ExportOptsSimpleText_t_mReserved2_set, doc=r"""mReserved2 : uint8""")

    def __init__(self):
        r"""__init__(GM_ExportOptsSimpleText_t self) -> GM_ExportOptsSimpleText_t"""
        _globalmapper.GM_ExportOptsSimpleText_t_swiginit(self, _globalmapper.new_GM_ExportOptsSimpleText_t())
    __swig_destroy__ = _globalmapper.delete_GM_ExportOptsSimpleText_t


# Register GM_ExportOptsSimpleText_t in _globalmapper:
_globalmapper.GM_ExportOptsSimpleText_t_swigregister(GM_ExportOptsSimpleText_t)

[docs]
class GM_ViewShedParams_t(object):
    r"""Proxy of C++ GM_ViewShedParams_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    mSize = property(_globalmapper.GM_ViewShedParams_t_mSize_get, _globalmapper.GM_ViewShedParams_t_mSize_set, doc=r"""mSize : uint32""")
    mAngleEnd = property(_globalmapper.GM_ViewShedParams_t_mAngleEnd_get, _globalmapper.GM_ViewShedParams_t_mAngleEnd_set, doc=r"""mAngleEnd : float""")
    mAngleStart = property(_globalmapper.GM_ViewShedParams_t_mAngleStart_get, _globalmapper.GM_ViewShedParams_t_mAngleStart_set, doc=r"""mAngleStart : float""")
    mAtmosphericCorr = property(_globalmapper.GM_ViewShedParams_t_mAtmosphericCorr_get, _globalmapper.GM_ViewShedParams_t_mAtmosphericCorr_set, doc=r"""mAtmosphericCorr : double""")
    mCenterPoint = property(_globalmapper.GM_ViewShedParams_t_mCenterPoint_get, _globalmapper.GM_ViewShedParams_t_mCenterPoint_set, doc=r"""mCenterPoint : GM_Point_t""")
    mColor = property(_globalmapper.GM_ViewShedParams_t_mColor_get, _globalmapper.GM_ViewShedParams_t_mColor_set, doc=r"""mColor : COLORREF""")
    mDesc = property(_globalmapper.GM_ViewShedParams_t_mDesc_get, _globalmapper.GM_ViewShedParams_t_mDesc_set, doc=r"""mDesc : p.q(const).char""")
    mRadius = property(_globalmapper.GM_ViewShedParams_t_mRadius_get, _globalmapper.GM_ViewShedParams_t_mRadius_set, doc=r"""mRadius : double""")
    mReceiverAngle = property(_globalmapper.GM_ViewShedParams_t_mReceiverAngle_get, _globalmapper.GM_ViewShedParams_t_mReceiverAngle_set, doc=r"""mReceiverAngle : p.double""")
    mReceiverHeight = property(_globalmapper.GM_ViewShedParams_t_mReceiverHeight_get, _globalmapper.GM_ViewShedParams_t_mReceiverHeight_set, doc=r"""mReceiverHeight : float""")
    mReceiverHeightAbs = property(_globalmapper.GM_ViewShedParams_t_mReceiverHeightAbs_get, _globalmapper.GM_ViewShedParams_t_mReceiverHeightAbs_set, doc=r"""mReceiverHeightAbs : boolean""")
    mShowHiddenPoints = property(_globalmapper.GM_ViewShedParams_t_mShowHiddenPoints_get, _globalmapper.GM_ViewShedParams_t_mShowHiddenPoints_set, doc=r"""mShowHiddenPoints : boolean""")
    mShowProgress = property(_globalmapper.GM_ViewShedParams_t_mShowProgress_get, _globalmapper.GM_ViewShedParams_t_mShowProgress_set, doc=r"""mShowProgress : boolean""")
    mGenCoveragePolys = property(_globalmapper.GM_ViewShedParams_t_mGenCoveragePolys_get, _globalmapper.GM_ViewShedParams_t_mGenCoveragePolys_set, doc=r"""mGenCoveragePolys : boolean""")
    mTransmitterHeight = property(_globalmapper.GM_ViewShedParams_t_mTransmitterHeight_get, _globalmapper.GM_ViewShedParams_t_mTransmitterHeight_set, doc=r"""mTransmitterHeight : float""")
    mTransmitterHeightAbs = property(_globalmapper.GM_ViewShedParams_t_mTransmitterHeightAbs_get, _globalmapper.GM_ViewShedParams_t_mTransmitterHeightAbs_set, doc=r"""mTransmitterHeightAbs : boolean""")
    mUseEarthCurvature = property(_globalmapper.GM_ViewShedParams_t_mUseEarthCurvature_get, _globalmapper.GM_ViewShedParams_t_mUseEarthCurvature_set, doc=r"""mUseEarthCurvature : boolean""")
    mVectorElevsAbs = property(_globalmapper.GM_ViewShedParams_t_mVectorElevsAbs_get, _globalmapper.GM_ViewShedParams_t_mVectorElevsAbs_set, doc=r"""mVectorElevsAbs : boolean""")
    mVectorLayerList = property(_globalmapper.GM_ViewShedParams_t_mVectorLayerList_get, _globalmapper.GM_ViewShedParams_t_mVectorLayerList_set, doc=r"""mVectorLayerList : p.GM_LayerHandle_t32""")
    mVectorLayerListCnt = property(_globalmapper.GM_ViewShedParams_t_mVectorLayerListCnt_get, _globalmapper.GM_ViewShedParams_t_mVectorLayerListCnt_set, doc=r"""mVectorLayerListCnt : uint32""")
    mXSpacing = property(_globalmapper.GM_ViewShedParams_t_mXSpacing_get, _globalmapper.GM_ViewShedParams_t_mXSpacing_set, doc=r"""mXSpacing : double""")
    mYSpacing = property(_globalmapper.GM_ViewShedParams_t_mYSpacing_get, _globalmapper.GM_ViewShedParams_t_mYSpacing_set, doc=r"""mYSpacing : double""")
    mFilterRect = property(_globalmapper.GM_ViewShedParams_t_mFilterRect_get, _globalmapper.GM_ViewShedParams_t_mFilterRect_set, doc=r"""mFilterRect : p.GM_Rectangle_t""")
    mReceiverAngleEnd = property(_globalmapper.GM_ViewShedParams_t_mReceiverAngleEnd_get, _globalmapper.GM_ViewShedParams_t_mReceiverAngleEnd_set, doc=r"""mReceiverAngleEnd : p.double""")
    mFresnelFreq = property(_globalmapper.GM_ViewShedParams_t_mFresnelFreq_get, _globalmapper.GM_ViewShedParams_t_mFresnelFreq_set, doc=r"""mFresnelFreq : double""")
    mFresnelPctClear = property(_globalmapper.GM_ViewShedParams_t_mFresnelPctClear_get, _globalmapper.GM_ViewShedParams_t_mFresnelPctClear_set, doc=r"""mFresnelPctClear : double""")

    def __init__(self):
        r"""__init__(GM_ViewShedParams_t self) -> GM_ViewShedParams_t"""
        _globalmapper.GM_ViewShedParams_t_swiginit(self, _globalmapper.new_GM_ViewShedParams_t())

    def __repr__( self ) :
        return str( gmobject_to_map( self ) )

    __swig_destroy__ = _globalmapper.delete_GM_ViewShedParams_t


# Register GM_ViewShedParams_t in _globalmapper:
_globalmapper.GM_ViewShedParams_t_swigregister(GM_ViewShedParams_t)

[docs]
class GM_ContourParams_t(object):
    r"""Proxy of C++ GM_ContourParams_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __repr__( self ) :
        return str( gmobject_to_map( self ) )

    mSize = property(_globalmapper.GM_ContourParams_t_mSize_get, _globalmapper.GM_ContourParams_t_mSize_set, doc=r"""mSize : uint32""")
    mDesc = property(_globalmapper.GM_ContourParams_t_mDesc_get, _globalmapper.GM_ContourParams_t_mDesc_set, doc=r"""mDesc : p.q(const).char""")
    mContourBounds = property(_globalmapper.GM_ContourParams_t_mContourBounds_get, _globalmapper.GM_ContourParams_t_mContourBounds_set, doc=r"""mContourBounds : GM_Rectangle_t""")
    mContourInterval = property(_globalmapper.GM_ContourParams_t_mContourInterval_get, _globalmapper.GM_ContourParams_t_mContourInterval_set, doc=r"""mContourInterval : float""")
    mIntervalInFeet = property(_globalmapper.GM_ContourParams_t_mIntervalInFeet_get, _globalmapper.GM_ContourParams_t_mIntervalInFeet_set, doc=r"""mIntervalInFeet : boolean""")
    mGenerateAreas = property(_globalmapper.GM_ContourParams_t_mGenerateAreas_get, _globalmapper.GM_ContourParams_t_mGenerateAreas_set, doc=r"""mGenerateAreas : boolean""")
    mGenerateSpotElevs = property(_globalmapper.GM_ContourParams_t_mGenerateSpotElevs_get, _globalmapper.GM_ContourParams_t_mGenerateSpotElevs_set, doc=r"""mGenerateSpotElevs : boolean""")
    mNumberOnlyLabels = property(_globalmapper.GM_ContourParams_t_mNumberOnlyLabels_get, _globalmapper.GM_ContourParams_t_mNumberOnlyLabels_set, doc=r"""mNumberOnlyLabels : boolean""")
    mShowProgress = property(_globalmapper.GM_ContourParams_t_mShowProgress_get, _globalmapper.GM_ContourParams_t_mShowProgress_set, doc=r"""mShowProgress : boolean""")
    mDisableSmoothing = property(_globalmapper.GM_ContourParams_t_mDisableSmoothing_get, _globalmapper.GM_ContourParams_t_mDisableSmoothing_set, doc=r"""mDisableSmoothing : boolean""")
    mCreateFromAbove = property(_globalmapper.GM_ContourParams_t_mCreateFromAbove_get, _globalmapper.GM_ContourParams_t_mCreateFromAbove_set, doc=r"""mCreateFromAbove : boolean""")
    mSingleLevelOnly = property(_globalmapper.GM_ContourParams_t_mSingleLevelOnly_get, _globalmapper.GM_ContourParams_t_mSingleLevelOnly_set, doc=r"""mSingleLevelOnly : boolean""")
    mXSpacing = property(_globalmapper.GM_ContourParams_t_mXSpacing_get, _globalmapper.GM_ContourParams_t_mXSpacing_set, doc=r"""mXSpacing : double""")
    mYSpacing = property(_globalmapper.GM_ContourParams_t_mYSpacing_get, _globalmapper.GM_ContourParams_t_mYSpacing_set, doc=r"""mYSpacing : double""")
    mSimpThreshold = property(_globalmapper.GM_ContourParams_t_mSimpThreshold_get, _globalmapper.GM_ContourParams_t_mSimpThreshold_set, doc=r"""mSimpThreshold : double""")
    mCreateNonOverlappingAreas = property(_globalmapper.GM_ContourParams_t_mCreateNonOverlappingAreas_get, _globalmapper.GM_ContourParams_t_mCreateNonOverlappingAreas_set, doc=r"""mCreateNonOverlappingAreas : boolean""")

    def __init__(self):
        r"""__init__(GM_ContourParams_t self) -> GM_ContourParams_t"""
        _globalmapper.GM_ContourParams_t_swiginit(self, _globalmapper.new_GM_ContourParams_t())
    __swig_destroy__ = _globalmapper.delete_GM_ContourParams_t


# Register GM_ContourParams_t in _globalmapper:
_globalmapper.GM_ContourParams_t_swigregister(GM_ContourParams_t)

[docs]
class GM_PathProfileLOSParams_t(object):
    r"""Proxy of C++ GM_PathProfileLOSParams_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __repr__( self ) :
        attr_map = gmobject_to_map( self )
        if self.mElevList:
            attr_map['mElevList'] = carray_to_list( float_array_frompointer( self.mElevList ), self.mListSize )
        return str( attr_map )

    mSize = property(_globalmapper.GM_PathProfileLOSParams_t_mSize_get, _globalmapper.GM_PathProfileLOSParams_t_mSize_set, doc=r"""mSize : uint32""")
    mFlags = property(_globalmapper.GM_PathProfileLOSParams_t_mFlags_get, _globalmapper.GM_PathProfileLOSParams_t_mFlags_set, doc=r"""mFlags : GM_PathProfileLOSFlags_t32""")
    mStartX = property(_globalmapper.GM_PathProfileLOSParams_t_mStartX_get, _globalmapper.GM_PathProfileLOSParams_t_mStartX_set, doc=r"""mStartX : double""")
    mStartY = property(_globalmapper.GM_PathProfileLOSParams_t_mStartY_get, _globalmapper.GM_PathProfileLOSParams_t_mStartY_set, doc=r"""mStartY : double""")
    mEndX = property(_globalmapper.GM_PathProfileLOSParams_t_mEndX_get, _globalmapper.GM_PathProfileLOSParams_t_mEndX_set, doc=r"""mEndX : double""")
    mEndY = property(_globalmapper.GM_PathProfileLOSParams_t_mEndY_get, _globalmapper.GM_PathProfileLOSParams_t_mEndY_set, doc=r"""mEndY : double""")
    mElevList = property(_globalmapper.GM_PathProfileLOSParams_t_mElevList_get, _globalmapper.GM_PathProfileLOSParams_t_mElevList_set, doc=r"""mElevList : p.float""")
    mListSize = property(_globalmapper.GM_PathProfileLOSParams_t_mListSize_get, _globalmapper.GM_PathProfileLOSParams_t_mListSize_set, doc=r"""mListSize : uint32""")
    mDfltElev = property(_globalmapper.GM_PathProfileLOSParams_t_mDfltElev_get, _globalmapper.GM_PathProfileLOSParams_t_mDfltElev_set, doc=r"""mDfltElev : float""")
    mDetailsStr = property(_globalmapper.GM_PathProfileLOSParams_t_mDetailsStr_get, _globalmapper.GM_PathProfileLOSParams_t_mDetailsStr_set, doc=r"""mDetailsStr : p.char""")
    mDetailsStrMaxLen = property(_globalmapper.GM_PathProfileLOSParams_t_mDetailsStrMaxLen_get, _globalmapper.GM_PathProfileLOSParams_t_mDetailsStrMaxLen_set, doc=r"""mDetailsStrMaxLen : uint32""")
    mAtmosphericCorr = property(_globalmapper.GM_PathProfileLOSParams_t_mAtmosphericCorr_get, _globalmapper.GM_PathProfileLOSParams_t_mAtmosphericCorr_set, doc=r"""mAtmosphericCorr : double""")
    mLOSFromHeight = property(_globalmapper.GM_PathProfileLOSParams_t_mLOSFromHeight_get, _globalmapper.GM_PathProfileLOSParams_t_mLOSFromHeight_set, doc=r"""mLOSFromHeight : float""")
    mLOSToHeight = property(_globalmapper.GM_PathProfileLOSParams_t_mLOSToHeight_get, _globalmapper.GM_PathProfileLOSParams_t_mLOSToHeight_set, doc=r"""mLOSToHeight : float""")
    mLOSMinClearance = property(_globalmapper.GM_PathProfileLOSParams_t_mLOSMinClearance_get, _globalmapper.GM_PathProfileLOSParams_t_mLOSMinClearance_set, doc=r"""mLOSMinClearance : float""")
    mLOSMinClearancePos = property(_globalmapper.GM_PathProfileLOSParams_t_mLOSMinClearancePos_get, _globalmapper.GM_PathProfileLOSParams_t_mLOSMinClearancePos_set, doc=r"""mLOSMinClearancePos : GM_Point_t""")
    mFresnelFreq = property(_globalmapper.GM_PathProfileLOSParams_t_mFresnelFreq_get, _globalmapper.GM_PathProfileLOSParams_t_mFresnelFreq_set, doc=r"""mFresnelFreq : double""")
    mFresnelPctClear = property(_globalmapper.GM_PathProfileLOSParams_t_mFresnelPctClear_get, _globalmapper.GM_PathProfileLOSParams_t_mFresnelPctClear_set, doc=r"""mFresnelPctClear : double""")
    mLOSFirstBlockedPos = property(_globalmapper.GM_PathProfileLOSParams_t_mLOSFirstBlockedPos_get, _globalmapper.GM_PathProfileLOSParams_t_mLOSFirstBlockedPos_set, doc=r"""mLOSFirstBlockedPos : GM_Point_t""")
    mLOSLastBlockedPos = property(_globalmapper.GM_PathProfileLOSParams_t_mLOSLastBlockedPos_get, _globalmapper.GM_PathProfileLOSParams_t_mLOSLastBlockedPos_set, doc=r"""mLOSLastBlockedPos : GM_Point_t""")

    def __init__(self):
        r"""__init__(GM_PathProfileLOSParams_t self) -> GM_PathProfileLOSParams_t"""
        _globalmapper.GM_PathProfileLOSParams_t_swiginit(self, _globalmapper.new_GM_PathProfileLOSParams_t())
    __swig_destroy__ = _globalmapper.delete_GM_PathProfileLOSParams_t


# Register GM_PathProfileLOSParams_t in _globalmapper:
_globalmapper.GM_PathProfileLOSParams_t_swigregister(GM_PathProfileLOSParams_t)

[docs]
class GM_AreaVolumeParams_t(object):
    r"""Proxy of C++ GM_AreaVolumeParams_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __repr__( self ) :
        return str( gmobject_to_map( self ) )

    mSize = property(_globalmapper.GM_AreaVolumeParams_t_mSize_get, _globalmapper.GM_AreaVolumeParams_t_mSize_set, doc=r"""mSize : uint32""")
    mPoints = property(_globalmapper.GM_AreaVolumeParams_t_mPoints_get, _globalmapper.GM_AreaVolumeParams_t_mPoints_set, doc=r"""mPoints : p.q(const).GM_Point_t""")
    mNumPoints = property(_globalmapper.GM_AreaVolumeParams_t_mNumPoints_get, _globalmapper.GM_AreaVolumeParams_t_mNumPoints_set, doc=r"""mNumPoints : uint32""")
    mCutHeight = property(_globalmapper.GM_AreaVolumeParams_t_mCutHeight_get, _globalmapper.GM_AreaVolumeParams_t_mCutHeight_set, doc=r"""mCutHeight : float""")
    mXSpacing = property(_globalmapper.GM_AreaVolumeParams_t_mXSpacing_get, _globalmapper.GM_AreaVolumeParams_t_mXSpacing_set, doc=r"""mXSpacing : double""")
    mYSpacing = property(_globalmapper.GM_AreaVolumeParams_t_mYSpacing_get, _globalmapper.GM_AreaVolumeParams_t_mYSpacing_set, doc=r"""mYSpacing : double""")
    mFillGaps = property(_globalmapper.GM_AreaVolumeParams_t_mFillGaps_get, _globalmapper.GM_AreaVolumeParams_t_mFillGaps_set, doc=r"""mFillGaps : boolean""")

    def __init__(self):
        r"""__init__(GM_AreaVolumeParams_t self) -> GM_AreaVolumeParams_t"""
        _globalmapper.GM_AreaVolumeParams_t_swiginit(self, _globalmapper.new_GM_AreaVolumeParams_t())
    __swig_destroy__ = _globalmapper.delete_GM_AreaVolumeParams_t


# Register GM_AreaVolumeParams_t in _globalmapper:
_globalmapper.GM_AreaVolumeParams_t_swigregister(GM_AreaVolumeParams_t)

[docs]
class GM_LineVolumeParams_t(object):
    r"""Proxy of C++ GM_LineVolumeParams_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __repr__( self ) :
        return str( gmobject_to_map( self ) )

    mSize = property(_globalmapper.GM_LineVolumeParams_t_mSize_get, _globalmapper.GM_LineVolumeParams_t_mSize_set, doc=r"""mSize : uint32""")
    mPoints = property(_globalmapper.GM_LineVolumeParams_t_mPoints_get, _globalmapper.GM_LineVolumeParams_t_mPoints_set, doc=r"""mPoints : p.q(const).GM_Point_t""")
    mCutHeights = property(_globalmapper.GM_LineVolumeParams_t_mCutHeights_get, _globalmapper.GM_LineVolumeParams_t_mCutHeights_set, doc=r"""mCutHeights : p.float""")
    mNumPoints = property(_globalmapper.GM_LineVolumeParams_t_mNumPoints_get, _globalmapper.GM_LineVolumeParams_t_mNumPoints_set, doc=r"""mNumPoints : uint32""")
    mCutHeightsAbsolute = property(_globalmapper.GM_LineVolumeParams_t_mCutHeightsAbsolute_get, _globalmapper.GM_LineVolumeParams_t_mCutHeightsAbsolute_set, doc=r"""mCutHeightsAbsolute : boolean""")
    mCorridorWidth = property(_globalmapper.GM_LineVolumeParams_t_mCorridorWidth_get, _globalmapper.GM_LineVolumeParams_t_mCorridorWidth_set, doc=r"""mCorridorWidth : double""")
    mXSpacing = property(_globalmapper.GM_LineVolumeParams_t_mXSpacing_get, _globalmapper.GM_LineVolumeParams_t_mXSpacing_set, doc=r"""mXSpacing : double""")
    mYSpacing = property(_globalmapper.GM_LineVolumeParams_t_mYSpacing_get, _globalmapper.GM_LineVolumeParams_t_mYSpacing_set, doc=r"""mYSpacing : double""")

    def __init__(self):
        r"""__init__(GM_LineVolumeParams_t self) -> GM_LineVolumeParams_t"""
        _globalmapper.GM_LineVolumeParams_t_swiginit(self, _globalmapper.new_GM_LineVolumeParams_t())
    __swig_destroy__ = _globalmapper.delete_GM_LineVolumeParams_t


# Register GM_LineVolumeParams_t in _globalmapper:
_globalmapper.GM_LineVolumeParams_t_swigregister(GM_LineVolumeParams_t)

[docs]
class GM_ValueStats_t(object):
    r"""Proxy of C++ GM_ValueStats_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    mCount = property(_globalmapper.GM_ValueStats_t_mCount_get, _globalmapper.GM_ValueStats_t_mCount_set, doc=r"""mCount : uint64""")
    mAvg = property(_globalmapper.GM_ValueStats_t_mAvg_get, _globalmapper.GM_ValueStats_t_mAvg_set, doc=r"""mAvg : double""")
    mMin = property(_globalmapper.GM_ValueStats_t_mMin_get, _globalmapper.GM_ValueStats_t_mMin_set, doc=r"""mMin : double""")
    mMax = property(_globalmapper.GM_ValueStats_t_mMax_get, _globalmapper.GM_ValueStats_t_mMax_set, doc=r"""mMax : double""")
    mStdDev = property(_globalmapper.GM_ValueStats_t_mStdDev_get, _globalmapper.GM_ValueStats_t_mStdDev_set, doc=r"""mStdDev : double""")

    def __init__(self):
        r"""__init__(GM_ValueStats_t self) -> GM_ValueStats_t"""
        _globalmapper.GM_ValueStats_t_swiginit(self, _globalmapper.new_GM_ValueStats_t())
    __swig_destroy__ = _globalmapper.delete_GM_ValueStats_t


# Register GM_ValueStats_t in _globalmapper:
_globalmapper.GM_ValueStats_t_swigregister(GM_ValueStats_t)

[docs]
class GM_AreaElevStats_t(object):
    r"""Proxy of C++ GM_AreaElevStats_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __repr__( self ) :
        return str( gmobject_to_map( self ) )

    mSize = property(_globalmapper.GM_AreaElevStats_t_mSize_get, _globalmapper.GM_AreaElevStats_t_mSize_set, doc=r"""mSize : uint32""")
    mNumSamples = property(_globalmapper.GM_AreaElevStats_t_mNumSamples_get, _globalmapper.GM_AreaElevStats_t_mNumSamples_set, doc=r"""mNumSamples : uint64""")
    mAvgElev = property(_globalmapper.GM_AreaElevStats_t_mAvgElev_get, _globalmapper.GM_AreaElevStats_t_mAvgElev_set, doc=r"""mAvgElev : double""")
    mMinElev = property(_globalmapper.GM_AreaElevStats_t_mMinElev_get, _globalmapper.GM_AreaElevStats_t_mMinElev_set, doc=r"""mMinElev : double""")
    mMaxElev = property(_globalmapper.GM_AreaElevStats_t_mMaxElev_get, _globalmapper.GM_AreaElevStats_t_mMaxElev_set, doc=r"""mMaxElev : double""")
    mStdDevElev = property(_globalmapper.GM_AreaElevStats_t_mStdDevElev_get, _globalmapper.GM_AreaElevStats_t_mStdDevElev_set, doc=r"""mStdDevElev : double""")
    mModeElev = property(_globalmapper.GM_AreaElevStats_t_mModeElev_get, _globalmapper.GM_AreaElevStats_t_mModeElev_set, doc=r"""mModeElev : double""")
    mAvgSlope = property(_globalmapper.GM_AreaElevStats_t_mAvgSlope_get, _globalmapper.GM_AreaElevStats_t_mAvgSlope_set, doc=r"""mAvgSlope : double""")
    mMaxSlope = property(_globalmapper.GM_AreaElevStats_t_mMaxSlope_get, _globalmapper.GM_AreaElevStats_t_mMaxSlope_set, doc=r"""mMaxSlope : double""")
    mStdDevSlope = property(_globalmapper.GM_AreaElevStats_t_mStdDevSlope_get, _globalmapper.GM_AreaElevStats_t_mStdDevSlope_set, doc=r"""mStdDevSlope : double""")
    mNumIgnoredSamples = property(_globalmapper.GM_AreaElevStats_t_mNumIgnoredSamples_get, _globalmapper.GM_AreaElevStats_t_mNumIgnoredSamples_set, doc=r"""mNumIgnoredSamples : uint64""")

    def __init__(self):
        r"""__init__(GM_AreaElevStats_t self) -> GM_AreaElevStats_t"""
        _globalmapper.GM_AreaElevStats_t_swiginit(self, _globalmapper.new_GM_AreaElevStats_t())
    __swig_destroy__ = _globalmapper.delete_GM_AreaElevStats_t


# Register GM_AreaElevStats_t in _globalmapper:
_globalmapper.GM_AreaElevStats_t_swigregister(GM_AreaElevStats_t)

GM_Contrast_None = _globalmapper.GM_Contrast_None

GM_Contrast_PercentageStretch = _globalmapper.GM_Contrast_PercentageStretch

GM_Contrast_RangeStretch = _globalmapper.GM_Contrast_RangeStretch

GM_Contrast_RangeStretchCustom = _globalmapper.GM_Contrast_RangeStretchCustom

GM_Contrast_HistogramEqualization = _globalmapper.GM_Contrast_HistogramEqualization

GM_Contrast_NumModes = _globalmapper.GM_Contrast_NumModes

GM_Contrast_DefaultAuto = _globalmapper.GM_Contrast_DefaultAuto

GM_CONTRAST_DFLT_STD_DEVS = _globalmapper.GM_CONTRAST_DFLT_STD_DEVS

GM_CONTRAST_MAX_STD_DEVS = _globalmapper.GM_CONTRAST_MAX_STD_DEVS

[docs]
class GM_ContrastBandRange_t(object):
    r"""Proxy of C++ GM_ContrastBandRange_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    mBand = property(_globalmapper.GM_ContrastBandRange_t_mBand_get, _globalmapper.GM_ContrastBandRange_t_mBand_set, doc=r"""mBand : uint32""")
    mMinVal = property(_globalmapper.GM_ContrastBandRange_t_mMinVal_get, _globalmapper.GM_ContrastBandRange_t_mMinVal_set, doc=r"""mMinVal : float""")
    mMaxVal = property(_globalmapper.GM_ContrastBandRange_t_mMaxVal_get, _globalmapper.GM_ContrastBandRange_t_mMaxVal_set, doc=r"""mMaxVal : float""")

    def __init__(self):
        r"""__init__(GM_ContrastBandRange_t self) -> GM_ContrastBandRange_t"""
        _globalmapper.GM_ContrastBandRange_t_swiginit(self, _globalmapper.new_GM_ContrastBandRange_t())

    def __eq__(self, aOther: "GM_ContrastBandRange_t") -> "bool":
        r"""
        __eq__(GM_ContrastBandRange_t self, GM_ContrastBandRange_t aOther) -> bool

        Parameters
        ----------
        aOther: GM_ContrastBandRange_t const &

        """
        return _globalmapper.GM_ContrastBandRange_t___eq__(self, aOther)

    def __ne__(self, aOther: "GM_ContrastBandRange_t") -> "bool":
        r"""
        __ne__(GM_ContrastBandRange_t self, GM_ContrastBandRange_t aOther) -> bool

        Parameters
        ----------
        aOther: GM_ContrastBandRange_t const &

        """
        return _globalmapper.GM_ContrastBandRange_t___ne__(self, aOther)

    def __lt__(self, aOther: "GM_ContrastBandRange_t") -> "bool":
        r"""
        __lt__(GM_ContrastBandRange_t self, GM_ContrastBandRange_t aOther) -> bool

        Parameters
        ----------
        aOther: GM_ContrastBandRange_t const &

        """
        return _globalmapper.GM_ContrastBandRange_t___lt__(self, aOther)
    __swig_destroy__ = _globalmapper.delete_GM_ContrastBandRange_t


# Register GM_ContrastBandRange_t in _globalmapper:
_globalmapper.GM_ContrastBandRange_t_swigregister(GM_ContrastBandRange_t)

[docs]
class GM_ContrastSetup_t(object):
    r"""Proxy of C++ GM_ContrastSetup_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    mMode = property(_globalmapper.GM_ContrastSetup_t_mMode_get, _globalmapper.GM_ContrastSetup_t_mMode_set, doc=r"""mMode : GM_ContrastMode_t8""")
    mNumStdDevs = property(_globalmapper.GM_ContrastSetup_t_mNumStdDevs_get, _globalmapper.GM_ContrastSetup_t_mNumStdDevs_set, doc=r"""mNumStdDevs : double""")
    mBandRanges = property(_globalmapper.GM_ContrastSetup_t_mBandRanges_get, _globalmapper.GM_ContrastSetup_t_mBandRanges_set, doc=r"""mBandRanges : p.q(const).GM_ContrastBandRange_t""")
    mNumBandRanges = property(_globalmapper.GM_ContrastSetup_t_mNumBandRanges_get, _globalmapper.GM_ContrastSetup_t_mNumBandRanges_set, doc=r"""mNumBandRanges : uint32""")

    def __init__(self, aContrastMode: "GM_ContrastMode_t8"=GM_Contrast_None, aNumStdDevs: "double"=0.0):
        r"""
        __init__(GM_ContrastSetup_t self, GM_ContrastMode_t8 aContrastMode=GM_Contrast_None, double aNumStdDevs=0.0) -> GM_ContrastSetup_t

        Parameters
        ----------
        aContrastMode: GM_ContrastMode_t8
        aNumStdDevs: double

        """
        _globalmapper.GM_ContrastSetup_t_swiginit(self, _globalmapper.new_GM_ContrastSetup_t(aContrastMode, aNumStdDevs))

    def __eq__(self, aOther: "GM_ContrastSetup_t") -> "bool":
        r"""
        __eq__(GM_ContrastSetup_t self, GM_ContrastSetup_t aOther) -> bool

        Parameters
        ----------
        aOther: GM_ContrastSetup_t const &

        """
        return _globalmapper.GM_ContrastSetup_t___eq__(self, aOther)

    def __ne__(self, aOther: "GM_ContrastSetup_t") -> "bool":
        r"""
        __ne__(GM_ContrastSetup_t self, GM_ContrastSetup_t aOther) -> bool

        Parameters
        ----------
        aOther: GM_ContrastSetup_t const &

        """
        return _globalmapper.GM_ContrastSetup_t___ne__(self, aOther)
    __swig_destroy__ = _globalmapper.delete_GM_ContrastSetup_t


# Register GM_ContrastSetup_t in _globalmapper:
_globalmapper.GM_ContrastSetup_t_swigregister(GM_ContrastSetup_t)

GM_BlendMode_None = _globalmapper.GM_BlendMode_None

GM_BlendMode_Multiple = _globalmapper.GM_BlendMode_Multiple

GM_BlendMode_Screen = _globalmapper.GM_BlendMode_Screen

GM_BlendMode_Overlay = _globalmapper.GM_BlendMode_Overlay

GM_BlendMode_HardLight = _globalmapper.GM_BlendMode_HardLight

GM_BlendMode_ColorBurn = _globalmapper.GM_BlendMode_ColorBurn

GM_BlendMode_ColorDodge = _globalmapper.GM_BlendMode_ColorDodge

GM_BlendMode_ApplyColor = _globalmapper.GM_BlendMode_ApplyColor

GM_BlendMode_ApplyColorReverse = _globalmapper.GM_BlendMode_ApplyColorReverse

GM_BlendMode_Darken = _globalmapper.GM_BlendMode_Darken

GM_BlendMode_Lighten = _globalmapper.GM_BlendMode_Lighten

GM_BlendMode_Difference = _globalmapper.GM_BlendMode_Difference

GM_BlendMode_Exclusion = _globalmapper.GM_BlendMode_Exclusion

GM_BlendMode_KeepRedChannel = _globalmapper.GM_BlendMode_KeepRedChannel

GM_BlendMode_KeepGreenChannel = _globalmapper.GM_BlendMode_KeepGreenChannel

GM_BlendMode_KeepBlueChannel = _globalmapper.GM_BlendMode_KeepBlueChannel

GM_BlendMode_SpotNaturalColor = _globalmapper.GM_BlendMode_SpotNaturalColor

GM_BlendMode_PsuedoNaturalColor = _globalmapper.GM_BlendMode_PsuedoNaturalColor

GM_BlendMode_ColorToGrayscale = _globalmapper.GM_BlendMode_ColorToGrayscale

GM_BlendMode_NumModes = _globalmapper.GM_BlendMode_NumModes

[docs]
class GM_RasterDisplayOptions_t(object):
    r"""Proxy of C++ GM_RasterDisplayOptions_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __repr__( self ) :
        return str( gmobject_to_map( self ) )

    mSize = property(_globalmapper.GM_RasterDisplayOptions_t_mSize_get, _globalmapper.GM_RasterDisplayOptions_t_mSize_set, doc=r"""mSize : uint32""")
    mContrastMode = property(_globalmapper.GM_RasterDisplayOptions_t_mContrastMode_get, _globalmapper.GM_RasterDisplayOptions_t_mContrastMode_set, doc=r"""mContrastMode : GM_ContrastMode_t8""")
    mAutoClipCollar = property(_globalmapper.GM_RasterDisplayOptions_t_mAutoClipCollar_get, _globalmapper.GM_RasterDisplayOptions_t_mAutoClipCollar_set, doc=r"""mAutoClipCollar : boolean""")
    mColorIntensity = property(_globalmapper.GM_RasterDisplayOptions_t_mColorIntensity_get, _globalmapper.GM_RasterDisplayOptions_t_mColorIntensity_set, doc=r"""mColorIntensity : uint8""")
    mSamplingMethod = property(_globalmapper.GM_RasterDisplayOptions_t_mSamplingMethod_get, _globalmapper.GM_RasterDisplayOptions_t_mSamplingMethod_set, doc=r"""mSamplingMethod : GM_SamplingMethod_t8""")
    mTextureMap = property(_globalmapper.GM_RasterDisplayOptions_t_mTextureMap_get, _globalmapper.GM_RasterDisplayOptions_t_mTextureMap_set, doc=r"""mTextureMap : boolean""")
    mBlendMode = property(_globalmapper.GM_RasterDisplayOptions_t_mBlendMode_get, _globalmapper.GM_RasterDisplayOptions_t_mBlendMode_set, doc=r"""mBlendMode : GM_BlendMode_t8""")
    mTranslucency = property(_globalmapper.GM_RasterDisplayOptions_t_mTranslucency_get, _globalmapper.GM_RasterDisplayOptions_t_mTranslucency_set, doc=r"""mTranslucency : uint16""")
    mTransparent = property(_globalmapper.GM_RasterDisplayOptions_t_mTransparent_get, _globalmapper.GM_RasterDisplayOptions_t_mTransparent_set, doc=r"""mTransparent : boolean""")
    mTransparentColor = property(_globalmapper.GM_RasterDisplayOptions_t_mTransparentColor_get, _globalmapper.GM_RasterDisplayOptions_t_mTransparentColor_set, doc=r"""mTransparentColor : COLORREF""")
    mTransparentColorDist = property(_globalmapper.GM_RasterDisplayOptions_t_mTransparentColorDist_get, _globalmapper.GM_RasterDisplayOptions_t_mTransparentColorDist_set, doc=r"""mTransparentColorDist : uint8""")
    mRedAdjustPercent = property(_globalmapper.GM_RasterDisplayOptions_t_mRedAdjustPercent_get, _globalmapper.GM_RasterDisplayOptions_t_mRedAdjustPercent_set, doc=r"""mRedAdjustPercent : sint8""")
    mGreenAdjustPercent = property(_globalmapper.GM_RasterDisplayOptions_t_mGreenAdjustPercent_get, _globalmapper.GM_RasterDisplayOptions_t_mGreenAdjustPercent_set, doc=r"""mGreenAdjustPercent : sint8""")
    mBlueAdjustPercent = property(_globalmapper.GM_RasterDisplayOptions_t_mBlueAdjustPercent_get, _globalmapper.GM_RasterDisplayOptions_t_mBlueAdjustPercent_set, doc=r"""mBlueAdjustPercent : sint8""")
    mBandLayoutValid = property(_globalmapper.GM_RasterDisplayOptions_t_mBandLayoutValid_get, _globalmapper.GM_RasterDisplayOptions_t_mBandLayoutValid_set, doc=r"""mBandLayoutValid : boolean""")
    mBandIdxRed = property(_globalmapper.GM_RasterDisplayOptions_t_mBandIdxRed_get, _globalmapper.GM_RasterDisplayOptions_t_mBandIdxRed_set, doc=r"""mBandIdxRed : uint8""")
    mBandIdxGreen = property(_globalmapper.GM_RasterDisplayOptions_t_mBandIdxGreen_get, _globalmapper.GM_RasterDisplayOptions_t_mBandIdxGreen_set, doc=r"""mBandIdxGreen : uint8""")
    mBandIdxBlue = property(_globalmapper.GM_RasterDisplayOptions_t_mBandIdxBlue_get, _globalmapper.GM_RasterDisplayOptions_t_mBandIdxBlue_set, doc=r"""mBandIdxBlue : uint8""")
    mContrastNumStdDev = property(_globalmapper.GM_RasterDisplayOptions_t_mContrastNumStdDev_get, _globalmapper.GM_RasterDisplayOptions_t_mContrastNumStdDev_set, doc=r"""mContrastNumStdDev : double""")
    mContrastShared = property(_globalmapper.GM_RasterDisplayOptions_t_mContrastShared_get, _globalmapper.GM_RasterDisplayOptions_t_mContrastShared_set, doc=r"""mContrastShared : boolean""")
    mColorGradeValid = property(_globalmapper.GM_RasterDisplayOptions_t_mColorGradeValid_get, _globalmapper.GM_RasterDisplayOptions_t_mColorGradeValid_set, doc=r"""mColorGradeValid : boolean""")
    mColorGradeRedInMin = property(_globalmapper.GM_RasterDisplayOptions_t_mColorGradeRedInMin_get, _globalmapper.GM_RasterDisplayOptions_t_mColorGradeRedInMin_set, doc=r"""mColorGradeRedInMin : uint8""")
    mColorGradeRedInMax = property(_globalmapper.GM_RasterDisplayOptions_t_mColorGradeRedInMax_get, _globalmapper.GM_RasterDisplayOptions_t_mColorGradeRedInMax_set, doc=r"""mColorGradeRedInMax : uint8""")
    mColorGradeRedOutMin = property(_globalmapper.GM_RasterDisplayOptions_t_mColorGradeRedOutMin_get, _globalmapper.GM_RasterDisplayOptions_t_mColorGradeRedOutMin_set, doc=r"""mColorGradeRedOutMin : uint8""")
    mColorGradeRedOutMax = property(_globalmapper.GM_RasterDisplayOptions_t_mColorGradeRedOutMax_get, _globalmapper.GM_RasterDisplayOptions_t_mColorGradeRedOutMax_set, doc=r"""mColorGradeRedOutMax : uint8""")
    mColorGradeBlueInMin = property(_globalmapper.GM_RasterDisplayOptions_t_mColorGradeBlueInMin_get, _globalmapper.GM_RasterDisplayOptions_t_mColorGradeBlueInMin_set, doc=r"""mColorGradeBlueInMin : uint8""")
    mColorGradeBlueInMax = property(_globalmapper.GM_RasterDisplayOptions_t_mColorGradeBlueInMax_get, _globalmapper.GM_RasterDisplayOptions_t_mColorGradeBlueInMax_set, doc=r"""mColorGradeBlueInMax : uint8""")
    mColorGradeBlueOutMin = property(_globalmapper.GM_RasterDisplayOptions_t_mColorGradeBlueOutMin_get, _globalmapper.GM_RasterDisplayOptions_t_mColorGradeBlueOutMin_set, doc=r"""mColorGradeBlueOutMin : uint8""")
    mColorGradeBlueOutMax = property(_globalmapper.GM_RasterDisplayOptions_t_mColorGradeBlueOutMax_get, _globalmapper.GM_RasterDisplayOptions_t_mColorGradeBlueOutMax_set, doc=r"""mColorGradeBlueOutMax : uint8""")
    mColorGradeGreenInMin = property(_globalmapper.GM_RasterDisplayOptions_t_mColorGradeGreenInMin_get, _globalmapper.GM_RasterDisplayOptions_t_mColorGradeGreenInMin_set, doc=r"""mColorGradeGreenInMin : uint8""")
    mColorGradeGreenInMax = property(_globalmapper.GM_RasterDisplayOptions_t_mColorGradeGreenInMax_get, _globalmapper.GM_RasterDisplayOptions_t_mColorGradeGreenInMax_set, doc=r"""mColorGradeGreenInMax : uint8""")
    mColorGradeGreenOutMin = property(_globalmapper.GM_RasterDisplayOptions_t_mColorGradeGreenOutMin_get, _globalmapper.GM_RasterDisplayOptions_t_mColorGradeGreenOutMin_set, doc=r"""mColorGradeGreenOutMin : uint8""")
    mColorGradeGreenOutMax = property(_globalmapper.GM_RasterDisplayOptions_t_mColorGradeGreenOutMax_get, _globalmapper.GM_RasterDisplayOptions_t_mColorGradeGreenOutMax_set, doc=r"""mColorGradeGreenOutMax : uint8""")
    mColorGradeSaturation = property(_globalmapper.GM_RasterDisplayOptions_t_mColorGradeSaturation_get, _globalmapper.GM_RasterDisplayOptions_t_mColorGradeSaturation_set, doc=r"""mColorGradeSaturation : float""")
    mTransparentColorList = property(_globalmapper.GM_RasterDisplayOptions_t_mTransparentColorList_get, _globalmapper.GM_RasterDisplayOptions_t_mTransparentColorList_set, doc=r"""mTransparentColorList : p.COLORREF""")
    mTransparentColorListSize = property(_globalmapper.GM_RasterDisplayOptions_t_mTransparentColorListSize_get, _globalmapper.GM_RasterDisplayOptions_t_mTransparentColorListSize_set, doc=r"""mTransparentColorListSize : uint32""")

    def __init__(self):
        r"""__init__(GM_RasterDisplayOptions_t self) -> GM_RasterDisplayOptions_t"""
        _globalmapper.GM_RasterDisplayOptions_t_swiginit(self, _globalmapper.new_GM_RasterDisplayOptions_t())
    __swig_destroy__ = _globalmapper.delete_GM_RasterDisplayOptions_t


# Register GM_RasterDisplayOptions_t in _globalmapper:
_globalmapper.GM_RasterDisplayOptions_t_swigregister(GM_RasterDisplayOptions_t)

[docs]
class GM_ElevationOverrides_t(object):
    r"""Proxy of C++ GM_ElevationOverrides_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __repr__( self ) :
        return str( gmobject_to_map( self ) )

    mOffset = property(_globalmapper.GM_ElevationOverrides_t_mOffset_get, _globalmapper.GM_ElevationOverrides_t_mOffset_set, doc=r"""mOffset : float""")
    mScale = property(_globalmapper.GM_ElevationOverrides_t_mScale_get, _globalmapper.GM_ElevationOverrides_t_mScale_set, doc=r"""mScale : double""")
    mClampVals = property(_globalmapper.GM_ElevationOverrides_t_mClampVals_get, _globalmapper.GM_ElevationOverrides_t_mClampVals_set, doc=r"""mClampVals : boolean""")
    mMinValid = property(_globalmapper.GM_ElevationOverrides_t_mMinValid_get, _globalmapper.GM_ElevationOverrides_t_mMinValid_set, doc=r"""mMinValid : boolean""")
    mMinElev = property(_globalmapper.GM_ElevationOverrides_t_mMinElev_get, _globalmapper.GM_ElevationOverrides_t_mMinElev_set, doc=r"""mMinElev : float""")
    mMaxValid = property(_globalmapper.GM_ElevationOverrides_t_mMaxValid_get, _globalmapper.GM_ElevationOverrides_t_mMaxValid_set, doc=r"""mMaxValid : boolean""")
    mMaxElev = property(_globalmapper.GM_ElevationOverrides_t_mMaxElev_get, _globalmapper.GM_ElevationOverrides_t_mMaxElev_set, doc=r"""mMaxElev : float""")
    mVoidValid = property(_globalmapper.GM_ElevationOverrides_t_mVoidValid_get, _globalmapper.GM_ElevationOverrides_t_mVoidValid_set, doc=r"""mVoidValid : boolean""")
    mElevUnits = property(_globalmapper.GM_ElevationOverrides_t_mElevUnits_get, _globalmapper.GM_ElevationOverrides_t_mElevUnits_set, doc=r"""mElevUnits : GM_ElevUnits_t8""")
    mVoidElev = property(_globalmapper.GM_ElevationOverrides_t_mVoidElev_get, _globalmapper.GM_ElevationOverrides_t_mVoidElev_set, doc=r"""mVoidElev : float""")
    mLayerShader = property(_globalmapper.GM_ElevationOverrides_t_mLayerShader_get, _globalmapper.GM_ElevationOverrides_t_mLayerShader_set, doc=r"""mLayerShader : p.q(const).char""")

    def __init__(self):
        r"""__init__(GM_ElevationOverrides_t self) -> GM_ElevationOverrides_t"""
        _globalmapper.GM_ElevationOverrides_t_swiginit(self, _globalmapper.new_GM_ElevationOverrides_t())
    __swig_destroy__ = _globalmapper.delete_GM_ElevationOverrides_t


# Register GM_ElevationOverrides_t in _globalmapper:
_globalmapper.GM_ElevationOverrides_t_swigregister(GM_ElevationOverrides_t)

[docs]
class GM_ShaderOptions_t(object):
    r"""Proxy of C++ GM_ShaderOptions_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __repr__( self ) :
        return str( gmobject_to_map( self ) )

    mSize = property(_globalmapper.GM_ShaderOptions_t_mSize_get, _globalmapper.GM_ShaderOptions_t_mSize_set, doc=r"""mSize : uint32""")
    mDaylightShaderColor = property(_globalmapper.GM_ShaderOptions_t_mDaylightShaderColor_get, _globalmapper.GM_ShaderOptions_t_mDaylightShaderColor_set, doc=r"""mDaylightShaderColor : COLORREF""")
    mGradientShaderLoColor = property(_globalmapper.GM_ShaderOptions_t_mGradientShaderLoColor_get, _globalmapper.GM_ShaderOptions_t_mGradientShaderLoColor_set, doc=r"""mGradientShaderLoColor : COLORREF""")
    mGradientShaderHiColor = property(_globalmapper.GM_ShaderOptions_t_mGradientShaderHiColor_get, _globalmapper.GM_ShaderOptions_t_mGradientShaderHiColor_set, doc=r"""mGradientShaderHiColor : COLORREF""")
    mSlopeShaderMinColor = property(_globalmapper.GM_ShaderOptions_t_mSlopeShaderMinColor_get, _globalmapper.GM_ShaderOptions_t_mSlopeShaderMinColor_set, doc=r"""mSlopeShaderMinColor : COLORREF""")
    mSlopeShaderMinSlope = property(_globalmapper.GM_ShaderOptions_t_mSlopeShaderMinSlope_get, _globalmapper.GM_ShaderOptions_t_mSlopeShaderMinSlope_set, doc=r"""mSlopeShaderMinSlope : float""")
    mSlopeShaderMaxColor = property(_globalmapper.GM_ShaderOptions_t_mSlopeShaderMaxColor_get, _globalmapper.GM_ShaderOptions_t_mSlopeShaderMaxColor_set, doc=r"""mSlopeShaderMaxColor : COLORREF""")
    mSlopeShaderMaxSlope = property(_globalmapper.GM_ShaderOptions_t_mSlopeShaderMaxSlope_get, _globalmapper.GM_ShaderOptions_t_mSlopeShaderMaxSlope_set, doc=r"""mSlopeShaderMaxSlope : float""")
    mHSVShaderLoColorStart = property(_globalmapper.GM_ShaderOptions_t_mHSVShaderLoColorStart_get, _globalmapper.GM_ShaderOptions_t_mHSVShaderLoColorStart_set, doc=r"""mHSVShaderLoColorStart : double""")
    mHSVShaderSaturation = property(_globalmapper.GM_ShaderOptions_t_mHSVShaderSaturation_get, _globalmapper.GM_ShaderOptions_t_mHSVShaderSaturation_set, doc=r"""mHSVShaderSaturation : double""")
    mHSVShaderValue = property(_globalmapper.GM_ShaderOptions_t_mHSVShaderValue_get, _globalmapper.GM_ShaderOptions_t_mHSVShaderValue_set, doc=r"""mHSVShaderValue : double""")
    mHSVShaderRange = property(_globalmapper.GM_ShaderOptions_t_mHSVShaderRange_get, _globalmapper.GM_ShaderOptions_t_mHSVShaderRange_set, doc=r"""mHSVShaderRange : double""")
    mHSVShaderReverse = property(_globalmapper.GM_ShaderOptions_t_mHSVShaderReverse_get, _globalmapper.GM_ShaderOptions_t_mHSVShaderReverse_set, doc=r"""mHSVShaderReverse : boolean""")
    mSlopeShaderCustomValid = property(_globalmapper.GM_ShaderOptions_t_mSlopeShaderCustomValid_get, _globalmapper.GM_ShaderOptions_t_mSlopeShaderCustomValid_set, doc=r"""mSlopeShaderCustomValid : boolean""")
    mReserved = property(_globalmapper.GM_ShaderOptions_t_mReserved_get, _globalmapper.GM_ShaderOptions_t_mReserved_set, doc=r"""mReserved : a(2).uint8""")
    mSlopeShaderCustomColor = property(_globalmapper.GM_ShaderOptions_t_mSlopeShaderCustomColor_get, _globalmapper.GM_ShaderOptions_t_mSlopeShaderCustomColor_set, doc=r"""mSlopeShaderCustomColor : COLORREF""")

    def __init__(self):
        r"""__init__(GM_ShaderOptions_t self) -> GM_ShaderOptions_t"""
        _globalmapper.GM_ShaderOptions_t_swiginit(self, _globalmapper.new_GM_ShaderOptions_t())
    __swig_destroy__ = _globalmapper.delete_GM_ShaderOptions_t


# Register GM_ShaderOptions_t in _globalmapper:
_globalmapper.GM_ShaderOptions_t_swigregister(GM_ShaderOptions_t)

GM_MapCatalog_DisplayTypePercent = _globalmapper.GM_MapCatalog_DisplayTypePercent

GM_MapCatalog_DisplayTypePixelSize = _globalmapper.GM_MapCatalog_DisplayTypePixelSize

GM_MapCatalog_DisplayTypeScale = _globalmapper.GM_MapCatalog_DisplayTypeScale

GM_MapCatalog_DisplayTypeScaleRange = _globalmapper.GM_MapCatalog_DisplayTypeScaleRange

GM_MapCatalog_NumDisplayTypes = _globalmapper.GM_MapCatalog_NumDisplayTypes

GM_MapCatalog_SetMapProjection = _globalmapper.GM_MapCatalog_SetMapProjection

GM_MapCatalog_NumMapOpts = _globalmapper.GM_MapCatalog_NumMapOpts

[docs]
class GM_MapCatalogInfo_t(object):
    r"""Proxy of C++ GM_MapCatalogInfo_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __repr__( self ) :
        return str( gmobject_to_map( self ) )

    mSize = property(_globalmapper.GM_MapCatalogInfo_t_mSize_get, _globalmapper.GM_MapCatalogInfo_t_mSize_set, doc=r"""mSize : uint32""")
    mNumMaps = property(_globalmapper.GM_MapCatalogInfo_t_mNumMaps_get, _globalmapper.GM_MapCatalogInfo_t_mNumMaps_set, doc=r"""mNumMaps : uint32""")
    mHideBounds = property(_globalmapper.GM_MapCatalogInfo_t_mHideBounds_get, _globalmapper.GM_MapCatalogInfo_t_mHideBounds_set, doc=r"""mHideBounds : boolean""")
    mDisplayType = property(_globalmapper.GM_MapCatalogInfo_t_mDisplayType_get, _globalmapper.GM_MapCatalogInfo_t_mDisplayType_set, doc=r"""mDisplayType : GM_MapCatalogDisplayType_t8""")
    mReserved = property(_globalmapper.GM_MapCatalogInfo_t_mReserved_get, _globalmapper.GM_MapCatalogInfo_t_mReserved_set, doc=r"""mReserved : a(2).uint8""")
    mDisplayValue = property(_globalmapper.GM_MapCatalogInfo_t_mDisplayValue_get, _globalmapper.GM_MapCatalogInfo_t_mDisplayValue_set, doc=r"""mDisplayValue : double""")
    mDisplayValue2 = property(_globalmapper.GM_MapCatalogInfo_t_mDisplayValue2_get, _globalmapper.GM_MapCatalogInfo_t_mDisplayValue2_set, doc=r"""mDisplayValue2 : double""")

    def __init__(self):
        r"""__init__(GM_MapCatalogInfo_t self) -> GM_MapCatalogInfo_t"""
        _globalmapper.GM_MapCatalogInfo_t_swiginit(self, _globalmapper.new_GM_MapCatalogInfo_t())
    __swig_destroy__ = _globalmapper.delete_GM_MapCatalogInfo_t


# Register GM_MapCatalogInfo_t in _globalmapper:
_globalmapper.GM_MapCatalogInfo_t_swigregister(GM_MapCatalogInfo_t)

GM_RasterLayout_BGROrder = _globalmapper.GM_RasterLayout_BGROrder

GM_RasterLayout_AlphaPresent = _globalmapper.GM_RasterLayout_AlphaPresent

GM_RasterLayout_CopyData = _globalmapper.GM_RasterLayout_CopyData

GM_RasterLayout_ColMajorOrder = _globalmapper.GM_RasterLayout_ColMajorOrder

GM_RasterLayout_ReverseRows = _globalmapper.GM_RasterLayout_ReverseRows

GM_RasterLayout_ReverseCols = _globalmapper.GM_RasterLayout_ReverseCols

GM_RasterLayout_HideProgress = _globalmapper.GM_RasterLayout_HideProgress

GM_RasterLayout_ConvertPalToRGB = _globalmapper.GM_RasterLayout_ConvertPalToRGB

[docs]
class GM_RasterLayout_t(object):
    r"""Proxy of C++ GM_RasterLayout_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    mFlags = property(_globalmapper.GM_RasterLayout_t_mFlags_get, _globalmapper.GM_RasterLayout_t_mFlags_set, doc=r"""mFlags : GM_RasterLayoutFlags_t32""")
    mTopLeft = property(_globalmapper.GM_RasterLayout_t_mTopLeft_get, _globalmapper.GM_RasterLayout_t_mTopLeft_set, doc=r"""mTopLeft : GM_Point_t""")
    mXPixelSize = property(_globalmapper.GM_RasterLayout_t_mXPixelSize_get, _globalmapper.GM_RasterLayout_t_mXPixelSize_set, doc=r"""mXPixelSize : double""")
    mYPixelSize = property(_globalmapper.GM_RasterLayout_t_mYPixelSize_get, _globalmapper.GM_RasterLayout_t_mYPixelSize_set, doc=r"""mYPixelSize : double""")
    mPixelWidth = property(_globalmapper.GM_RasterLayout_t_mPixelWidth_get, _globalmapper.GM_RasterLayout_t_mPixelWidth_set, doc=r"""mPixelWidth : sint32""")
    mPixelHeight = property(_globalmapper.GM_RasterLayout_t_mPixelHeight_get, _globalmapper.GM_RasterLayout_t_mPixelHeight_set, doc=r"""mPixelHeight : sint32""")
    mNumBands = property(_globalmapper.GM_RasterLayout_t_mNumBands_get, _globalmapper.GM_RasterLayout_t_mNumBands_set, doc=r"""mNumBands : uint32""")
    mBitsPerBand = property(_globalmapper.GM_RasterLayout_t_mBitsPerBand_get, _globalmapper.GM_RasterLayout_t_mBitsPerBand_set, doc=r"""mBitsPerBand : uint32""")
    mBytesPerRow = property(_globalmapper.GM_RasterLayout_t_mBytesPerRow_get, _globalmapper.GM_RasterLayout_t_mBytesPerRow_set, doc=r"""mBytesPerRow : uint32""")
    mPalette = property(_globalmapper.GM_RasterLayout_t_mPalette_get, _globalmapper.GM_RasterLayout_t_mPalette_set, doc=r"""mPalette : p.COLORREF""")
    mPaletteSize = property(_globalmapper.GM_RasterLayout_t_mPaletteSize_get, _globalmapper.GM_RasterLayout_t_mPaletteSize_set, doc=r"""mPaletteSize : uint32""")
    mAlphaBandIdx = property(_globalmapper.GM_RasterLayout_t_mAlphaBandIdx_get, _globalmapper.GM_RasterLayout_t_mAlphaBandIdx_set, doc=r"""mAlphaBandIdx : uint32""")
    mValType = property(_globalmapper.GM_RasterLayout_t_mValType_get, _globalmapper.GM_RasterLayout_t_mValType_set, doc=r"""mValType : GM_BandValType_t8""")
    mAlphaValType = property(_globalmapper.GM_RasterLayout_t_mAlphaValType_get, _globalmapper.GM_RasterLayout_t_mAlphaValType_set, doc=r"""mAlphaValType : GM_BandValType_t8""")

    def __init__(self):
        r"""__init__(GM_RasterLayout_t self) -> GM_RasterLayout_t"""
        _globalmapper.GM_RasterLayout_t_swiginit(self, _globalmapper.new_GM_RasterLayout_t())

[docs]
    def getNumBandsNoAlpha(self) -> "uint32":
        r"""getNumBandsNoAlpha(GM_RasterLayout_t self) -> uint32"""
        return _globalmapper.GM_RasterLayout_t_getNumBandsNoAlpha(self)


[docs]
    def getNumBandsWAlpha(self) -> "uint32":
        r"""getNumBandsWAlpha(GM_RasterLayout_t self) -> uint32"""
        return _globalmapper.GM_RasterLayout_t_getNumBandsWAlpha(self)


    def __repr__( self ) :
        attr_map = gmobject_to_map( self )
        attr_map['mPalette'] = carray_to_list( COLORREF_array_frompointer( self.mPalette ), self.mPaletteSize )
        return str( attr_map )

    __swig_destroy__ = _globalmapper.delete_GM_RasterLayout_t


# Register GM_RasterLayout_t in _globalmapper:
_globalmapper.GM_RasterLayout_t_swigregister(GM_RasterLayout_t)

[docs]
class GM_GridLayout_t(object):
    r"""Proxy of C++ GM_GridLayout_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __repr__( self ) :
        return str( gmobject_to_map( self ) )

    mFlags = property(_globalmapper.GM_GridLayout_t_mFlags_get, _globalmapper.GM_GridLayout_t_mFlags_set, doc=r"""mFlags : GM_RasterLayoutFlags_t32""")
    mTopLeft = property(_globalmapper.GM_GridLayout_t_mTopLeft_get, _globalmapper.GM_GridLayout_t_mTopLeft_set, doc=r"""mTopLeft : GM_Point_t""")
    mXSpacing = property(_globalmapper.GM_GridLayout_t_mXSpacing_get, _globalmapper.GM_GridLayout_t_mXSpacing_set, doc=r"""mXSpacing : double""")
    mYSpacing = property(_globalmapper.GM_GridLayout_t_mYSpacing_get, _globalmapper.GM_GridLayout_t_mYSpacing_set, doc=r"""mYSpacing : double""")
    mNumSamplesX = property(_globalmapper.GM_GridLayout_t_mNumSamplesX_get, _globalmapper.GM_GridLayout_t_mNumSamplesX_set, doc=r"""mNumSamplesX : sint32""")
    mNumSamplesY = property(_globalmapper.GM_GridLayout_t_mNumSamplesY_get, _globalmapper.GM_GridLayout_t_mNumSamplesY_set, doc=r"""mNumSamplesY : sint32""")
    mBytesPerRow = property(_globalmapper.GM_GridLayout_t_mBytesPerRow_get, _globalmapper.GM_GridLayout_t_mBytesPerRow_set, doc=r"""mBytesPerRow : uint32""")
    mNoDataValue = property(_globalmapper.GM_GridLayout_t_mNoDataValue_get, _globalmapper.GM_GridLayout_t_mNoDataValue_set, doc=r"""mNoDataValue : float""")
    mValType = property(_globalmapper.GM_GridLayout_t_mValType_get, _globalmapper.GM_GridLayout_t_mValType_set, doc=r"""mValType : GM_BandValType_t8""")
    mElevUnits = property(_globalmapper.GM_GridLayout_t_mElevUnits_get, _globalmapper.GM_GridLayout_t_mElevUnits_set, doc=r"""mElevUnits : GM_ElevUnits_t8""")
    mReserved = property(_globalmapper.GM_GridLayout_t_mReserved_get, _globalmapper.GM_GridLayout_t_mReserved_set, doc=r"""mReserved : a(2).uint8""")

    def __init__(self):
        r"""__init__(GM_GridLayout_t self) -> GM_GridLayout_t"""
        _globalmapper.GM_GridLayout_t_swiginit(self, _globalmapper.new_GM_GridLayout_t())
    __swig_destroy__ = _globalmapper.delete_GM_GridLayout_t


# Register GM_GridLayout_t in _globalmapper:
_globalmapper.GM_GridLayout_t_swigregister(GM_GridLayout_t)

GM_AsciiDelim_AutoDetect = _globalmapper.GM_AsciiDelim_AutoDetect

GM_AsciiDelim_Comma = _globalmapper.GM_AsciiDelim_Comma

GM_AsciiDelim_Whitespace = _globalmapper.GM_AsciiDelim_Whitespace

GM_AsciiDelim_Semicolon = _globalmapper.GM_AsciiDelim_Semicolon

GM_AsciiDelim_Tab = _globalmapper.GM_AsciiDelim_Tab

GM_AsciiDelim_NumTypes = _globalmapper.GM_AsciiDelim_NumTypes

GM_AsciiImport_PointOnly = _globalmapper.GM_AsciiImport_PointOnly

GM_AsciiImport_Vector = _globalmapper.GM_AsciiImport_Vector

GM_AsciiImport_Elevation = _globalmapper.GM_AsciiImport_Elevation

GM_AsciiImport_LidarPointCloud = _globalmapper.GM_AsciiImport_LidarPointCloud

GM_AsciiImport_DistanceBearing = _globalmapper.GM_AsciiImport_DistanceBearing

GM_AsciiImport_Area = _globalmapper.GM_AsciiImport_Area

GM_AsciiImport_DistanceBearingLine = _globalmapper.GM_AsciiImport_DistanceBearingLine

GM_AsciiImport_DistBearingSegs = _globalmapper.GM_AsciiImport_DistBearingSegs

GM_AsciiImport_LowranceSonar = _globalmapper.GM_AsciiImport_LowranceSonar

GM_AsciiImport_EarthExplorer = _globalmapper.GM_AsciiImport_EarthExplorer

GM_AsciiImport_SurferBLN = _globalmapper.GM_AsciiImport_SurferBLN

GM_AsciiImport_Delft3D = _globalmapper.GM_AsciiImport_Delft3D

GM_AsciiImport_AtlasBNA = _globalmapper.GM_AsciiImport_AtlasBNA

GM_AsciiImport_NgaRotatedCoverage = _globalmapper.GM_AsciiImport_NgaRotatedCoverage

GM_AsciiImport_ZmapIsomapLine = _globalmapper.GM_AsciiImport_ZmapIsomapLine

GM_AsciiImport_DeccWindSpeed = _globalmapper.GM_AsciiImport_DeccWindSpeed

GM_AsciiImport_LandmarkGraphics = _globalmapper.GM_AsciiImport_LandmarkGraphics

GM_AsciiImport_AerialFilmworks = _globalmapper.GM_AsciiImport_AerialFilmworks

GM_AsciiImport_USGSNatMapCoverage = _globalmapper.GM_AsciiImport_USGSNatMapCoverage

GM_AsciiImport_NumTypes = _globalmapper.GM_AsciiImport_NumTypes

GM_AsciiImport_LastGenericFormat = _globalmapper.GM_AsciiImport_LastGenericFormat

GM_AsciiImport_FirstSpecialFormat = _globalmapper.GM_AsciiImport_FirstSpecialFormat

GM_AsciiImport_DistBearingLine = _globalmapper.GM_AsciiImport_DistBearingLine

GM_AsciiImport_DistBearingPoints = _globalmapper.GM_AsciiImport_DistBearingPoints

GM_AsciiImport_AreaOnly = _globalmapper.GM_AsciiImport_AreaOnly

GM_AsciiCoordOrder_XFirst = _globalmapper.GM_AsciiCoordOrder_XFirst

GM_AsciiCoordOrder_YFirst = _globalmapper.GM_AsciiCoordOrder_YFirst

GM_AsciiCoordOrder_NumTypes = _globalmapper.GM_AsciiCoordOrder_NumTypes

GM_AsciiCoordOrder_Custom = _globalmapper.GM_AsciiCoordOrder_Custom

GM_AsciiCoordFormat_Decimal = _globalmapper.GM_AsciiCoordFormat_Decimal

GM_AsciiCoordFormat_DDMMSS = _globalmapper.GM_AsciiCoordFormat_DDMMSS

GM_AsciiCoordFormat_DDMM = _globalmapper.GM_AsciiCoordFormat_DDMM

GM_AsciiCoordFormat_DD_MMSS = _globalmapper.GM_AsciiCoordFormat_DD_MMSS

GM_AsciiCoordFormat_ECEF = _globalmapper.GM_AsciiCoordFormat_ECEF

GM_AsciiCoordFormat_WKT = _globalmapper.GM_AsciiCoordFormat_WKT

GM_AsciiCoordFormat_MGRS = _globalmapper.GM_AsciiCoordFormat_MGRS

GM_AsciiCoordFormat_UTM_K = _globalmapper.GM_AsciiCoordFormat_UTM_K

GM_AsciiCoordFormat_NumTypes = _globalmapper.GM_AsciiCoordFormat_NumTypes

[docs]
class GM_AsciiFormatInfo_t(object):
    r"""Proxy of C++ GM_AsciiFormatInfo_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __repr__( self ) :
        return str( gmobject_to_map( self ) )

    mImportType = property(_globalmapper.GM_AsciiFormatInfo_t_mImportType_get, _globalmapper.GM_AsciiFormatInfo_t_mImportType_set, doc=r"""mImportType : GM_AsciiImportType_t8""")
    mCoordDelim = property(_globalmapper.GM_AsciiFormatInfo_t_mCoordDelim_get, _globalmapper.GM_AsciiFormatInfo_t_mCoordDelim_set, doc=r"""mCoordDelim : GM_AsciiCoordDelim_t8""")
    mCoordOrder = property(_globalmapper.GM_AsciiFormatInfo_t_mCoordOrder_get, _globalmapper.GM_AsciiFormatInfo_t_mCoordOrder_set, doc=r"""mCoordOrder : GM_AsciiCoordOrder_t8""")
    mIncludeCoordAttrs = property(_globalmapper.GM_AsciiFormatInfo_t_mIncludeCoordAttrs_get, _globalmapper.GM_AsciiFormatInfo_t_mIncludeCoordAttrs_set, doc=r"""mIncludeCoordAttrs : boolean""")
    mColumnHeadersInFirstRow = property(_globalmapper.GM_AsciiFormatInfo_t_mColumnHeadersInFirstRow_get, _globalmapper.GM_AsciiFormatInfo_t_mColumnHeadersInFirstRow_set, doc=r"""mColumnHeadersInFirstRow : boolean""")
    mIncludeElevCoords = property(_globalmapper.GM_AsciiFormatInfo_t_mIncludeElevCoords_get, _globalmapper.GM_AsciiFormatInfo_t_mIncludeElevCoords_set, doc=r"""mIncludeElevCoords : boolean""")
    mColumnsToSkip = property(_globalmapper.GM_AsciiFormatInfo_t_mColumnsToSkip_get, _globalmapper.GM_AsciiFormatInfo_t_mColumnsToSkip_set, doc=r"""mColumnsToSkip : uint8""")
    mLinesToSkip = property(_globalmapper.GM_AsciiFormatInfo_t_mLinesToSkip_get, _globalmapper.GM_AsciiFormatInfo_t_mLinesToSkip_set, doc=r"""mLinesToSkip : uint8""")
    mCoordLinePrefix = property(_globalmapper.GM_AsciiFormatInfo_t_mCoordLinePrefix_get, _globalmapper.GM_AsciiFormatInfo_t_mCoordLinePrefix_set, doc=r"""mCoordLinePrefix : p.q(const).char""")
    mAreaType = property(_globalmapper.GM_AsciiFormatInfo_t_mAreaType_get, _globalmapper.GM_AsciiFormatInfo_t_mAreaType_set, doc=r"""mAreaType : AreaFeatureClass_t16""")
    mLineType = property(_globalmapper.GM_AsciiFormatInfo_t_mLineType_get, _globalmapper.GM_AsciiFormatInfo_t_mLineType_set, doc=r"""mLineType : LineFeatureClass_t16""")
    mPointType = property(_globalmapper.GM_AsciiFormatInfo_t_mPointType_get, _globalmapper.GM_AsciiFormatInfo_t_mPointType_set, doc=r"""mPointType : PointFeatureClass_t16""")
    mIgnoreZeroElevations = property(_globalmapper.GM_AsciiFormatInfo_t_mIgnoreZeroElevations_get, _globalmapper.GM_AsciiFormatInfo_t_mIgnoreZeroElevations_set, doc=r"""mIgnoreZeroElevations : boolean""")
    mFillToBounds = property(_globalmapper.GM_AsciiFormatInfo_t_mFillToBounds_get, _globalmapper.GM_AsciiFormatInfo_t_mFillToBounds_set, doc=r"""mFillToBounds : boolean""")
    mOffsetX = property(_globalmapper.GM_AsciiFormatInfo_t_mOffsetX_get, _globalmapper.GM_AsciiFormatInfo_t_mOffsetX_set, doc=r"""mOffsetX : double""")
    mOffsetY = property(_globalmapper.GM_AsciiFormatInfo_t_mOffsetY_get, _globalmapper.GM_AsciiFormatInfo_t_mOffsetY_set, doc=r"""mOffsetY : double""")
    mOffsetZ = property(_globalmapper.GM_AsciiFormatInfo_t_mOffsetZ_get, _globalmapper.GM_AsciiFormatInfo_t_mOffsetZ_set, doc=r"""mOffsetZ : double""")
    mScaleX = property(_globalmapper.GM_AsciiFormatInfo_t_mScaleX_get, _globalmapper.GM_AsciiFormatInfo_t_mScaleX_set, doc=r"""mScaleX : double""")
    mScaleY = property(_globalmapper.GM_AsciiFormatInfo_t_mScaleY_get, _globalmapper.GM_AsciiFormatInfo_t_mScaleY_set, doc=r"""mScaleY : double""")
    mScaleZ = property(_globalmapper.GM_AsciiFormatInfo_t_mScaleZ_get, _globalmapper.GM_AsciiFormatInfo_t_mScaleZ_set, doc=r"""mScaleZ : double""")
    mNoDataDistanceFactor = property(_globalmapper.GM_AsciiFormatInfo_t_mNoDataDistanceFactor_get, _globalmapper.GM_AsciiFormatInfo_t_mNoDataDistanceFactor_set, doc=r"""mNoDataDistanceFactor : double""")
    mBreakOnColumnIdx = property(_globalmapper.GM_AsciiFormatInfo_t_mBreakOnColumnIdx_get, _globalmapper.GM_AsciiFormatInfo_t_mBreakOnColumnIdx_set, doc=r"""mBreakOnColumnIdx : p.uint8""")
    mCoordFormat = property(_globalmapper.GM_AsciiFormatInfo_t_mCoordFormat_get, _globalmapper.GM_AsciiFormatInfo_t_mCoordFormat_set, doc=r"""mCoordFormat : GM_AsciiCoordFormat_t8""")

    def __init__(self):
        r"""__init__(GM_AsciiFormatInfo_t self) -> GM_AsciiFormatInfo_t"""
        _globalmapper.GM_AsciiFormatInfo_t_swiginit(self, _globalmapper.new_GM_AsciiFormatInfo_t())
    __swig_destroy__ = _globalmapper.delete_GM_AsciiFormatInfo_t


# Register GM_AsciiFormatInfo_t in _globalmapper:
_globalmapper.GM_AsciiFormatInfo_t_swigregister(GM_AsciiFormatInfo_t)

GM_GridGen_NoConstraints = _globalmapper.GM_GridGen_NoConstraints

GM_GridGen_FlattenAreas = _globalmapper.GM_GridGen_FlattenAreas

GM_GridGen_FillToBounds = _globalmapper.GM_GridGen_FillToBounds

GM_GridGen_IgnoreZeroElevs = _globalmapper.GM_GridGen_IgnoreZeroElevs

GM_GridGen_HeightsRelative = _globalmapper.GM_GridGen_HeightsRelative

GM_GridGen_CropToAreasIfAllAreas = _globalmapper.GM_GridGen_CropToAreasIfAllAreas

GM_GridGen_IncludeStreams = _globalmapper.GM_GridGen_IncludeStreams

GM_GridGen_SelAreasOnly = _globalmapper.GM_GridGen_SelAreasOnly

GM_GridGen_AreaVertexRelativeOnly = _globalmapper.GM_GridGen_AreaVertexRelativeOnly

GM_GridGen_RelativeRequireValid = _globalmapper.GM_GridGen_RelativeRequireValid

GM_GridGen_SaveGroundHeight = _globalmapper.GM_GridGen_SaveGroundHeight

GM_GridGen_CreateLidarImage = _globalmapper.GM_GridGen_CreateLidarImage

GM_GridGen_ApplyLidarBreaklines = _globalmapper.GM_GridGen_ApplyLidarBreaklines

GM_GridGen_IgnoreTypeFilters = _globalmapper.GM_GridGen_IgnoreTypeFilters

GM_GridGen_TinAreasOnly = _globalmapper.GM_GridGen_TinAreasOnly

GM_GridGen_HideProgress = _globalmapper.GM_GridGen_HideProgress

GM_LidarGrid_Elevation = _globalmapper.GM_LidarGrid_Elevation

GM_LidarGrid_Intensity = _globalmapper.GM_LidarGrid_Intensity

GM_LidarGrid_Height = _globalmapper.GM_LidarGrid_Height

GM_LidarGrid_ColorRGB = _globalmapper.GM_LidarGrid_ColorRGB

GM_LidarGrid_ColorRGBI_NIR = _globalmapper.GM_LidarGrid_ColorRGBI_NIR

GM_LidarGrid_ColorRGBI_Intensity = _globalmapper.GM_LidarGrid_ColorRGBI_Intensity

GM_LidarGrid_Class = _globalmapper.GM_LidarGrid_Class

GM_LidarGrid_Density = _globalmapper.GM_LidarGrid_Density

GM_LidarGrid_NDVI = _globalmapper.GM_LidarGrid_NDVI

GM_LidarGrid_NDWI = _globalmapper.GM_LidarGrid_NDWI

GM_LidarGrid_Red = _globalmapper.GM_LidarGrid_Red

GM_LidarGrid_Green = _globalmapper.GM_LidarGrid_Green

GM_LidarGrid_Blue = _globalmapper.GM_LidarGrid_Blue

GM_LidarGrid_NIR = _globalmapper.GM_LidarGrid_NIR

GM_LidarGrid_ScanAngle = _globalmapper.GM_LidarGrid_ScanAngle

GM_LidarGrid_PointSourceID = _globalmapper.GM_LidarGrid_PointSourceID

GM_LidarGrid_UserData = _globalmapper.GM_LidarGrid_UserData

GM_LidarGrid_ScannerChannel = _globalmapper.GM_LidarGrid_ScannerChannel

GM_LidarGrid_NumPointsInCell = _globalmapper.GM_LidarGrid_NumPointsInCell

GM_LidarGrid_Generic = _globalmapper.GM_LidarGrid_Generic

GM_LidarGrid_GenericUncertainty = _globalmapper.GM_LidarGrid_GenericUncertainty

GM_LidarGrid_NumTypes = _globalmapper.GM_LidarGrid_NumTypes

GM_GridAlg_TIN = _globalmapper.GM_GridAlg_TIN

GM_GridAlg_BinMinimum = _globalmapper.GM_GridAlg_BinMinimum

GM_GridAlg_BinAverage = _globalmapper.GM_GridAlg_BinAverage

GM_GridAlg_BinMaximum = _globalmapper.GM_GridAlg_BinMaximum

GM_GridAlg_BinMedian = _globalmapper.GM_GridAlg_BinMedian

GM_GridAlg_BinVariance = _globalmapper.GM_GridAlg_BinVariance

GM_GridAlg_BinFromMaxElev = _globalmapper.GM_GridAlg_BinFromMaxElev

GM_GridAlg_BinFromMinElev = _globalmapper.GM_GridAlg_BinFromMinElev

GM_GridAlg_Krige = _globalmapper.GM_GridAlg_Krige

GM_GridAlg_NumTypes = _globalmapper.GM_GridAlg_NumTypes

GM_GridAlg_None = _globalmapper.GM_GridAlg_None

GM_GridAlg_Default = _globalmapper.GM_GridAlg_Default

GM_GridAlg_DefaultLidar = _globalmapper.GM_GridAlg_DefaultLidar

GM_GapFillAlg_None = _globalmapper.GM_GapFillAlg_None

GM_GapFillAlg_TinSample = _globalmapper.GM_GapFillAlg_TinSample

GM_GapFillAlg_IDW = _globalmapper.GM_GapFillAlg_IDW

GM_GapFillAlg_Kriging = _globalmapper.GM_GapFillAlg_Kriging

GM_GapFillAlg_NearestNeighbor = _globalmapper.GM_GapFillAlg_NearestNeighbor

GM_GapFillAlg_NaturalNeighbor = _globalmapper.GM_GapFillAlg_NaturalNeighbor

GM_GapFillAlg_NumTypes = _globalmapper.GM_GapFillAlg_NumTypes

GM_GapFillAlg_Default = _globalmapper.GM_GapFillAlg_Default

[docs]
class GM_FillGapsParams_t(object):
    r"""Proxy of C++ GM_FillGapsParams_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(GM_FillGapsParams_t self) -> GM_FillGapsParams_t"""
        _globalmapper.GM_FillGapsParams_t_swiginit(self, _globalmapper.new_GM_FillGapsParams_t())
    mGridAlg = property(_globalmapper.GM_FillGapsParams_t_mGridAlg_get, _globalmapper.GM_FillGapsParams_t_mGridAlg_set, doc=r"""mGridAlg : GM_GridAlg_t8""")
    mGapAlg = property(_globalmapper.GM_FillGapsParams_t_mGapAlg_get, _globalmapper.GM_FillGapsParams_t_mGapAlg_set, doc=r"""mGapAlg : GM_GridGapFillAlg_t8""")
    mDirsToRequire = property(_globalmapper.GM_FillGapsParams_t_mDirsToRequire_get, _globalmapper.GM_FillGapsParams_t_mDirsToRequire_set, doc=r"""mDirsToRequire : uint32""")
    mMaxThreads = property(_globalmapper.GM_FillGapsParams_t_mMaxThreads_get, _globalmapper.GM_FillGapsParams_t_mMaxThreads_set, doc=r"""mMaxThreads : uint32""")
    mMaxDist = property(_globalmapper.GM_FillGapsParams_t_mMaxDist_get, _globalmapper.GM_FillGapsParams_t_mMaxDist_set, doc=r"""mMaxDist : uint32""")
    mMinDist = property(_globalmapper.GM_FillGapsParams_t_mMinDist_get, _globalmapper.GM_FillGapsParams_t_mMinDist_set, doc=r"""mMinDist : uint32""")
    mMaxPointCount = property(_globalmapper.GM_FillGapsParams_t_mMaxPointCount_get, _globalmapper.GM_FillGapsParams_t_mMaxPointCount_set, doc=r"""mMaxPointCount : uint32""")
    mPowerParameter = property(_globalmapper.GM_FillGapsParams_t_mPowerParameter_get, _globalmapper.GM_FillGapsParams_t_mPowerParameter_set, doc=r"""mPowerParameter : uint32""")

    def __repr__( self ) :
        return str( gmobject_to_map( self ) )

    __swig_destroy__ = _globalmapper.delete_GM_FillGapsParams_t


# Register GM_FillGapsParams_t in _globalmapper:
_globalmapper.GM_FillGapsParams_t_swigregister(GM_FillGapsParams_t)

GM_GRID_DFLT_BIN_SIZE = _globalmapper.GM_GRID_DFLT_BIN_SIZE

GM_GRID_DFLT_BIN_GAP_FILL_SIZE = _globalmapper.GM_GRID_DFLT_BIN_GAP_FILL_SIZE

GM_GRID_FILL_ALL_GAPS = _globalmapper.GM_GRID_FILL_ALL_GAPS

GM_GRID_DISABLE_GAP_FILL = _globalmapper.GM_GRID_DISABLE_GAP_FILL

[docs]
class GM_GridGenSetup_t(object):
    r"""Proxy of C++ GM_GridGenSetup_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    mDesc = property(_globalmapper.GM_GridGenSetup_t_mDesc_get, _globalmapper.GM_GridGenSetup_t_mDesc_set, doc=r"""mDesc : p.q(const).char""")
    mFlags = property(_globalmapper.GM_GridGenSetup_t_mFlags_get, _globalmapper.GM_GridGenSetup_t_mFlags_set, doc=r"""mFlags : GM_GridGenFlags_t32""")
    mXRes = property(_globalmapper.GM_GridGenSetup_t_mXRes_get, _globalmapper.GM_GridGenSetup_t_mXRes_set, doc=r"""mXRes : double""")
    mYRes = property(_globalmapper.GM_GridGenSetup_t_mYRes_get, _globalmapper.GM_GridGenSetup_t_mYRes_set, doc=r"""mYRes : double""")
    mElevUnits = property(_globalmapper.GM_GridGenSetup_t_mElevUnits_get, _globalmapper.GM_GridGenSetup_t_mElevUnits_set, doc=r"""mElevUnits : UNIT""")
    mGridAlg = property(_globalmapper.GM_GridGenSetup_t_mGridAlg_get, _globalmapper.GM_GridGenSetup_t_mGridAlg_set, doc=r"""mGridAlg : GM_GridAlg_t8""")
    mLidarField = property(_globalmapper.GM_GridGenSetup_t_mLidarField_get, _globalmapper.GM_GridGenSetup_t_mLidarField_set, doc=r"""mLidarField : GM_LidarGridField_t8""")
    mBandType = property(_globalmapper.GM_GridGenSetup_t_mBandType_get, _globalmapper.GM_GridGenSetup_t_mBandType_set, doc=r"""mBandType : GM_BandValType_t8""")
    mLidarBreaklineBinMult = property(_globalmapper.GM_GridGenSetup_t_mLidarBreaklineBinMult_get, _globalmapper.GM_GridGenSetup_t_mLidarBreaklineBinMult_set, doc=r"""mLidarBreaklineBinMult : uint8""")
    mBounds = property(_globalmapper.GM_GridGenSetup_t_mBounds_get, _globalmapper.GM_GridGenSetup_t_mBounds_set, doc=r"""mBounds : p.q(const).GM_Rectangle_t""")
    mTightnessMult = property(_globalmapper.GM_GridGenSetup_t_mTightnessMult_get, _globalmapper.GM_GridGenSetup_t_mTightnessMult_set, doc=r"""mTightnessMult : double""")
    mGridBinMult = property(_globalmapper.GM_GridGenSetup_t_mGridBinMult_get, _globalmapper.GM_GridGenSetup_t_mGridBinMult_set, doc=r"""mGridBinMult : double""")
    mTaperValue = property(_globalmapper.GM_GridGenSetup_t_mTaperValue_get, _globalmapper.GM_GridGenSetup_t_mTaperValue_set, doc=r"""mTaperValue : double""")
    mGapFillSetup = property(_globalmapper.GM_GridGenSetup_t_mGapFillSetup_get, _globalmapper.GM_GridGenSetup_t_mGapFillSetup_set, doc=r"""mGapFillSetup : p.q(const).GM_FillGapsParams_t""")

    def __init__(self):
        r"""__init__(GM_GridGenSetup_t self) -> GM_GridGenSetup_t"""
        _globalmapper.GM_GridGenSetup_t_swiginit(self, _globalmapper.new_GM_GridGenSetup_t())

    def __repr__( self ) :
        return str( gmobject_to_map( self ) )

    __swig_destroy__ = _globalmapper.delete_GM_GridGenSetup_t


# Register GM_GridGenSetup_t in _globalmapper:
_globalmapper.GM_GridGenSetup_t_swigregister(GM_GridGenSetup_t)

GM_CombineOp_Add = _globalmapper.GM_CombineOp_Add

GM_CombineOp_SubtractSigned = _globalmapper.GM_CombineOp_SubtractSigned

GM_CombineOp_SubtractUnsigned = _globalmapper.GM_CombineOp_SubtractUnsigned

GM_CombineOp_Average = _globalmapper.GM_CombineOp_Average

GM_CombineOp_Minimum = _globalmapper.GM_CombineOp_Minimum

GM_CombineOp_Maximum = _globalmapper.GM_CombineOp_Maximum

GM_CombineOp_Multiply = _globalmapper.GM_CombineOp_Multiply

GM_CombineOp_Divide = _globalmapper.GM_CombineOp_Divide

GM_CombineOp_FilterKeepFirstIfSecond = _globalmapper.GM_CombineOp_FilterKeepFirstIfSecond

GM_CombineOp_KeepFirstIfGTSecond = _globalmapper.GM_CombineOp_KeepFirstIfGTSecond

GM_CombineOp_KeepFirstIfLTSecond = _globalmapper.GM_CombineOp_KeepFirstIfLTSecond

GM_CombineOp_KeepFirstIfSecondGTVal = _globalmapper.GM_CombineOp_KeepFirstIfSecondGTVal

GM_CombineOp_KeepFirstIfSecondLTVal = _globalmapper.GM_CombineOp_KeepFirstIfSecondLTVal

GM_CombineOp_FilterKeepFirstIfNotSecond = _globalmapper.GM_CombineOp_FilterKeepFirstIfNotSecond

GM_CombineOp_CountValid = _globalmapper.GM_CombineOp_CountValid

GM_CombineOp_NumTypes = _globalmapper.GM_CombineOp_NumTypes

GM_CombineOp_FillGaps = _globalmapper.GM_CombineOp_FillGaps

GM_CombineOp_HideProgress = _globalmapper.GM_CombineOp_HideProgress

GM_CombineOp_FindOverlap = _globalmapper.GM_CombineOp_FindOverlap

[docs]
class GM_GridCombineSetup_t(object):
    r"""Proxy of C++ GM_GridCombineSetup_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __repr__( self ) :
        return str( gmobject_to_map( self ) )

    mCombineOp = property(_globalmapper.GM_GridCombineSetup_t_mCombineOp_get, _globalmapper.GM_GridCombineSetup_t_mCombineOp_set, doc=r"""mCombineOp : GM_CombineOp_t8""")
    mLayer1 = property(_globalmapper.GM_GridCombineSetup_t_mLayer1_get, _globalmapper.GM_GridCombineSetup_t_mLayer1_set, doc=r"""mLayer1 : GM_LayerHandle_t32""")
    mLayer2 = property(_globalmapper.GM_GridCombineSetup_t_mLayer2_get, _globalmapper.GM_GridCombineSetup_t_mLayer2_set, doc=r"""mLayer2 : GM_LayerHandle_t32""")
    mRectBounds = property(_globalmapper.GM_GridCombineSetup_t_mRectBounds_get, _globalmapper.GM_GridCombineSetup_t_mRectBounds_set, doc=r"""mRectBounds : GM_Rectangle_t""")
    mXRes = property(_globalmapper.GM_GridCombineSetup_t_mXRes_get, _globalmapper.GM_GridCombineSetup_t_mXRes_set, doc=r"""mXRes : double""")
    mYRes = property(_globalmapper.GM_GridCombineSetup_t_mYRes_get, _globalmapper.GM_GridCombineSetup_t_mYRes_set, doc=r"""mYRes : double""")
    mDesc = property(_globalmapper.GM_GridCombineSetup_t_mDesc_get, _globalmapper.GM_GridCombineSetup_t_mDesc_set, doc=r"""mDesc : p.q(const).char""")
    mFlags = property(_globalmapper.GM_GridCombineSetup_t_mFlags_get, _globalmapper.GM_GridCombineSetup_t_mFlags_set, doc=r"""mFlags : GM_CombineOpFlags_t32""")
    mElevUnits = property(_globalmapper.GM_GridCombineSetup_t_mElevUnits_get, _globalmapper.GM_GridCombineSetup_t_mElevUnits_set, doc=r"""mElevUnits : GM_ElevUnits_t8""")
    mCompareVal = property(_globalmapper.GM_GridCombineSetup_t_mCompareVal_get, _globalmapper.GM_GridCombineSetup_t_mCompareVal_set, doc=r"""mCompareVal : float""")

    def __init__(self):
        r"""__init__(GM_GridCombineSetup_t self) -> GM_GridCombineSetup_t"""
        _globalmapper.GM_GridCombineSetup_t_swiginit(self, _globalmapper.new_GM_GridCombineSetup_t())
    __swig_destroy__ = _globalmapper.delete_GM_GridCombineSetup_t


# Register GM_GridCombineSetup_t in _globalmapper:
_globalmapper.GM_GridCombineSetup_t_swigregister(GM_GridCombineSetup_t)

GM_Datum_Molodensky = _globalmapper.GM_Datum_Molodensky

GM_Datum_BursaWolfe = _globalmapper.GM_Datum_BursaWolfe

GM_Datum_NumXFormMethods = _globalmapper.GM_Datum_NumXFormMethods

[docs]
class GM_DatumInfo_t(object):
    r"""Proxy of C++ GM_DatumInfo_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __repr__( self ) :
        return str( gmobject_to_map( self ) )

    mMethod = property(_globalmapper.GM_DatumInfo_t_mMethod_get, _globalmapper.GM_DatumInfo_t_mMethod_set, doc=r"""mMethod : GM_DatumXForm_t32""")
    mDatumName = property(_globalmapper.GM_DatumInfo_t_mDatumName_get, _globalmapper.GM_DatumInfo_t_mDatumName_set, doc=r"""mDatumName : p.q(const).char""")
    mEllipsoidName = property(_globalmapper.GM_DatumInfo_t_mEllipsoidName_get, _globalmapper.GM_DatumInfo_t_mEllipsoidName_set, doc=r"""mEllipsoidName : p.q(const).char""")
    mDeltaX = property(_globalmapper.GM_DatumInfo_t_mDeltaX_get, _globalmapper.GM_DatumInfo_t_mDeltaX_set, doc=r"""mDeltaX : double""")
    mDeltaY = property(_globalmapper.GM_DatumInfo_t_mDeltaY_get, _globalmapper.GM_DatumInfo_t_mDeltaY_set, doc=r"""mDeltaY : double""")
    mDeltaZ = property(_globalmapper.GM_DatumInfo_t_mDeltaZ_get, _globalmapper.GM_DatumInfo_t_mDeltaZ_set, doc=r"""mDeltaZ : double""")
    mScale = property(_globalmapper.GM_DatumInfo_t_mScale_get, _globalmapper.GM_DatumInfo_t_mScale_set, doc=r"""mScale : double""")
    mRotX = property(_globalmapper.GM_DatumInfo_t_mRotX_get, _globalmapper.GM_DatumInfo_t_mRotX_set, doc=r"""mRotX : double""")
    mRotY = property(_globalmapper.GM_DatumInfo_t_mRotY_get, _globalmapper.GM_DatumInfo_t_mRotY_set, doc=r"""mRotY : double""")
    mRotZ = property(_globalmapper.GM_DatumInfo_t_mRotZ_get, _globalmapper.GM_DatumInfo_t_mRotZ_set, doc=r"""mRotZ : double""")
    mPrimeMeridian = property(_globalmapper.GM_DatumInfo_t_mPrimeMeridian_get, _globalmapper.GM_DatumInfo_t_mPrimeMeridian_set, doc=r"""mPrimeMeridian : double""")
    mPrimeMeridianName = property(_globalmapper.GM_DatumInfo_t_mPrimeMeridianName_get, _globalmapper.GM_DatumInfo_t_mPrimeMeridianName_set, doc=r"""mPrimeMeridianName : p.q(const).char""")
    mSemiMajor = property(_globalmapper.GM_DatumInfo_t_mSemiMajor_get, _globalmapper.GM_DatumInfo_t_mSemiMajor_set, doc=r"""mSemiMajor : double""")
    mSemiMinor = property(_globalmapper.GM_DatumInfo_t_mSemiMinor_get, _globalmapper.GM_DatumInfo_t_mSemiMinor_set, doc=r"""mSemiMinor : double""")

    def __init__(self):
        r"""__init__(GM_DatumInfo_t self) -> GM_DatumInfo_t"""
        _globalmapper.GM_DatumInfo_t_swiginit(self, _globalmapper.new_GM_DatumInfo_t())
    __swig_destroy__ = _globalmapper.delete_GM_DatumInfo_t


# Register GM_DatumInfo_t in _globalmapper:
_globalmapper.GM_DatumInfo_t_swigregister(GM_DatumInfo_t)

[docs]
class GM_ElevColor_t(object):
    r"""Proxy of C++ GM_ElevColor_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __repr__( self ) :
        return str( gmobject_to_map( self ) )

    mElev = property(_globalmapper.GM_ElevColor_t_mElev_get, _globalmapper.GM_ElevColor_t_mElev_set, doc=r"""mElev : float""")
    mColor = property(_globalmapper.GM_ElevColor_t_mColor_get, _globalmapper.GM_ElevColor_t_mColor_set, doc=r"""mColor : COLORREF""")

    def __init__(self):
        r"""__init__(GM_ElevColor_t self) -> GM_ElevColor_t"""
        _globalmapper.GM_ElevColor_t_swiginit(self, _globalmapper.new_GM_ElevColor_t())
    __swig_destroy__ = _globalmapper.delete_GM_ElevColor_t


# Register GM_ElevColor_t in _globalmapper:
_globalmapper.GM_ElevColor_t_swigregister(GM_ElevColor_t)

GM_CustomShader_DontBlend = _globalmapper.GM_CustomShader_DontBlend

GM_CustomShader_StretchToRange = _globalmapper.GM_CustomShader_StretchToRange

GM_CustomShader_ShadeSlopes = _globalmapper.GM_CustomShader_ShadeSlopes

[docs]
class GM_CustomShader_t(object):
    r"""Proxy of C++ GM_CustomShader_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __repr__( self ) :
        attribs = gmobject_to_map( self )
        attribs['mElevColorList'] = carray_to_list(GM_ElevColor_array_frompointer( self.mElevColorList ), self.mNumElevs)

        return str( attribs )

    mShaderName = property(_globalmapper.GM_CustomShader_t_mShaderName_get, _globalmapper.GM_CustomShader_t_mShaderName_set, doc=r"""mShaderName : p.q(const).char""")
    mFlags = property(_globalmapper.GM_CustomShader_t_mFlags_get, _globalmapper.GM_CustomShader_t_mFlags_set, doc=r"""mFlags : GM_CustomShaderFlags_t32""")
    mNumElevs = property(_globalmapper.GM_CustomShader_t_mNumElevs_get, _globalmapper.GM_CustomShader_t_mNumElevs_set, doc=r"""mNumElevs : uint32""")
    mElevColorList = property(_globalmapper.GM_CustomShader_t_mElevColorList_get, _globalmapper.GM_CustomShader_t_mElevColorList_set, doc=r"""mElevColorList : p.GM_ElevColor_t""")

    def __init__(self):
        r"""__init__(GM_CustomShader_t self) -> GM_CustomShader_t"""
        _globalmapper.GM_CustomShader_t_swiginit(self, _globalmapper.new_GM_CustomShader_t())
    __swig_destroy__ = _globalmapper.delete_GM_CustomShader_t


# Register GM_CustomShader_t in _globalmapper:
_globalmapper.GM_CustomShader_t_swigregister(GM_CustomShader_t)

GM_WebExport_NoTransparency = _globalmapper.GM_WebExport_NoTransparency

GM_WebExport_DisplayResults = _globalmapper.GM_WebExport_DisplayResults

GM_WebExport_HideProgress = _globalmapper.GM_WebExport_HideProgress

GM_WebExport_AddScaleBar = _globalmapper.GM_WebExport_AddScaleBar

GM_WebExport_AddMapTypeControl = _globalmapper.GM_WebExport_AddMapTypeControl

GM_WebExport_AddOverviewMap = _globalmapper.GM_WebExport_AddOverviewMap

GM_WebExport_AutoGrid = _globalmapper.GM_WebExport_AutoGrid

GM_WebExport_SkipEmptyTiles = _globalmapper.GM_WebExport_SkipEmptyTiles

GM_WebExport_WWUseJavaFilenames = _globalmapper.GM_WebExport_WWUseJavaFilenames

GM_WebExport_WWTransparentTiles = _globalmapper.GM_WebExport_WWTransparentTiles

GM_WebExport_SkipExistingTiles = _globalmapper.GM_WebExport_SkipExistingTiles

GM_WebExport_FillToTileBounds = _globalmapper.GM_WebExport_FillToTileBounds

GM_WebExport_NoHtmlFile = _globalmapper.GM_WebExport_NoHtmlFile

GM_WebExport_ForcePalettePNG = _globalmapper.GM_WebExport_ForcePalettePNG

GM_WebExport_DontDeleteCancel = _globalmapper.GM_WebExport_DontDeleteCancel

GM_WebExport_OnlyGetTileCount = _globalmapper.GM_WebExport_OnlyGetTileCount

GM_WebExport_SaveVectorData = _globalmapper.GM_WebExport_SaveVectorData

GM_WebExport_GenWorldFiles = _globalmapper.GM_WebExport_GenWorldFiles

GM_WebExport_FullTilesOnly = _globalmapper.GM_WebExport_FullTilesOnly

GM_WebExport_ForceTransPNG = _globalmapper.GM_WebExport_ForceTransPNG

GM_WebExport_CreateRowFolders = _globalmapper.GM_WebExport_CreateRowFolders

GM_WebExport_ClampToDataRes = _globalmapper.GM_WebExport_ClampToDataRes

GM_WebExport_LatLonWGS84Tiles = _globalmapper.GM_WebExport_LatLonWGS84Tiles

GM_WebExport_AllowTileFillCrop = _globalmapper.GM_WebExport_AllowTileFillCrop

GM_WebExport_AddPanControl = _globalmapper.GM_WebExport_AddPanControl

GM_WebExport_AddStreetView = _globalmapper.GM_WebExport_AddStreetView

GM_WebExport_AddZoomCtrl = _globalmapper.GM_WebExport_AddZoomCtrl

[docs]
class GM_WebFormatExportOpts_t(object):
    r"""Proxy of C++ GM_WebFormatExportOpts_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __repr__( self ) :
        return str( gmobject_to_map( self ) )

    mMapName = property(_globalmapper.GM_WebFormatExportOpts_t_mMapName_get, _globalmapper.GM_WebFormatExportOpts_t_mMapName_set, doc=r"""mMapName : p.q(const).char""")
    mMaxZoomLevel = property(_globalmapper.GM_WebFormatExportOpts_t_mMaxZoomLevel_get, _globalmapper.GM_WebFormatExportOpts_t_mMaxZoomLevel_set, doc=r"""mMaxZoomLevel : sint32""")
    mNumZoomLevels = property(_globalmapper.GM_WebFormatExportOpts_t_mNumZoomLevels_get, _globalmapper.GM_WebFormatExportOpts_t_mNumZoomLevels_set, doc=r"""mNumZoomLevels : uint32""")
    mFormat = property(_globalmapper.GM_WebFormatExportOpts_t_mFormat_get, _globalmapper.GM_WebFormatExportOpts_t_mFormat_set, doc=r"""mFormat : GM_RasterExportFormat_t32""")
    mFlags = property(_globalmapper.GM_WebFormatExportOpts_t_mFlags_get, _globalmapper.GM_WebFormatExportOpts_t_mFlags_set, doc=r"""mFlags : GM_WebExportFlags_t32""")
    mApiKey = property(_globalmapper.GM_WebFormatExportOpts_t_mApiKey_get, _globalmapper.GM_WebFormatExportOpts_t_mApiKey_set, doc=r"""mApiKey : p.q(const).char""")
    mBgMapName = property(_globalmapper.GM_WebFormatExportOpts_t_mBgMapName_get, _globalmapper.GM_WebFormatExportOpts_t_mBgMapName_set, doc=r"""mBgMapName : p.q(const).char""")
    mTranslucency = property(_globalmapper.GM_WebFormatExportOpts_t_mTranslucency_get, _globalmapper.GM_WebFormatExportOpts_t_mTranslucency_set, doc=r"""mTranslucency : double""")
    mXRes = property(_globalmapper.GM_WebFormatExportOpts_t_mXRes_get, _globalmapper.GM_WebFormatExportOpts_t_mXRes_set, doc=r"""mXRes : double""")
    mYRes = property(_globalmapper.GM_WebFormatExportOpts_t_mYRes_get, _globalmapper.GM_WebFormatExportOpts_t_mYRes_set, doc=r"""mYRes : double""")
    mWWTilePath = property(_globalmapper.GM_WebFormatExportOpts_t_mWWTilePath_get, _globalmapper.GM_WebFormatExportOpts_t_mWWTilePath_set, doc=r"""mWWTilePath : p.q(const).char""")
    mTileCount = property(_globalmapper.GM_WebFormatExportOpts_t_mTileCount_get, _globalmapper.GM_WebFormatExportOpts_t_mTileCount_set, doc=r"""mTileCount : p.uint32""")
    mCustomTileFName = property(_globalmapper.GM_WebFormatExportOpts_t_mCustomTileFName_get, _globalmapper.GM_WebFormatExportOpts_t_mCustomTileFName_set, doc=r"""mCustomTileFName : p.q(const).char""")
    mMapDescription = property(_globalmapper.GM_WebFormatExportOpts_t_mMapDescription_get, _globalmapper.GM_WebFormatExportOpts_t_mMapDescription_set, doc=r"""mMapDescription : p.q(const).char""")
    mMapType = property(_globalmapper.GM_WebFormatExportOpts_t_mMapType_get, _globalmapper.GM_WebFormatExportOpts_t_mMapType_set, doc=r"""mMapType : p.q(const).char""")
    mTileSize = property(_globalmapper.GM_WebFormatExportOpts_t_mTileSize_get, _globalmapper.GM_WebFormatExportOpts_t_mTileSize_set, doc=r"""mTileSize : uint32""")

    def __init__(self):
        r"""__init__(GM_WebFormatExportOpts_t self) -> GM_WebFormatExportOpts_t"""
        _globalmapper.GM_WebFormatExportOpts_t_swiginit(self, _globalmapper.new_GM_WebFormatExportOpts_t())
    __swig_destroy__ = _globalmapper.delete_GM_WebFormatExportOpts_t


# Register GM_WebFormatExportOpts_t in _globalmapper:
_globalmapper.GM_WebFormatExportOpts_t_swigregister(GM_WebFormatExportOpts_t)

[docs]
class GM_ExportOptsGeoPackage_t(object):
    r"""Proxy of C++ GM_ExportOptsGeoPackage_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(GM_ExportOptsGeoPackage_t self) -> GM_ExportOptsGeoPackage_t"""
        _globalmapper.GM_ExportOptsGeoPackage_t_swiginit(self, _globalmapper.new_GM_ExportOptsGeoPackage_t())
    mOverwriteExisting = property(_globalmapper.GM_ExportOptsGeoPackage_t_mOverwriteExisting_get, _globalmapper.GM_ExportOptsGeoPackage_t_mOverwriteExisting_set, doc=r"""mOverwriteExisting : boolean""")
    mAreaTableName = property(_globalmapper.GM_ExportOptsGeoPackage_t_mAreaTableName_get, _globalmapper.GM_ExportOptsGeoPackage_t_mAreaTableName_set, doc=r"""mAreaTableName : p.q(const).char""")
    mLineTableName = property(_globalmapper.GM_ExportOptsGeoPackage_t_mLineTableName_get, _globalmapper.GM_ExportOptsGeoPackage_t_mLineTableName_set, doc=r"""mLineTableName : p.q(const).char""")
    mPointTableName = property(_globalmapper.GM_ExportOptsGeoPackage_t_mPointTableName_get, _globalmapper.GM_ExportOptsGeoPackage_t_mPointTableName_set, doc=r"""mPointTableName : p.q(const).char""")
    mSplitByLayer = property(_globalmapper.GM_ExportOptsGeoPackage_t_mSplitByLayer_get, _globalmapper.GM_ExportOptsGeoPackage_t_mSplitByLayer_set, doc=r"""mSplitByLayer : boolean""")
    mGen3dFeatures = property(_globalmapper.GM_ExportOptsGeoPackage_t_mGen3dFeatures_get, _globalmapper.GM_ExportOptsGeoPackage_t_mGen3dFeatures_set, doc=r"""mGen3dFeatures : boolean""")
    mTileTableName = property(_globalmapper.GM_ExportOptsGeoPackage_t_mTileTableName_get, _globalmapper.GM_ExportOptsGeoPackage_t_mTileTableName_set, doc=r"""mTileTableName : p.q(const).char""")
    mDescription = property(_globalmapper.GM_ExportOptsGeoPackage_t_mDescription_get, _globalmapper.GM_ExportOptsGeoPackage_t_mDescription_set, doc=r"""mDescription : p.q(const).char""")
    mMaxZoomLevel = property(_globalmapper.GM_ExportOptsGeoPackage_t_mMaxZoomLevel_get, _globalmapper.GM_ExportOptsGeoPackage_t_mMaxZoomLevel_set, doc=r"""mMaxZoomLevel : sint32""")
    mNumZoomLevels = property(_globalmapper.GM_ExportOptsGeoPackage_t_mNumZoomLevels_get, _globalmapper.GM_ExportOptsGeoPackage_t_mNumZoomLevels_set, doc=r"""mNumZoomLevels : uint32""")
    mImageFormat = property(_globalmapper.GM_ExportOptsGeoPackage_t_mImageFormat_get, _globalmapper.GM_ExportOptsGeoPackage_t_mImageFormat_set, doc=r"""mImageFormat : GM_RasterExportFormat_t32""")
    mImageQuality = property(_globalmapper.GM_ExportOptsGeoPackage_t_mImageQuality_get, _globalmapper.GM_ExportOptsGeoPackage_t_mImageQuality_set, doc=r"""mImageQuality : uint32""")
    mTileSize = property(_globalmapper.GM_ExportOptsGeoPackage_t_mTileSize_get, _globalmapper.GM_ExportOptsGeoPackage_t_mTileSize_set, doc=r"""mTileSize : uint32""")
    mFlags = property(_globalmapper.GM_ExportOptsGeoPackage_t_mFlags_get, _globalmapper.GM_ExportOptsGeoPackage_t_mFlags_set, doc=r"""mFlags : GM_WebExportFlags_t32""")

    def __repr__( self ) :
        return str( gmobject_to_map( self ) )

    __swig_destroy__ = _globalmapper.delete_GM_ExportOptsGeoPackage_t


# Register GM_ExportOptsGeoPackage_t in _globalmapper:
_globalmapper.GM_ExportOptsGeoPackage_t_swigregister(GM_ExportOptsGeoPackage_t)

GM_AddFeature_UseDefaultStyle = _globalmapper.GM_AddFeature_UseDefaultStyle

GM_AddFeature_MoreAddsToFollow = _globalmapper.GM_AddFeature_MoreAddsToFollow

GM_GetFeature_UseLayerProj = _globalmapper.GM_GetFeature_UseLayerProj

GM_DontGetPolylineCoords = _globalmapper.GM_DontGetPolylineCoords

GM_CalcBearing_LatLon = _globalmapper.GM_CalcBearing_LatLon

GM_CalcBearing_TrueNorth = _globalmapper.GM_CalcBearing_TrueNorth

GM_CalcBearing_MagNorth = _globalmapper.GM_CalcBearing_MagNorth

GM_CalcBearing_GridNorth = _globalmapper.GM_CalcBearing_GridNorth

GM_KernelType_Gaussian = _globalmapper.GM_KernelType_Gaussian

GM_KernelType_Circle = _globalmapper.GM_KernelType_Circle

GM_KernelType_Epanechnikov = _globalmapper.GM_KernelType_Epanechnikov

GM_NumKernelTypes = _globalmapper.GM_NumKernelTypes

GM_DensityFlags_DisableProgress = _globalmapper.GM_DensityFlags_DisableProgress

[docs]
class GM_DensityGridParams_t(object):
    r"""Proxy of C++ GM_DensityGridParams_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __repr__( self ) :
        return str( gmobject_to_map( self ) )

    mFlags = property(_globalmapper.GM_DensityGridParams_t_mFlags_get, _globalmapper.GM_DensityGridParams_t_mFlags_set, doc=r"""mFlags : GM_DensityGridFlags_t32""")
    mKernelType = property(_globalmapper.GM_DensityGridParams_t_mKernelType_get, _globalmapper.GM_DensityGridParams_t_mKernelType_set, doc=r"""mKernelType : GM_DensityKernelType_t8""")
    mRadiusMeters = property(_globalmapper.GM_DensityGridParams_t_mRadiusMeters_get, _globalmapper.GM_DensityGridParams_t_mRadiusMeters_set, doc=r"""mRadiusMeters : double""")
    mCellsPerRadius = property(_globalmapper.GM_DensityGridParams_t_mCellsPerRadius_get, _globalmapper.GM_DensityGridParams_t_mCellsPerRadius_set, doc=r"""mCellsPerRadius : uint32""")
    mLayerDesc = property(_globalmapper.GM_DensityGridParams_t_mLayerDesc_get, _globalmapper.GM_DensityGridParams_t_mLayerDesc_set, doc=r"""mLayerDesc : p.q(const).char""")
    mField = property(_globalmapper.GM_DensityGridParams_t_mField_get, _globalmapper.GM_DensityGridParams_t_mField_set, doc=r"""mField : p.q(const).char""")
    mAreaUnits = property(_globalmapper.GM_DensityGridParams_t_mAreaUnits_get, _globalmapper.GM_DensityGridParams_t_mAreaUnits_set, doc=r"""mAreaUnits : GM_AreaUnits_t8""")
    mBoundingBox = property(_globalmapper.GM_DensityGridParams_t_mBoundingBox_get, _globalmapper.GM_DensityGridParams_t_mBoundingBox_set, doc=r"""mBoundingBox : GM_Rectangle_t""")

    def __init__(self):
        r"""__init__(GM_DensityGridParams_t self) -> GM_DensityGridParams_t"""
        _globalmapper.GM_DensityGridParams_t_swiginit(self, _globalmapper.new_GM_DensityGridParams_t())
    __swig_destroy__ = _globalmapper.delete_GM_DensityGridParams_t


# Register GM_DensityGridParams_t in _globalmapper:
_globalmapper.GM_DensityGridParams_t_swigregister(GM_DensityGridParams_t)

GM_Roughness_CorineSummer = _globalmapper.GM_Roughness_CorineSummer

GM_Roughness_CorineWinter = _globalmapper.GM_Roughness_CorineWinter

GM_Roughness_VCF = _globalmapper.GM_Roughness_VCF

GM_Roughness_NLCD = _globalmapper.GM_Roughness_NLCD

GM_Roughness_GlobCoverESA2009 = _globalmapper.GM_Roughness_GlobCoverESA2009

GM_Roughness_GlobeLand30 = _globalmapper.GM_Roughness_GlobeLand30

GM_Roughness_ESA_CCI = _globalmapper.GM_Roughness_ESA_CCI

GM_Roughness_GlobCoverESA2020 = _globalmapper.GM_Roughness_GlobCoverESA2020

GM_Roughness_NumTypes = _globalmapper.GM_Roughness_NumTypes

GM_RoughnessFlags_DisableProgress = _globalmapper.GM_RoughnessFlags_DisableProgress

GM_RoughnessFlags_DontFixInvalid = _globalmapper.GM_RoughnessFlags_DontFixInvalid

[docs]
class GM_RoughnessGridParams_t(object):
    r"""Proxy of C++ GM_RoughnessGridParams_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __repr__( self ) :
        return str( gmobject_to_map( self ) )

    mTable = property(_globalmapper.GM_RoughnessGridParams_t_mTable_get, _globalmapper.GM_RoughnessGridParams_t_mTable_set, doc=r"""mTable : GM_RoughnessTable_t""")
    mFlags = property(_globalmapper.GM_RoughnessGridParams_t_mFlags_get, _globalmapper.GM_RoughnessGridParams_t_mFlags_set, doc=r"""mFlags : GM_RoughnessGridFlags_t32""")
    mBounds = property(_globalmapper.GM_RoughnessGridParams_t_mBounds_get, _globalmapper.GM_RoughnessGridParams_t_mBounds_set, doc=r"""mBounds : GM_Rectangle_t""")
    mDesc = property(_globalmapper.GM_RoughnessGridParams_t_mDesc_get, _globalmapper.GM_RoughnessGridParams_t_mDesc_set, doc=r"""mDesc : p.q(const).char""")
    mXSpacing = property(_globalmapper.GM_RoughnessGridParams_t_mXSpacing_get, _globalmapper.GM_RoughnessGridParams_t_mXSpacing_set, doc=r"""mXSpacing : double""")
    mYSpacing = property(_globalmapper.GM_RoughnessGridParams_t_mYSpacing_get, _globalmapper.GM_RoughnessGridParams_t_mYSpacing_set, doc=r"""mYSpacing : double""")
    mCreateAreas = property(_globalmapper.GM_RoughnessGridParams_t_mCreateAreas_get, _globalmapper.GM_RoughnessGridParams_t_mCreateAreas_set, doc=r"""mCreateAreas : boolean""")

    def __init__(self):
        r"""__init__(GM_RoughnessGridParams_t self) -> GM_RoughnessGridParams_t"""
        _globalmapper.GM_RoughnessGridParams_t_swiginit(self, _globalmapper.new_GM_RoughnessGridParams_t())
    __swig_destroy__ = _globalmapper.delete_GM_RoughnessGridParams_t


# Register GM_RoughnessGridParams_t in _globalmapper:
_globalmapper.GM_RoughnessGridParams_t_swigregister(GM_RoughnessGridParams_t)

GM_MapLayout_Scale = _globalmapper.GM_MapLayout_Scale

GM_MapLayout_ElevLegend = _globalmapper.GM_MapLayout_ElevLegend

GM_MapLayout_MapLegend = _globalmapper.GM_MapLayout_MapLegend

GM_MapLayout_NumPieceTypes = _globalmapper.GM_MapLayout_NumPieceTypes

GM_Watershed_FillGaps = _globalmapper.GM_Watershed_FillGaps

GM_Watershed_CreateAreas = _globalmapper.GM_Watershed_CreateAreas

GM_Watershed_KeepZeroAtZero = _globalmapper.GM_Watershed_KeepZeroAtZero

GM_Watershed_SmoothStreams = _globalmapper.GM_Watershed_SmoothStreams

GM_Watershed_FindRidgeLines = _globalmapper.GM_Watershed_FindRidgeLines

[docs]
class GM_WatershedParams_t(object):
    r"""Proxy of C++ GM_WatershedParams_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __repr__( self ) :
        return str( gmobject_to_map( self ) )

    mFlags = property(_globalmapper.GM_WatershedParams_t_mFlags_get, _globalmapper.GM_WatershedParams_t_mFlags_set, doc=r"""mFlags : GM_WatershedFlags_32""")
    mBounds = property(_globalmapper.GM_WatershedParams_t_mBounds_get, _globalmapper.GM_WatershedParams_t_mBounds_set, doc=r"""mBounds : GM_Rectangle_t""")
    mDesc = property(_globalmapper.GM_WatershedParams_t_mDesc_get, _globalmapper.GM_WatershedParams_t_mDesc_set, doc=r"""mDesc : p.q(const).char""")
    mXSpacing = property(_globalmapper.GM_WatershedParams_t_mXSpacing_get, _globalmapper.GM_WatershedParams_t_mXSpacing_set, doc=r"""mXSpacing : double""")
    mYSpacing = property(_globalmapper.GM_WatershedParams_t_mYSpacing_get, _globalmapper.GM_WatershedParams_t_mYSpacing_set, doc=r"""mYSpacing : double""")
    mFilledDEMFilename = property(_globalmapper.GM_WatershedParams_t_mFilledDEMFilename_get, _globalmapper.GM_WatershedParams_t_mFilledDEMFilename_set, doc=r"""mFilledDEMFilename : p.q(const).char""")
    mMaxDepressionDepth = property(_globalmapper.GM_WatershedParams_t_mMaxDepressionDepth_get, _globalmapper.GM_WatershedParams_t_mMaxDepressionDepth_set, doc=r"""mMaxDepressionDepth : float""")
    mStreamThreshold = property(_globalmapper.GM_WatershedParams_t_mStreamThreshold_get, _globalmapper.GM_WatershedParams_t_mStreamThreshold_set, doc=r"""mStreamThreshold : uint32""")

    def __init__(self):
        r"""__init__(GM_WatershedParams_t self) -> GM_WatershedParams_t"""
        _globalmapper.GM_WatershedParams_t_swiginit(self, _globalmapper.new_GM_WatershedParams_t())
    __swig_destroy__ = _globalmapper.delete_GM_WatershedParams_t


# Register GM_WatershedParams_t in _globalmapper:
_globalmapper.GM_WatershedParams_t_swigregister(GM_WatershedParams_t)

GM_EqualValueArea_ForceRGB = _globalmapper.GM_EqualValueArea_ForceRGB

GM_EqualValueArea_Coverage = _globalmapper.GM_EqualValueArea_Coverage

GM_EqualValueArea_FixInvalid = _globalmapper.GM_EqualValueArea_FixInvalid

GM_EqualValueArea_BluntCorners = _globalmapper.GM_EqualValueArea_BluntCorners

GM_EqualValueArea_NoSlope = _globalmapper.GM_EqualValueArea_NoSlope

GM_EqualValueArea_UseElevRange = _globalmapper.GM_EqualValueArea_UseElevRange

GM_EqualValueArea_UseSlopeDir = _globalmapper.GM_EqualValueArea_UseSlopeDir

GM_EqualValueArea_BaseElevRangeZero = _globalmapper.GM_EqualValueArea_BaseElevRangeZero

[docs]
class GM_EqualValueAreaSetup_t(object):
    r"""Proxy of C++ GM_EqualValueAreaSetup_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(GM_EqualValueAreaSetup_t self) -> GM_EqualValueAreaSetup_t"""
        _globalmapper.GM_EqualValueAreaSetup_t_swiginit(self, _globalmapper.new_GM_EqualValueAreaSetup_t())
    mFlags = property(_globalmapper.GM_EqualValueAreaSetup_t_mFlags_get, _globalmapper.GM_EqualValueAreaSetup_t_mFlags_set, doc=r"""mFlags : GM_EqualValueAreaFlags_t32""")
    mValAttrName = property(_globalmapper.GM_EqualValueAreaSetup_t_mValAttrName_get, _globalmapper.GM_EqualValueAreaSetup_t_mValAttrName_set, doc=r"""mValAttrName : p.q(const).char""")
    mAreaType = property(_globalmapper.GM_EqualValueAreaSetup_t_mAreaType_get, _globalmapper.GM_EqualValueAreaSetup_t_mAreaType_set, doc=r"""mAreaType : AreaFeatureClass_t16""")
    mColorDist = property(_globalmapper.GM_EqualValueAreaSetup_t_mColorDist_get, _globalmapper.GM_EqualValueAreaSetup_t_mColorDist_set, doc=r"""mColorDist : sint32""")
    mElevDist = property(_globalmapper.GM_EqualValueAreaSetup_t_mElevDist_get, _globalmapper.GM_EqualValueAreaSetup_t_mElevDist_set, doc=r"""mElevDist : double""")
    mSlopeDist = property(_globalmapper.GM_EqualValueAreaSetup_t_mSlopeDist_get, _globalmapper.GM_EqualValueAreaSetup_t_mSlopeDist_set, doc=r"""mSlopeDist : double""")
    mBounds = property(_globalmapper.GM_EqualValueAreaSetup_t_mBounds_get, _globalmapper.GM_EqualValueAreaSetup_t_mBounds_set, doc=r"""mBounds : GM_Rectangle_t""")
    mColorList = property(_globalmapper.GM_EqualValueAreaSetup_t_mColorList_get, _globalmapper.GM_EqualValueAreaSetup_t_mColorList_set, doc=r"""mColorList : p.q(const).COLORREF""")
    mColorListSize = property(_globalmapper.GM_EqualValueAreaSetup_t_mColorListSize_get, _globalmapper.GM_EqualValueAreaSetup_t_mColorListSize_set, doc=r"""mColorListSize : uint32""")
    mValAttrFormat = property(_globalmapper.GM_EqualValueAreaSetup_t_mValAttrFormat_get, _globalmapper.GM_EqualValueAreaSetup_t_mValAttrFormat_set, doc=r"""mValAttrFormat : p.q(const).char""")
    mLayerDesc = property(_globalmapper.GM_EqualValueAreaSetup_t_mLayerDesc_get, _globalmapper.GM_EqualValueAreaSetup_t_mLayerDesc_set, doc=r"""mLayerDesc : p.q(const).char""")
    mElevRangeHigh = property(_globalmapper.GM_EqualValueAreaSetup_t_mElevRangeHigh_get, _globalmapper.GM_EqualValueAreaSetup_t_mElevRangeHigh_set, doc=r"""mElevRangeHigh : double""")
    mElevRangeLow = property(_globalmapper.GM_EqualValueAreaSetup_t_mElevRangeLow_get, _globalmapper.GM_EqualValueAreaSetup_t_mElevRangeLow_set, doc=r"""mElevRangeLow : double""")
    mMinHoleSizeSqM = property(_globalmapper.GM_EqualValueAreaSetup_t_mMinHoleSizeSqM_get, _globalmapper.GM_EqualValueAreaSetup_t_mMinHoleSizeSqM_set, doc=r"""mMinHoleSizeSqM : double""")
    mMinAreaSizeSqM = property(_globalmapper.GM_EqualValueAreaSetup_t_mMinAreaSizeSqM_get, _globalmapper.GM_EqualValueAreaSetup_t_mMinAreaSizeSqM_set, doc=r"""mMinAreaSizeSqM : double""")
    mSimplifyMult = property(_globalmapper.GM_EqualValueAreaSetup_t_mSimplifyMult_get, _globalmapper.GM_EqualValueAreaSetup_t_mSimplifyMult_set, doc=r"""mSimplifyMult : double""")
    mSmoothCount = property(_globalmapper.GM_EqualValueAreaSetup_t_mSmoothCount_get, _globalmapper.GM_EqualValueAreaSetup_t_mSmoothCount_set, doc=r"""mSmoothCount : uint8""")

    def __repr__( self ) :
        attr_map = gmobject_to_map( self )
        attr_map['mColorList'] = carray_to_list( COLORREF_array_frompointer( self.mColorList ), self.mColorListSize )

        return str(attr_map)

    __swig_destroy__ = _globalmapper.delete_GM_EqualValueAreaSetup_t


# Register GM_EqualValueAreaSetup_t in _globalmapper:
_globalmapper.GM_EqualValueAreaSetup_t_swigregister(GM_EqualValueAreaSetup_t)

GM_SourceType_WMS = _globalmapper.GM_SourceType_WMS

GM_SourceType_WMTS = _globalmapper.GM_SourceType_WMTS

GM_SourceType_WFS = _globalmapper.GM_SourceType_WFS

GM_SourceType_WCS = _globalmapper.GM_SourceType_WCS

GM_SourceType_IntermapWebSite = _globalmapper.GM_SourceType_IntermapWebSite

GM_SourceType_OSM = _globalmapper.GM_SourceType_OSM

GM_SourceType_TMS = _globalmapper.GM_SourceType_TMS

GM_SourceType_GoogleMaps = _globalmapper.GM_SourceType_GoogleMaps

GM_SourceType_SpatialOnDemand = _globalmapper.GM_SourceType_SpatialOnDemand

GM_SourceType_MapMart = _globalmapper.GM_SourceType_MapMart

GM_SourceType_IntermapGMS = _globalmapper.GM_SourceType_IntermapGMS

GM_SourceType_DigitalGlobeWMS = _globalmapper.GM_SourceType_DigitalGlobeWMS

GM_SourceType_ServerLimit = _globalmapper.GM_SourceType_ServerLimit

GM_SourceType_WebSite = _globalmapper.GM_SourceType_WebSite

GM_SourceType_External = _globalmapper.GM_SourceType_External

GM_SourceType_GvlfLidar = _globalmapper.GM_SourceType_GvlfLidar

GM_SourceType_VWorldDEM = _globalmapper.GM_SourceType_VWorldDEM

GM_SourceType_GeoPackage = _globalmapper.GM_SourceType_GeoPackage

GM_SourceType_MBTiles = _globalmapper.GM_SourceType_MBTiles

GM_SourceType_RMaps = _globalmapper.GM_SourceType_RMaps

GM_SourceType_REST_FeatureService = _globalmapper.GM_SourceType_REST_FeatureService

GM_SourceType_DynamicWFS = _globalmapper.GM_SourceType_DynamicWFS

GM_SourceType_DynamicWMS = _globalmapper.GM_SourceType_DynamicWMS

GM_SourceType_DynamicWMTS = _globalmapper.GM_SourceType_DynamicWMTS

GM_SourceType_MVT = _globalmapper.GM_SourceType_MVT

GM_SourceType_Entwine = _globalmapper.GM_SourceType_Entwine

GM_SourceType_DynamicEntwine = _globalmapper.GM_SourceType_DynamicEntwine

GM_SourceType_NumTypes = _globalmapper.GM_SourceType_NumTypes

[docs]
class GM_OnlineSourceInfo_t(object):
    r"""Proxy of C++ GM_OnlineSourceInfo_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __repr__( self ) :
        return str( gmobject_to_map( self ) )

    mName = property(_globalmapper.GM_OnlineSourceInfo_t_mName_get, _globalmapper.GM_OnlineSourceInfo_t_mName_set, doc=r"""mName : p.q(const).char""")
    mType = property(_globalmapper.GM_OnlineSourceInfo_t_mType_get, _globalmapper.GM_OnlineSourceInfo_t_mType_set, doc=r"""mType : GM_OnlineSourceType_t""")
    mAttrList = property(_globalmapper.GM_OnlineSourceInfo_t_mAttrList_get, _globalmapper.GM_OnlineSourceInfo_t_mAttrList_set, doc=r"""mAttrList : p.GM_AttrValue_t""")
    mAttrListSize = property(_globalmapper.GM_OnlineSourceInfo_t_mAttrListSize_get, _globalmapper.GM_OnlineSourceInfo_t_mAttrListSize_set, doc=r"""mAttrListSize : uint32""")

    def __init__(self):
        r"""__init__(GM_OnlineSourceInfo_t self) -> GM_OnlineSourceInfo_t"""
        _globalmapper.GM_OnlineSourceInfo_t_swiginit(self, _globalmapper.new_GM_OnlineSourceInfo_t())
    __swig_destroy__ = _globalmapper.delete_GM_OnlineSourceInfo_t


# Register GM_OnlineSourceInfo_t in _globalmapper:
_globalmapper.GM_OnlineSourceInfo_t_swigregister(GM_OnlineSourceInfo_t)

GM_ChildLayerOp_Load = _globalmapper.GM_ChildLayerOp_Load

GM_ChildLayerOp_Close = _globalmapper.GM_ChildLayerOp_Close

GM_ChildLayerOp_DrawScaleChosen = _globalmapper.GM_ChildLayerOp_DrawScaleChosen

GM_ChildLayerOp_ExportScaleChosen = _globalmapper.GM_ChildLayerOp_ExportScaleChosen

GM_ChildLayerOp_LocalTileMissing = _globalmapper.GM_ChildLayerOp_LocalTileMissing

GM_Convolution_HideProgress = _globalmapper.GM_Convolution_HideProgress

GM_Convolution_ClampGridValsToOrigMinMax = _globalmapper.GM_Convolution_ClampGridValsToOrigMinMax

GM_Convolution_NormalizeWeights = _globalmapper.GM_Convolution_NormalizeWeights

GM_Convolution_DefaultFlags = _globalmapper.GM_Convolution_DefaultFlags

[docs]
class GM_ConvolutionLayerSetup_t(object):
    r"""Proxy of C++ GM_ConvolutionLayerSetup_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(GM_ConvolutionLayerSetup_t self) -> GM_ConvolutionLayerSetup_t"""
        _globalmapper.GM_ConvolutionLayerSetup_t_swiginit(self, _globalmapper.new_GM_ConvolutionLayerSetup_t())
    mFlags = property(_globalmapper.GM_ConvolutionLayerSetup_t_mFlags_get, _globalmapper.GM_ConvolutionLayerSetup_t_mFlags_set, doc=r"""mFlags : GM_ConvolutionLayerFlags_t32""")
    mLayerDesc = property(_globalmapper.GM_ConvolutionLayerSetup_t_mLayerDesc_get, _globalmapper.GM_ConvolutionLayerSetup_t_mLayerDesc_set, doc=r"""mLayerDesc : p.q(const).char""")
    mSamplingMethod = property(_globalmapper.GM_ConvolutionLayerSetup_t_mSamplingMethod_get, _globalmapper.GM_ConvolutionLayerSetup_t_mSamplingMethod_set, doc=r"""mSamplingMethod : GM_SamplingMethod_t8""")
    mCustomFilter = property(_globalmapper.GM_ConvolutionLayerSetup_t_mCustomFilter_get, _globalmapper.GM_ConvolutionLayerSetup_t_mCustomFilter_set, doc=r"""mCustomFilter : p.q(const).double""")
    mCustomFilterSize = property(_globalmapper.GM_ConvolutionLayerSetup_t_mCustomFilterSize_get, _globalmapper.GM_ConvolutionLayerSetup_t_mCustomFilterSize_set, doc=r"""mCustomFilterSize : uint8""")
    mPixelRect = property(_globalmapper.GM_ConvolutionLayerSetup_t_mPixelRect_get, _globalmapper.GM_ConvolutionLayerSetup_t_mPixelRect_set, doc=r"""mPixelRect : GM_PixelRect_t""")

    def __repr__( self ):
        return str( gmobject_to_map( self ) )

    __swig_destroy__ = _globalmapper.delete_GM_ConvolutionLayerSetup_t


# Register GM_ConvolutionLayerSetup_t in _globalmapper:
_globalmapper.GM_ConvolutionLayerSetup_t_swigregister(GM_ConvolutionLayerSetup_t)

PI = _globalmapper.PI

PI_WGS84 = _globalmapper.PI_WGS84

TWO_PI = _globalmapper.TWO_PI

HALF_PI = _globalmapper.HALF_PI

LOG2_VAL = _globalmapper.LOG2_VAL

GM_ONE_HALF = _globalmapper.GM_ONE_HALF

GM_ONE_THIRD = _globalmapper.GM_ONE_THIRD

GM_ONE_FOURTH = _globalmapper.GM_ONE_FOURTH

GM_ONE_SIXTH = _globalmapper.GM_ONE_SIXTH

NULL = _globalmapper.NULL

GM_INVALID_COLOR = _globalmapper.GM_INVALID_COLOR

GM_FLOAT_POS_INFINITY = _globalmapper.GM_FLOAT_POS_INFINITY

GM_FLOAT_NEG_INFINITY = _globalmapper.GM_FLOAT_NEG_INFINITY

GM_FLOAT_NAN = _globalmapper.GM_FLOAT_NAN

GM_FLOAT_QNAN = _globalmapper.GM_FLOAT_QNAN

GM_Event_3DSizesChanged = _globalmapper.GM_Event_3DSizesChanged

GM_Event_AreaGroupChanged = _globalmapper.GM_Event_AreaGroupChanged

GM_Event_AreaTypeRemoved = _globalmapper.GM_Event_AreaTypeRemoved

GM_Event_BackgroundColorChanged = _globalmapper.GM_Event_BackgroundColorChanged

GM_Event_BatchExportFinished = _globalmapper.GM_Event_BatchExportFinished

GM_Event_BatchExportStarted = _globalmapper.GM_Event_BatchExportStarted

GM_Event_ChildDrawCompleted = _globalmapper.GM_Event_ChildDrawCompleted

GM_Event_CustomAreaStyleRemoved = _globalmapper.GM_Event_CustomAreaStyleRemoved

GM_Event_CustomSymbolRemoved = _globalmapper.GM_Event_CustomSymbolRemoved

GM_Event_DefaultAreaStyleChanged = _globalmapper.GM_Event_DefaultAreaStyleChanged

GM_Event_DefaultLineStyleChanged = _globalmapper.GM_Event_DefaultLineStyleChanged

GM_Event_DefaultPointStyleChanged = _globalmapper.GM_Event_DefaultPointStyleChanged

GM_Event_DrawDisable = _globalmapper.GM_Event_DrawDisable

GM_Event_DrawEnable = _globalmapper.GM_Event_DrawEnable

GM_Event_DrawScaleChanged = _globalmapper.GM_Event_DrawScaleChanged

GM_Event_ExportBoundsChanged = _globalmapper.GM_Event_ExportBoundsChanged

GM_Event_FeatureAdded = _globalmapper.GM_Event_FeatureAdded

GM_Event_FeatureClassificationChanged = _globalmapper.GM_Event_FeatureClassificationChanged

GM_Event_FeatureDeleted = _globalmapper.GM_Event_FeatureDeleted

GM_Event_FeaturesMoved = _globalmapper.GM_Event_FeaturesMoved

GM_Event_FeatureStyleChanged = _globalmapper.GM_Event_FeatureStyleChanged

GM_Event_FileLoadRequested = _globalmapper.GM_Event_FileLoadRequested

GM_Event_FirstDraw = _globalmapper.GM_Event_FirstDraw

GM_Event_GlobalProjChanged = _globalmapper.GM_Event_GlobalProjChanged

GM_Event_GridDisplayChanged = _globalmapper.GM_Event_GridDisplayChanged

GM_Event_LayerStyleChanged = _globalmapper.GM_Event_LayerStyleChanged

GM_Event_LicenseDongleLost = _globalmapper.GM_Event_LicenseDongleLost

GM_Event_LicenseNetworkLost = _globalmapper.GM_Event_LicenseNetworkLost

GM_Event_LicenseStatusChanged = _globalmapper.GM_Event_LicenseStatusChanged

GM_Event_LineTypeRemoved = _globalmapper.GM_Event_LineTypeRemoved

GM_Event_MapViewChanged = _globalmapper.GM_Event_MapViewChanged

GM_Event_MapViewUpdateNeeded = _globalmapper.GM_Event_MapViewUpdateNeeded

GM_Event_ModelessDialogClosing = _globalmapper.GM_Event_ModelessDialogClosing

GM_Event_MultiCloseStarted = _globalmapper.GM_Event_MultiCloseStarted

GM_Event_MultiCloseStopped = _globalmapper.GM_Event_MultiCloseStopped

GM_Event_MultiLoadStarted = _globalmapper.GM_Event_MultiLoadStarted

GM_Event_MultiLoadStopped = _globalmapper.GM_Event_MultiLoadStopped

GM_Event_OverlayBoundsChanged = _globalmapper.GM_Event_OverlayBoundsChanged

GM_Event_OverlayClosed = _globalmapper.GM_Event_OverlayClosed

GM_Event_OverlayClosing = _globalmapper.GM_Event_OverlayClosing

GM_Event_OverlayLoaded = _globalmapper.GM_Event_OverlayLoaded

GM_Event_OverlayOrderChangeFinished = _globalmapper.GM_Event_OverlayOrderChangeFinished

GM_Event_OverlayOrderChangeStarted = _globalmapper.GM_Event_OverlayOrderChangeStarted

GM_Event_OverlayOptionsChanged = _globalmapper.GM_Event_OverlayOptionsChanged

GM_Event_PathProfileFromPosChanged = _globalmapper.GM_Event_PathProfileFromPosChanged

GM_Event_PathProfileToPosChanged = _globalmapper.GM_Event_PathProfileToPosChanged

GM_Event_PixelScanStart = _globalmapper.GM_Event_PixelScanStart

GM_Event_PixelScanStop = _globalmapper.GM_Event_PixelScanStop

GM_Event_PointTypeRemoved = _globalmapper.GM_Event_PointTypeRemoved

GM_Event_PosFormatChanged = _globalmapper.GM_Event_PosFormatChanged

GM_Event_PostDrawNeeded = _globalmapper.GM_Event_PostDrawNeeded

GM_Event_RasterExportFinished = _globalmapper.GM_Event_RasterExportFinished

GM_Event_RasterExportStarted = _globalmapper.GM_Event_RasterExportStarted

GM_Event_RenderStart = _globalmapper.GM_Event_RenderStart

GM_Event_RenderStop = _globalmapper.GM_Event_RenderStop

GM_Event_RenderStart3D = _globalmapper.GM_Event_RenderStart3D

GM_Event_RenderStop3D = _globalmapper.GM_Event_RenderStop3D

GM_Event_RenderStartVector = _globalmapper.GM_Event_RenderStartVector

GM_Event_RenderStopVector = _globalmapper.GM_Event_RenderStopVector

GM_Event_ScaleUnitsChanged = _globalmapper.GM_Event_ScaleUnitsChanged

GM_Event_ScriptFinished = _globalmapper.GM_Event_ScriptFinished

GM_Event_ScriptStarted = _globalmapper.GM_Event_ScriptStarted

GM_Event_ShadersChanged = _globalmapper.GM_Event_ShadersChanged

GM_Event_SharedRasterStatsChanged = _globalmapper.GM_Event_SharedRasterStatsChanged

GM_Event_SpeedUnitsChanged = _globalmapper.GM_Event_SpeedUnitsChanged

GM_Event_TileDownloadFailed = _globalmapper.GM_Event_TileDownloadFailed

GM_Event_VectorDisplayOptionsChanged = _globalmapper.GM_Event_VectorDisplayOptionsChanged

GM_Event_VectorExportFinished = _globalmapper.GM_Event_VectorExportFinished

GM_Event_VectorExportStarted = _globalmapper.GM_Event_VectorExportStarted

GM_Event_VectorTypeFiltersChanged = _globalmapper.GM_Event_VectorTypeFiltersChanged

GM_Event_ViewBitmapInvalidated = _globalmapper.GM_Event_ViewBitmapInvalidated

GM_Event_MinMaxElevRangeChanged = _globalmapper.GM_Event_MinMaxElevRangeChanged

GM_Event_LidarDisplayOptionsChanged = _globalmapper.GM_Event_LidarDisplayOptionsChanged

GM_Event_ChildLoadCompleted = _globalmapper.GM_Event_ChildLoadCompleted

GM_Event_ProfileCorridorWidthChanged = _globalmapper.GM_Event_ProfileCorridorWidthChanged

GM_Event_OnIdleHandled = _globalmapper.GM_Event_OnIdleHandled

GM_Event_MouseLButtonDown = _globalmapper.GM_Event_MouseLButtonDown

GM_Event_MouseLButtonUp = _globalmapper.GM_Event_MouseLButtonUp

GM_Event_MouseLButtonDoubleClick = _globalmapper.GM_Event_MouseLButtonDoubleClick

GM_Event_MouseRButtonDown = _globalmapper.GM_Event_MouseRButtonDown

GM_Event_MouseRButtonUp = _globalmapper.GM_Event_MouseRButtonUp

GM_Event_MouseRButtonDoubleClick = _globalmapper.GM_Event_MouseRButtonDoubleClick

GM_Event_StartDrawFeature = _globalmapper.GM_Event_StartDrawFeature

GM_Event_AddFeatureVertex = _globalmapper.GM_Event_AddFeatureVertex

GM_Event_CompleteDrawFeature = _globalmapper.GM_Event_CompleteDrawFeature

GM_Event_LidarClassificationChanged = _globalmapper.GM_Event_LidarClassificationChanged

GM_Event_LidarPointsDeleted = _globalmapper.GM_Event_LidarPointsDeleted

GM_Event_ExtensionActivated = _globalmapper.GM_Event_ExtensionActivated

GM_Event_ExtensionDeactivated = _globalmapper.GM_Event_ExtensionDeactivated

GM_Event_FeatureSelectionChanged = _globalmapper.GM_Event_FeatureSelectionChanged

GM_Event_SelectionCleared = _globalmapper.GM_Event_SelectionCleared

GM_Event_OnlineDrawScaleSet = _globalmapper.GM_Event_OnlineDrawScaleSet

GM_Event_OnlineExportScaleSet = _globalmapper.GM_Event_OnlineExportScaleSet

GM_Event_LocalTileMissing = _globalmapper.GM_Event_LocalTileMissing

GM_Event_LicenseNetworkRestored = _globalmapper.GM_Event_LicenseNetworkRestored

GM_Event_ShowErrorMessage = _globalmapper.GM_Event_ShowErrorMessage

GM_Event_MouseMove = _globalmapper.GM_Event_MouseMove

GM_Event_LicenseInvalid = _globalmapper.GM_Event_LicenseInvalid

GM_Event_3DSetActiveTrack = _globalmapper.GM_Event_3DSetActiveTrack

GM_Event_SelectionAboutToClear = _globalmapper.GM_Event_SelectionAboutToClear

GM_Event_SelectionChanged = _globalmapper.GM_Event_SelectionChanged

GM_Event_LidarSelectionChanged = _globalmapper.GM_Event_LidarSelectionChanged

GM_Event_CustomModelRemoved = _globalmapper.GM_Event_CustomModelRemoved

GM_Event_FeatureString = _globalmapper.GM_Event_FeatureString

GM_Event_FeatureVertexSelectionChanged = _globalmapper.GM_Event_FeatureVertexSelectionChanged

GM_Event_MeasurePointCollectionChanged = _globalmapper.GM_Event_MeasurePointCollectionChanged

GM_Event_MeasureStopMeasuring = _globalmapper.GM_Event_MeasureStopMeasuring

GM_Event_LicenseDongleFound = _globalmapper.GM_Event_LicenseDongleFound

GM_Event_EnterMeasureMode = _globalmapper.GM_Event_EnterMeasureMode

GM_Event_LeaveMeasureMode = _globalmapper.GM_Event_LeaveMeasureMode

GM_Event_VertDispOptsChanged = _globalmapper.GM_Event_VertDispOptsChanged

GM_Event_LidarClassNameChanged = _globalmapper.GM_Event_LidarClassNameChanged

GM_Event_ThreadCompleted = _globalmapper.GM_Event_ThreadCompleted

GM_Event_UserPannedView = _globalmapper.GM_Event_UserPannedView

GM_Event_UserZoomedView = _globalmapper.GM_Event_UserZoomedView

GM_Event_IncrementalRepaintSkipped = _globalmapper.GM_Event_IncrementalRepaintSkipped

GM_Event_PreTranslateMessage = _globalmapper.GM_Event_PreTranslateMessage

GM_Event_GetExtensionCommandState = _globalmapper.GM_Event_GetExtensionCommandState

GM_Event_AppClosing = _globalmapper.GM_Event_AppClosing

GM_Event_EventList = _globalmapper.GM_Event_EventList

GM_Event_ViewChanged = _globalmapper.GM_Event_ViewChanged

GM_Event_OrientationChanged = _globalmapper.GM_Event_OrientationChanged

GM_Event_CurrentShaderChanged = _globalmapper.GM_Event_CurrentShaderChanged

GM_Event_LidarClassGroupChanged = _globalmapper.GM_Event_LidarClassGroupChanged

GM_Event_PathProfileChanged = _globalmapper.GM_Event_PathProfileChanged

GM_Event_PathProfileViewPos = _globalmapper.GM_Event_PathProfileViewPos

GM_Event_DocumentDeleting = _globalmapper.GM_Event_DocumentDeleting

GM_Event_CurrentWorkspaceChanged = _globalmapper.GM_Event_CurrentWorkspaceChanged

GM_Event_RestoreDefaultSettings = _globalmapper.GM_Event_RestoreDefaultSettings

GM_Event_FlyThroughPathChanged = _globalmapper.GM_Event_FlyThroughPathChanged

GM_Event_StartEditMode = _globalmapper.GM_Event_StartEditMode

GM_Event_StopEditMode = _globalmapper.GM_Event_StopEditMode

GM_Event_LidarPointCloudAdded = _globalmapper.GM_Event_LidarPointCloudAdded

GM_Event_FeatureAttrListChanged = _globalmapper.GM_Event_FeatureAttrListChanged

GM_Event_FeatureIs3DChanged = _globalmapper.GM_Event_FeatureIs3DChanged

GM_Event_3dView2dBoundsClipping = _globalmapper.GM_Event_3dView2dBoundsClipping

GM_Event_FeatureMeshGeometryChanged = _globalmapper.GM_Event_FeatureMeshGeometryChanged

GM_Event_LayerDescriptionChanged = _globalmapper.GM_Event_LayerDescriptionChanged

GM_Event_MeasureAttrsChanged = _globalmapper.GM_Event_MeasureAttrsChanged

GM_Event_Search_Modified = _globalmapper.GM_Event_Search_Modified

GM_Event_LidarRenderDataChanged = _globalmapper.GM_Event_LidarRenderDataChanged

GM_Event_LidarNonRenderDataChanged = _globalmapper.GM_Event_LidarNonRenderDataChanged

GM_Event_LoadingUserSettingsUI = _globalmapper.GM_Event_LoadingUserSettingsUI

GM_Event_TerrainPaintCompleted = _globalmapper.GM_Event_TerrainPaintCompleted

GM_Event_3dViewListChanged = _globalmapper.GM_Event_3dViewListChanged

GM_Event_RenderStartProfile = _globalmapper.GM_Event_RenderStartProfile

GM_Event_RenderStopProfile = _globalmapper.GM_Event_RenderStopProfile

GM_Event_FeatureLabelChanged = _globalmapper.GM_Event_FeatureLabelChanged

GM_Event_FeatureDescChanged = _globalmapper.GM_Event_FeatureDescChanged

GM_Event_FeaturesRemoved = _globalmapper.GM_Event_FeaturesRemoved

GM_Event_LayerUniqueIdChanged = _globalmapper.GM_Event_LayerUniqueIdChanged

GM_Event_IslandFeatureAdded = _globalmapper.GM_Event_IslandFeatureAdded

GM_Event_GmmDiscovered = _globalmapper.GM_Event_GmmDiscovered

GM_Event_GmmConnectionStatusChanged = _globalmapper.GM_Event_GmmConnectionStatusChanged

GM_Event_NewScriptBuilderStepAdded = _globalmapper.GM_Event_NewScriptBuilderStepAdded

GM_Event_AreaTypeAdded = _globalmapper.GM_Event_AreaTypeAdded

GM_Event_LineTypeAdded = _globalmapper.GM_Event_LineTypeAdded

GM_Event_PointTypeAdded = _globalmapper.GM_Event_PointTypeAdded

GM_Event_NumNonGPS = _globalmapper.GM_Event_NumNonGPS

GM_Event_MinGPS = _globalmapper.GM_Event_MinGPS

GM_Event_GPSAutoDetectDone = _globalmapper.GM_Event_GPSAutoDetectDone

GM_Event_GPSAutoDetectStart = _globalmapper.GM_Event_GPSAutoDetectStart

GM_Event_GPSDeviceChange = _globalmapper.GM_Event_GPSDeviceChange

GM_Event_GPSInitDone = _globalmapper.GM_Event_GPSInitDone

GM_Event_GPSLoggingSettingsChanged = _globalmapper.GM_Event_GPSLoggingSettingsChanged

GM_Event_GPSModeChange = _globalmapper.GM_Event_GPSModeChange

GM_Event_GPSMultiVehicleUpdate = _globalmapper.GM_Event_GPSMultiVehicleUpdate

GM_Event_GPSNewNmeaSentence = _globalmapper.GM_Event_GPSNewNmeaSentence

GM_Event_GPSPosition = _globalmapper.GM_Event_GPSPosition

GM_Event_GPSReportEndOfFile = _globalmapper.GM_Event_GPSReportEndOfFile

GM_Event_GPSReportFix = _globalmapper.GM_Event_GPSReportFix

GM_Event_GPSReportLostDiff = _globalmapper.GM_Event_GPSReportLostDiff

GM_Event_GPSReportLostFix = _globalmapper.GM_Event_GPSReportLostFix

GM_Event_GPSReportNotUsable = _globalmapper.GM_Event_GPSReportNotUsable

GM_Event_GPSReportValidDiff = _globalmapper.GM_Event_GPSReportValidDiff

GM_Event_GPSSatStatusChange = _globalmapper.GM_Event_GPSSatStatusChange

GM_Event_GPSTextMessageReceived = _globalmapper.GM_Event_GPSTextMessageReceived

GM_Event_GPSTrackingStopped = _globalmapper.GM_Event_GPSTrackingStopped

GM_Event_GPSWaypointReceived = _globalmapper.GM_Event_GPSWaypointReceived

GM_Event_GPSTrackingStarted = _globalmapper.GM_Event_GPSTrackingStarted

GM_Event_GPSKeepVesselOnScreenChanged = _globalmapper.GM_Event_GPSKeepVesselOnScreenChanged

GM_Event_GPSTrackUpDisplayChanged = _globalmapper.GM_Event_GPSTrackUpDisplayChanged

GM_Event_GPSKeepTargetPolyOnScreenChanged = _globalmapper.GM_Event_GPSKeepTargetPolyOnScreenChanged

GM_Event_MaxGPS = _globalmapper.GM_Event_MaxGPS

GM_Event_Invalid = _globalmapper.GM_Event_Invalid

[docs]
class GM_MouseEventInfo_t(object):
    r"""Proxy of C++ GM_MouseEventInfo_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __repr__( self ) :
        return str( gmobject_to_map( self ) )

    mFlags = property(_globalmapper.GM_MouseEventInfo_t_mFlags_get, _globalmapper.GM_MouseEventInfo_t_mFlags_set, doc=r"""mFlags : uint32""")
    mX = property(_globalmapper.GM_MouseEventInfo_t_mX_get, _globalmapper.GM_MouseEventInfo_t_mX_set, doc=r"""mX : sint32""")
    mY = property(_globalmapper.GM_MouseEventInfo_t_mY_get, _globalmapper.GM_MouseEventInfo_t_mY_set, doc=r"""mY : sint32""")

    def __init__(self):
        r"""__init__(GM_MouseEventInfo_t self) -> GM_MouseEventInfo_t"""
        _globalmapper.GM_MouseEventInfo_t_swiginit(self, _globalmapper.new_GM_MouseEventInfo_t())
    __swig_destroy__ = _globalmapper.delete_GM_MouseEventInfo_t


# Register GM_MouseEventInfo_t in _globalmapper:
_globalmapper.GM_MouseEventInfo_t_swigregister(GM_MouseEventInfo_t)

[docs]
class GM_OnlineEventInfo_t(object):
    r"""Proxy of C++ GM_OnlineEventInfo_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __repr__( self ) :
        return str( gmobject_to_map( self ) )

    mLayerHandle = property(_globalmapper.GM_OnlineEventInfo_t_mLayerHandle_get, _globalmapper.GM_OnlineEventInfo_t_mLayerHandle_set, doc=r"""mLayerHandle : p.void""")
    mZoomScale = property(_globalmapper.GM_OnlineEventInfo_t_mZoomScale_get, _globalmapper.GM_OnlineEventInfo_t_mZoomScale_set, doc=r"""mZoomScale : sint32""")
    mDataStr = property(_globalmapper.GM_OnlineEventInfo_t_mDataStr_get, _globalmapper.GM_OnlineEventInfo_t_mDataStr_set, doc=r"""mDataStr : p.q(const).char""")
    mRenderAborted = property(_globalmapper.GM_OnlineEventInfo_t_mRenderAborted_get, _globalmapper.GM_OnlineEventInfo_t_mRenderAborted_set, doc=r"""mRenderAborted : boolean""")

    def __init__(self):
        r"""__init__(GM_OnlineEventInfo_t self) -> GM_OnlineEventInfo_t"""
        _globalmapper.GM_OnlineEventInfo_t_swiginit(self, _globalmapper.new_GM_OnlineEventInfo_t())
    __swig_destroy__ = _globalmapper.delete_GM_OnlineEventInfo_t


# Register GM_OnlineEventInfo_t in _globalmapper:
_globalmapper.GM_OnlineEventInfo_t_swigregister(GM_OnlineEventInfo_t)

[docs]
class GM_Point3D_t(object):
    r"""Proxy of C++ GM_Point3D_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __repr__( self ) :
        return str( gmobject_to_map( self ) )

    mX = property(_globalmapper.GM_Point3D_t_mX_get, _globalmapper.GM_Point3D_t_mX_set, doc=r"""mX : double""")
    mY = property(_globalmapper.GM_Point3D_t_mY_get, _globalmapper.GM_Point3D_t_mY_set, doc=r"""mY : double""")
    mElev = property(_globalmapper.GM_Point3D_t_mElev_get, _globalmapper.GM_Point3D_t_mElev_set, doc=r"""mElev : float""")

    def __init__(self):
        r"""__init__(GM_Point3D_t self) -> GM_Point3D_t"""
        _globalmapper.GM_Point3D_t_swiginit(self, _globalmapper.new_GM_Point3D_t())
    __swig_destroy__ = _globalmapper.delete_GM_Point3D_t


# Register GM_Point3D_t in _globalmapper:
_globalmapper.GM_Point3D_t_swigregister(GM_Point3D_t)

[docs]
class GM_MouseMoveInfo_t(object):
    r"""Proxy of C++ GM_MouseMoveInfo_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __repr__( self ) :
        return str( gmobject_to_map( self ) )

    mFlags = property(_globalmapper.GM_MouseMoveInfo_t_mFlags_get, _globalmapper.GM_MouseMoveInfo_t_mFlags_set, doc=r"""mFlags : uint32""")
    mX = property(_globalmapper.GM_MouseMoveInfo_t_mX_get, _globalmapper.GM_MouseMoveInfo_t_mX_set, doc=r"""mX : sint32""")
    mY = property(_globalmapper.GM_MouseMoveInfo_t_mY_get, _globalmapper.GM_MouseMoveInfo_t_mY_set, doc=r"""mY : sint32""")
    mPosition = property(_globalmapper.GM_MouseMoveInfo_t_mPosition_get, _globalmapper.GM_MouseMoveInfo_t_mPosition_set, doc=r"""mPosition : GM_Point3D_t""")

    def __init__(self):
        r"""__init__(GM_MouseMoveInfo_t self) -> GM_MouseMoveInfo_t"""
        _globalmapper.GM_MouseMoveInfo_t_swiginit(self, _globalmapper.new_GM_MouseMoveInfo_t())
    __swig_destroy__ = _globalmapper.delete_GM_MouseMoveInfo_t


# Register GM_MouseMoveInfo_t in _globalmapper:
_globalmapper.GM_MouseMoveInfo_t_swigregister(GM_MouseMoveInfo_t)

[docs]
class GM_PreTranslateMessageInfo_t(object):
    r"""Proxy of C++ GM_PreTranslateMessageInfo_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __repr__( self ) :
        return str( gmobject_to_map( self ) )

    mMSG = property(_globalmapper.GM_PreTranslateMessageInfo_t_mMSG_get, _globalmapper.GM_PreTranslateMessageInfo_t_mMSG_set, doc=r"""mMSG : p.void""")
    mMsgProcessed = property(_globalmapper.GM_PreTranslateMessageInfo_t_mMsgProcessed_get, _globalmapper.GM_PreTranslateMessageInfo_t_mMsgProcessed_set, doc=r"""mMsgProcessed : boolean""")

    def __init__(self):
        r"""__init__(GM_PreTranslateMessageInfo_t self) -> GM_PreTranslateMessageInfo_t"""
        _globalmapper.GM_PreTranslateMessageInfo_t_swiginit(self, _globalmapper.new_GM_PreTranslateMessageInfo_t())
    __swig_destroy__ = _globalmapper.delete_GM_PreTranslateMessageInfo_t


# Register GM_PreTranslateMessageInfo_t in _globalmapper:
_globalmapper.GM_PreTranslateMessageInfo_t_swigregister(GM_PreTranslateMessageInfo_t)

[docs]
class GM_GPS_Position_t(object):
    r"""Proxy of C++ GM_GPS_Position_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __repr__( self ) :
        return str( gmobject_to_map( self ) )

    mLat = property(_globalmapper.GM_GPS_Position_t_mLat_get, _globalmapper.GM_GPS_Position_t_mLat_set, doc=r"""mLat : double""")
    mLon = property(_globalmapper.GM_GPS_Position_t_mLon_get, _globalmapper.GM_GPS_Position_t_mLon_set, doc=r"""mLon : double""")

    def __init__(self):
        r"""__init__(GM_GPS_Position_t self) -> GM_GPS_Position_t"""
        _globalmapper.GM_GPS_Position_t_swiginit(self, _globalmapper.new_GM_GPS_Position_t())
    __swig_destroy__ = _globalmapper.delete_GM_GPS_Position_t


# Register GM_GPS_Position_t in _globalmapper:
_globalmapper.GM_GPS_Position_t_swigregister(GM_GPS_Position_t)

[docs]
class GM_GPS_Waypoint_t(object):
    r"""Proxy of C++ GM_GPS_Waypoint_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __repr__( self ) :
        return str( gmobject_to_map( self ) )

    mPos = property(_globalmapper.GM_GPS_Waypoint_t_mPos_get, _globalmapper.GM_GPS_Waypoint_t_mPos_set, doc=r"""mPos : GM_GPS_Position_t""")
    mAltitude = property(_globalmapper.GM_GPS_Waypoint_t_mAltitude_get, _globalmapper.GM_GPS_Waypoint_t_mAltitude_set, doc=r"""mAltitude : float""")
    mName = property(_globalmapper.GM_GPS_Waypoint_t_mName_get, _globalmapper.GM_GPS_Waypoint_t_mName_set, doc=r"""mName : a(256).char""")
    mGroupId = property(_globalmapper.GM_GPS_Waypoint_t_mGroupId_get, _globalmapper.GM_GPS_Waypoint_t_mGroupId_set, doc=r"""mGroupId : uint8""")
    mIcon = property(_globalmapper.GM_GPS_Waypoint_t_mIcon_get, _globalmapper.GM_GPS_Waypoint_t_mIcon_set, doc=r"""mIcon : uint8""")
    mSerialCode = property(_globalmapper.GM_GPS_Waypoint_t_mSerialCode_get, _globalmapper.GM_GPS_Waypoint_t_mSerialCode_set, doc=r"""mSerialCode : uint32""")
    mTimeStamp = property(_globalmapper.GM_GPS_Waypoint_t_mTimeStamp_get, _globalmapper.GM_GPS_Waypoint_t_mTimeStamp_set, doc=r"""mTimeStamp : time_t""")

    def __init__(self):
        r"""__init__(GM_GPS_Waypoint_t self) -> GM_GPS_Waypoint_t"""
        _globalmapper.GM_GPS_Waypoint_t_swiginit(self, _globalmapper.new_GM_GPS_Waypoint_t())
    __swig_destroy__ = _globalmapper.delete_GM_GPS_Waypoint_t


# Register GM_GPS_Waypoint_t in _globalmapper:
_globalmapper.GM_GPS_Waypoint_t_swigregister(GM_GPS_Waypoint_t)

[docs]
class GM_GPS_Text_Msg_t(object):
    r"""Proxy of C++ GM_GPS_Text_Msg_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __repr__( self ) :
        return str( gmobject_to_map( self ) )

    mDeviceName = property(_globalmapper.GM_GPS_Text_Msg_t_mDeviceName_get, _globalmapper.GM_GPS_Text_Msg_t_mDeviceName_set, doc=r"""mDeviceName : a(32).char""")
    mMessage = property(_globalmapper.GM_GPS_Text_Msg_t_mMessage_get, _globalmapper.GM_GPS_Text_Msg_t_mMessage_set, doc=r"""mMessage : a(256).char""")
    mGroupId = property(_globalmapper.GM_GPS_Text_Msg_t_mGroupId_get, _globalmapper.GM_GPS_Text_Msg_t_mGroupId_set, doc=r"""mGroupId : uint8""")
    mIcon = property(_globalmapper.GM_GPS_Text_Msg_t_mIcon_get, _globalmapper.GM_GPS_Text_Msg_t_mIcon_set, doc=r"""mIcon : uint8""")
    mSerialCode = property(_globalmapper.GM_GPS_Text_Msg_t_mSerialCode_get, _globalmapper.GM_GPS_Text_Msg_t_mSerialCode_set, doc=r"""mSerialCode : uint32""")
    mTimeStamp = property(_globalmapper.GM_GPS_Text_Msg_t_mTimeStamp_get, _globalmapper.GM_GPS_Text_Msg_t_mTimeStamp_set, doc=r"""mTimeStamp : time_t""")

    def __init__(self):
        r"""__init__(GM_GPS_Text_Msg_t self) -> GM_GPS_Text_Msg_t"""
        _globalmapper.GM_GPS_Text_Msg_t_swiginit(self, _globalmapper.new_GM_GPS_Text_Msg_t())
    __swig_destroy__ = _globalmapper.delete_GM_GPS_Text_Msg_t


# Register GM_GPS_Text_Msg_t in _globalmapper:
_globalmapper.GM_GPS_Text_Msg_t_swigregister(GM_GPS_Text_Msg_t)

GM_ExtCmdState_Disable = _globalmapper.GM_ExtCmdState_Disable

GM_ExtCmdState_Check = _globalmapper.GM_ExtCmdState_Check

[docs]
class GM_ExtCommandState_t(object):
    r"""Proxy of C++ GM_ExtCommandState_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __repr__( self ) :
        return str( gmobject_to_map( self ) )

    mCmdId = property(_globalmapper.GM_ExtCommandState_t_mCmdId_get, _globalmapper.GM_ExtCommandState_t_mCmdId_set, doc=r"""mCmdId : uint32""")
    mFlags = property(_globalmapper.GM_ExtCommandState_t_mFlags_get, _globalmapper.GM_ExtCommandState_t_mFlags_set, doc=r"""mFlags : GM_ExtCmdStateFlags_t32""")

    def __init__(self):
        r"""__init__(GM_ExtCommandState_t self) -> GM_ExtCommandState_t"""
        _globalmapper.GM_ExtCommandState_t_swiginit(self, _globalmapper.new_GM_ExtCommandState_t())
    __swig_destroy__ = _globalmapper.delete_GM_ExtCommandState_t


# Register GM_ExtCommandState_t in _globalmapper:
_globalmapper.GM_ExtCommandState_t_swigregister(GM_ExtCommandState_t)

GM_DrawFeature_Area = _globalmapper.GM_DrawFeature_Area

GM_DrawFeature_Line = _globalmapper.GM_DrawFeature_Line

GM_DrawFeature_Point = _globalmapper.GM_DrawFeature_Point

GM_DrawFeatureNumTypes = _globalmapper.GM_DrawFeatureNumTypes

GM_Menu_Digitizer = _globalmapper.GM_Menu_Digitizer

GM_MenuNumTypes = _globalmapper.GM_MenuNumTypes

GM_VAL_U8 = _globalmapper.GM_VAL_U8

GM_VAL_S8 = _globalmapper.GM_VAL_S8

GM_VAL_U16 = _globalmapper.GM_VAL_U16

GM_VAL_S16 = _globalmapper.GM_VAL_S16

GM_VAL_U32 = _globalmapper.GM_VAL_U32

GM_VAL_S32 = _globalmapper.GM_VAL_S32

GM_VAL_U64 = _globalmapper.GM_VAL_U64

GM_VAL_S64 = _globalmapper.GM_VAL_S64

GM_VAL_F32 = _globalmapper.GM_VAL_F32

GM_VAL_F64 = _globalmapper.GM_VAL_F64

GM_VAL_NUM_TYPES = _globalmapper.GM_VAL_NUM_TYPES

GM_BandLayout_BIL = _globalmapper.GM_BandLayout_BIL

GM_BandLayout_BSQ = _globalmapper.GM_BandLayout_BSQ

GM_BandLayout_BIP = _globalmapper.GM_BandLayout_BIP

GM_BandLayout_Grayscale = _globalmapper.GM_BandLayout_Grayscale

GM_BandLayout_NumBandLayouts = _globalmapper.GM_BandLayout_NumBandLayouts

[docs]
class GM_BandValEx_t32(object):
    r"""Proxy of C++ GM_BandValEx_t32 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __repr__( self ) :
        return str(gmobject_to_map(self))

    mInt = property(_globalmapper.GM_BandValEx_t32_mInt_get, _globalmapper.GM_BandValEx_t32_mInt_set, doc=r"""mInt : GM_BandVal_t32""")
    mFloat = property(_globalmapper.GM_BandValEx_t32_mFloat_get, _globalmapper.GM_BandValEx_t32_mFloat_set, doc=r"""mFloat : float""")

    def __init__(self):
        r"""__init__(GM_BandValEx_t32 self) -> GM_BandValEx_t32"""
        _globalmapper.GM_BandValEx_t32_swiginit(self, _globalmapper.new_GM_BandValEx_t32())
    __swig_destroy__ = _globalmapper.delete_GM_BandValEx_t32


# Register GM_BandValEx_t32 in _globalmapper:
_globalmapper.GM_BandValEx_t32_swigregister(GM_BandValEx_t32)

GM_Orientation_TOPLEFT = _globalmapper.GM_Orientation_TOPLEFT

GM_Orientation_TOPRIGHT = _globalmapper.GM_Orientation_TOPRIGHT

GM_Orientation_BOTRIGHT = _globalmapper.GM_Orientation_BOTRIGHT

GM_Orientation_BOTLEFT = _globalmapper.GM_Orientation_BOTLEFT

GM_Orientation_LEFTTOP = _globalmapper.GM_Orientation_LEFTTOP

GM_Orientation_RIGHTTOP = _globalmapper.GM_Orientation_RIGHTTOP

GM_Orientation_RIGHTBOT = _globalmapper.GM_Orientation_RIGHTBOT

GM_Orientation_LEFTBOT = _globalmapper.GM_Orientation_LEFTBOT

GM_Orientation_NumTypes = _globalmapper.GM_Orientation_NumTypes

GM_Orientation_Default = _globalmapper.GM_Orientation_Default

[docs]
class GM_BandValUnion_t(object):
    r"""Proxy of C++ GM_BandValUnion_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __repr__( self ) :
        return str( gmobject_to_map( self ) )

    f64 = property(_globalmapper.GM_BandValUnion_t_f64_get, _globalmapper.GM_BandValUnion_t_f64_set, doc=r"""f64 : double""")
    f32 = property(_globalmapper.GM_BandValUnion_t_f32_get, _globalmapper.GM_BandValUnion_t_f32_set, doc=r"""f32 : float""")
    s64 = property(_globalmapper.GM_BandValUnion_t_s64_get, _globalmapper.GM_BandValUnion_t_s64_set, doc=r"""s64 : sint64""")
    u64 = property(_globalmapper.GM_BandValUnion_t_u64_get, _globalmapper.GM_BandValUnion_t_u64_set, doc=r"""u64 : uint64""")
    s32 = property(_globalmapper.GM_BandValUnion_t_s32_get, _globalmapper.GM_BandValUnion_t_s32_set, doc=r"""s32 : sint32""")
    u32 = property(_globalmapper.GM_BandValUnion_t_u32_get, _globalmapper.GM_BandValUnion_t_u32_set, doc=r"""u32 : uint32""")
    s16 = property(_globalmapper.GM_BandValUnion_t_s16_get, _globalmapper.GM_BandValUnion_t_s16_set, doc=r"""s16 : sint16""")
    u16 = property(_globalmapper.GM_BandValUnion_t_u16_get, _globalmapper.GM_BandValUnion_t_u16_set, doc=r"""u16 : uint16""")
    u8 = property(_globalmapper.GM_BandValUnion_t_u8_get, _globalmapper.GM_BandValUnion_t_u8_set, doc=r"""u8 : uint8""")
    s8 = property(_globalmapper.GM_BandValUnion_t_s8_get, _globalmapper.GM_BandValUnion_t_s8_set, doc=r"""s8 : sint8""")

    def __init__(self):
        r"""__init__(GM_BandValUnion_t self) -> GM_BandValUnion_t"""
        _globalmapper.GM_BandValUnion_t_swiginit(self, _globalmapper.new_GM_BandValUnion_t())
    __swig_destroy__ = _globalmapper.delete_GM_BandValUnion_t


# Register GM_BandValUnion_t in _globalmapper:
_globalmapper.GM_BandValUnion_t_swigregister(GM_BandValUnion_t)

GM_DistUnit_Chains = _globalmapper.GM_DistUnit_Chains

GM_DistUnit_Feet = _globalmapper.GM_DistUnit_Feet

GM_DistUnit_Kilometers = _globalmapper.GM_DistUnit_Kilometers

GM_DistUnit_Meters = _globalmapper.GM_DistUnit_Meters

GM_DistUnit_Miles = _globalmapper.GM_DistUnit_Miles

GM_DistUnit_Rods = _globalmapper.GM_DistUnit_Rods

GM_DistUnit_Varas = _globalmapper.GM_DistUnit_Varas

GM_DistUnit_Yards = _globalmapper.GM_DistUnit_Yards

GM_DistUnit_NauticalMiles = _globalmapper.GM_DistUnit_NauticalMiles

GM_DistUnit_FeetInternational = _globalmapper.GM_DistUnit_FeetInternational

GM_DistUnit_Degrees = _globalmapper.GM_DistUnit_Degrees

GM_DistUnit_PercentLen = _globalmapper.GM_DistUnit_PercentLen

GM_DistUnit_Minutes = _globalmapper.GM_DistUnit_Minutes

GM_DistUnit_Seconds = _globalmapper.GM_DistUnit_Seconds

GM_DistUnit_NumUnits = _globalmapper.GM_DistUnit_NumUnits

GM_DistUnit_LastValid = _globalmapper.GM_DistUnit_LastValid

GM_DistUnit_LastLinear = _globalmapper.GM_DistUnit_LastLinear

GM_ElevUnit_Meters = _globalmapper.GM_ElevUnit_Meters

GM_ElevUnit_Decimeters = _globalmapper.GM_ElevUnit_Decimeters

GM_ElevUnit_Centimeters = _globalmapper.GM_ElevUnit_Centimeters

GM_ElevUnit_Millimeters = _globalmapper.GM_ElevUnit_Millimeters

GM_ElevUnit_Feet = _globalmapper.GM_ElevUnit_Feet

GM_ElevUnit_Decifeet = _globalmapper.GM_ElevUnit_Decifeet

GM_ElevUnit_Inches = _globalmapper.GM_ElevUnit_Inches

GM_ElevUnit_Centifeet = _globalmapper.GM_ElevUnit_Centifeet

GM_ElevUnit_Millifeet = _globalmapper.GM_ElevUnit_Millifeet

GM_ElevUnit_Fathoms = _globalmapper.GM_ElevUnit_Fathoms

GM_ElevUnit_NumUnits = _globalmapper.GM_ElevUnit_NumUnits

GM_ElevUnit_LastValid = _globalmapper.GM_ElevUnit_LastValid

GM_ElevUnit_Unknown = _globalmapper.GM_ElevUnit_Unknown

GM_AREA_ACRES = _globalmapper.GM_AREA_ACRES

GM_AREA_HECTARES = _globalmapper.GM_AREA_HECTARES

GM_AREA_SQ_FT = _globalmapper.GM_AREA_SQ_FT

GM_AREA_SQ_METERS = _globalmapper.GM_AREA_SQ_METERS

GM_AREA_SQ_KM = _globalmapper.GM_AREA_SQ_KM

GM_AREA_SQ_MILES = _globalmapper.GM_AREA_SQ_MILES

GM_AREA_NUM_TYPES = _globalmapper.GM_AREA_NUM_TYPES

GM_LINEAR_METRIC = _globalmapper.GM_LINEAR_METRIC

GM_LINEAR_NAUTICAL = _globalmapper.GM_LINEAR_NAUTICAL

GM_LINEAR_STATUTE = _globalmapper.GM_LINEAR_STATUTE

GM_LINEAR_CHAINS = _globalmapper.GM_LINEAR_CHAINS

GM_LINEAR_YARDS = _globalmapper.GM_LINEAR_YARDS

GM_LINEAR_INTERNATIONAL_FEET = _globalmapper.GM_LINEAR_INTERNATIONAL_FEET

GM_LINEAR_VARAS = _globalmapper.GM_LINEAR_VARAS

GM_LINEAR_RODS = _globalmapper.GM_LINEAR_RODS

GM_LINEAR_NUM_TYPES = _globalmapper.GM_LINEAR_NUM_TYPES

GM_Bearing_TrueNorth = _globalmapper.GM_Bearing_TrueNorth

GM_Bearing_MagNorth = _globalmapper.GM_Bearing_MagNorth

GM_Bearing_GridNorth = _globalmapper.GM_Bearing_GridNorth

GM_Bearing_NumBearingSense = _globalmapper.GM_Bearing_NumBearingSense

GM_Bearing_Default = _globalmapper.GM_Bearing_Default

GM_SPEED_AUTO = _globalmapper.GM_SPEED_AUTO

GM_SPEED_MPH = _globalmapper.GM_SPEED_MPH

GM_SPEED_KPH = _globalmapper.GM_SPEED_KPH

GM_SPEED_KNOTS = _globalmapper.GM_SPEED_KNOTS

GM_SPEED_MPS = _globalmapper.GM_SPEED_MPS

GM_SPEED_NUM_TYPES = _globalmapper.GM_SPEED_NUM_TYPES

GM_MEASURE_AUTO = _globalmapper.GM_MEASURE_AUTO

GM_MEASURE_USE_BASE = _globalmapper.GM_MEASURE_USE_BASE

GM_MEASURE_USE_LARGE = _globalmapper.GM_MEASURE_USE_LARGE

GM_MEASURE_SWITCH_NUM_TYPES = _globalmapper.GM_MEASURE_SWITCH_NUM_TYPES

GM_ElevDisp_Native = _globalmapper.GM_ElevDisp_Native

GM_ElevDisp_Metric = _globalmapper.GM_ElevDisp_Metric

GM_ElevDisp_Statute = _globalmapper.GM_ElevDisp_Statute

GM_ElevDisp_NumTypes = _globalmapper.GM_ElevDisp_NumTypes

GM_POS_LatLonDecimal = _globalmapper.GM_POS_LatLonDecimal

GM_POS_LatLonDMS = _globalmapper.GM_POS_LatLonDMS

GM_POS_LatLonDM = _globalmapper.GM_POS_LatLonDM

GM_POS_MGRS = _globalmapper.GM_POS_MGRS

GM_POS_LatLonDecimalPlain = _globalmapper.GM_POS_LatLonDecimalPlain

GM_POS_NUM_TYPES = _globalmapper.GM_POS_NUM_TYPES

GM_POS_Default = _globalmapper.GM_POS_Default

GM_VOLUME_CUBIC_FEET = _globalmapper.GM_VOLUME_CUBIC_FEET

GM_VOLUME_CUBIC_METERS = _globalmapper.GM_VOLUME_CUBIC_METERS

GM_VOLUME_CUBIC_YARDS = _globalmapper.GM_VOLUME_CUBIC_YARDS

GM_VOLUME_GALLONS = _globalmapper.GM_VOLUME_GALLONS

GM_VOLUME_ACRE_FEET = _globalmapper.GM_VOLUME_ACRE_FEET

GM_VOLUME_ACRE_INCHES = _globalmapper.GM_VOLUME_ACRE_INCHES

GM_VOLUME_BARRELS = _globalmapper.GM_VOLUME_BARRELS

GM_VOLUME_BARRELS_OIL = _globalmapper.GM_VOLUME_BARRELS_OIL

GM_VOLUME_NUM_TYPES = _globalmapper.GM_VOLUME_NUM_TYPES

GM_Slope_Degrees = _globalmapper.GM_Slope_Degrees

GM_Slope_Radians = _globalmapper.GM_Slope_Radians

GM_Slope_Percent = _globalmapper.GM_Slope_Percent

GM_Slope_RiseRun = _globalmapper.GM_Slope_RiseRun

GM_Slope_OneInXXX = _globalmapper.GM_Slope_OneInXXX

GM_Slope_NumTypes = _globalmapper.GM_Slope_NumTypes

GM_BRUSH_NULL = _globalmapper.GM_BRUSH_NULL

GM_BRUSH_SOLID = _globalmapper.GM_BRUSH_SOLID

GM_BRUSH_MIN_HATCH = _globalmapper.GM_BRUSH_MIN_HATCH

GM_BRUSH_BACK_DIAG_CROSSHATCH = _globalmapper.GM_BRUSH_BACK_DIAG_CROSSHATCH

GM_BRUSH_CROSSHATCH = _globalmapper.GM_BRUSH_CROSSHATCH

GM_BRUSH_DIAG_CROSSHATCH = _globalmapper.GM_BRUSH_DIAG_CROSSHATCH

GM_BRUSH_FWD_DIAG_CROSSHATCH = _globalmapper.GM_BRUSH_FWD_DIAG_CROSSHATCH

GM_BRUSH_HORZ_HATCH = _globalmapper.GM_BRUSH_HORZ_HATCH

GM_BRUSH_VERT_HATCH = _globalmapper.GM_BRUSH_VERT_HATCH

GM_BRUSH_MAX_HATCH = _globalmapper.GM_BRUSH_MAX_HATCH

GM_BRUSH_MIN_PATTERN = _globalmapper.GM_BRUSH_MIN_PATTERN

GM_BRUSH_SAND_PATTERN = _globalmapper.GM_BRUSH_SAND_PATTERN

GM_BRUSH_INT_WATER_PATTERN = _globalmapper.GM_BRUSH_INT_WATER_PATTERN

GM_BRUSH_SALT_PATTERN = _globalmapper.GM_BRUSH_SALT_PATTERN

GM_BRUSH_CORAL_PATTERN = _globalmapper.GM_BRUSH_CORAL_PATTERN

GM_BRUSH_BLACK_CROSS_PATTERN = _globalmapper.GM_BRUSH_BLACK_CROSS_PATTERN

GM_BRUSH_BLACK_DOT_PATTERN = _globalmapper.GM_BRUSH_BLACK_DOT_PATTERN

GM_BRUSH_MAX_PATTERN = _globalmapper.GM_BRUSH_MAX_PATTERN

GM_BRUSH_NUM_STYLES = _globalmapper.GM_BRUSH_NUM_STYLES

GM_BRUSH_FIRST_CUSTOM = _globalmapper.GM_BRUSH_FIRST_CUSTOM

GM_PEN_SOLID = _globalmapper.GM_PEN_SOLID

GM_PEN_DASH = _globalmapper.GM_PEN_DASH

GM_PEN_DOT = _globalmapper.GM_PEN_DOT

GM_PEN_DASHDOT = _globalmapper.GM_PEN_DASHDOT

GM_PEN_DASHDOTDOT = _globalmapper.GM_PEN_DASHDOTDOT

GM_PEN_NULL = _globalmapper.GM_PEN_NULL

GM_PEN_RAILROAD = _globalmapper.GM_PEN_RAILROAD

GM_PEN_STRIPED = _globalmapper.GM_PEN_STRIPED

GM_PEN_FIRST_DIRECTED = _globalmapper.GM_PEN_FIRST_DIRECTED

GM_PEN_LEFT_FACING_LINE = _globalmapper.GM_PEN_LEFT_FACING_LINE

GM_PEN_RIGHT_FACING_LINE = _globalmapper.GM_PEN_RIGHT_FACING_LINE

GM_PEN_COMB_LONG_TEETH_LEFT = _globalmapper.GM_PEN_COMB_LONG_TEETH_LEFT

GM_PEN_COMB_LONG_TEETH_RIGHT = _globalmapper.GM_PEN_COMB_LONG_TEETH_RIGHT

GM_PEN_COMB_WIDE_SPACED_LEFT = _globalmapper.GM_PEN_COMB_WIDE_SPACED_LEFT

GM_PEN_COMB_WIDE_SPACED_RIGHT = _globalmapper.GM_PEN_COMB_WIDE_SPACED_RIGHT

GM_PEN_COMB_ALTERNATING_LEFT = _globalmapper.GM_PEN_COMB_ALTERNATING_LEFT

GM_PEN_COMB_ALTERNATING_RIGHT = _globalmapper.GM_PEN_COMB_ALTERNATING_RIGHT

GM_PEN_COMB_COUPLED_LEFT = _globalmapper.GM_PEN_COMB_COUPLED_LEFT

GM_PEN_COMB_COUPLED_RIGHT = _globalmapper.GM_PEN_COMB_COUPLED_RIGHT

GM_PEN_COMB_TRIPLET_LEFT = _globalmapper.GM_PEN_COMB_TRIPLET_LEFT

GM_PEN_COMB_TRIPLET_RIGHT = _globalmapper.GM_PEN_COMB_TRIPLET_RIGHT

GM_PEN_RAKE_NARROW_SPACED_LEFT = _globalmapper.GM_PEN_RAKE_NARROW_SPACED_LEFT

GM_PEN_RAKE_NARROW_SPACED_RIGHT = _globalmapper.GM_PEN_RAKE_NARROW_SPACED_RIGHT

GM_PEN_RAKE_LARGE_SPACED_LEFT = _globalmapper.GM_PEN_RAKE_LARGE_SPACED_LEFT

GM_PEN_RAKE_LARGE_SPACED_RIGHT = _globalmapper.GM_PEN_RAKE_LARGE_SPACED_RIGHT

GM_PEN_MINUS_SIGNS_LEFT = _globalmapper.GM_PEN_MINUS_SIGNS_LEFT

GM_PEN_MINUS_SIGNS_RIGHT = _globalmapper.GM_PEN_MINUS_SIGNS_RIGHT

GM_PEN_PLUS_SIGNS_LEFT = _globalmapper.GM_PEN_PLUS_SIGNS_LEFT

GM_PEN_PLUS_SIGNS_RIGHT = _globalmapper.GM_PEN_PLUS_SIGNS_RIGHT

GM_PEN_DOTS_LEFT = _globalmapper.GM_PEN_DOTS_LEFT

GM_PEN_DOTS_RIGHT = _globalmapper.GM_PEN_DOTS_RIGHT

GM_PEN_T_SHAPED_LEFT = _globalmapper.GM_PEN_T_SHAPED_LEFT

GM_PEN_T_SHAPED_RIGHT = _globalmapper.GM_PEN_T_SHAPED_RIGHT

GM_PEN_RECTS_LEFT = _globalmapper.GM_PEN_RECTS_LEFT

GM_PEN_RECTS_RIGHT = _globalmapper.GM_PEN_RECTS_RIGHT

GM_PEN_SQUARES_LEFT = _globalmapper.GM_PEN_SQUARES_LEFT

GM_PEN_SQUARES_RIGHT = _globalmapper.GM_PEN_SQUARES_RIGHT

GM_PEN_HALF_CIRCLE_NARROW_LEFT = _globalmapper.GM_PEN_HALF_CIRCLE_NARROW_LEFT

GM_PEN_HALF_CIRCLE_NARROW_RIGHT = _globalmapper.GM_PEN_HALF_CIRCLE_NARROW_RIGHT

GM_PEN_HALF_CIRCLE_WIDE_LEFT = _globalmapper.GM_PEN_HALF_CIRCLE_WIDE_LEFT

GM_PEN_HALF_CIRCLE_WIDE_RIGHT = _globalmapper.GM_PEN_HALF_CIRCLE_WIDE_RIGHT

GM_PEN_DIAMONDS_LEFT = _globalmapper.GM_PEN_DIAMONDS_LEFT

GM_PEN_DIAMONDS_RIGHT = _globalmapper.GM_PEN_DIAMONDS_RIGHT

GM_PEN_T_SHAPED_LEFT_NO_LINE = _globalmapper.GM_PEN_T_SHAPED_LEFT_NO_LINE

GM_PEN_T_SHAPED_RIGHT_NO_LINE = _globalmapper.GM_PEN_T_SHAPED_RIGHT_NO_LINE

GM_PEN_SCALLOP_LEFT = _globalmapper.GM_PEN_SCALLOP_LEFT

GM_PEN_SCALLOP_RIGHT = _globalmapper.GM_PEN_SCALLOP_RIGHT

GM_PEN_SCALLOP_BOTH = _globalmapper.GM_PEN_SCALLOP_BOTH

GM_PEN_LAST_DIRECTED_PLUS_ONE = _globalmapper.GM_PEN_LAST_DIRECTED_PLUS_ONE

GM_PEN_LAST_DIRECTED = _globalmapper.GM_PEN_LAST_DIRECTED

GM_PEN_FIRST_DIRECTED_TRACK = _globalmapper.GM_PEN_FIRST_DIRECTED_TRACK

GM_PEN_V_TRACK_FORWARD = _globalmapper.GM_PEN_V_TRACK_FORWARD

GM_PEN_V_TRACK_REVERSE = _globalmapper.GM_PEN_V_TRACK_REVERSE

GM_PEN_C_TRACK_FORWARD = _globalmapper.GM_PEN_C_TRACK_FORWARD

GM_PEN_C_TRACK_REVERSE = _globalmapper.GM_PEN_C_TRACK_REVERSE

GM_PEN_ARROW_TRACK_REVERSE = _globalmapper.GM_PEN_ARROW_TRACK_REVERSE

GM_PEN_ARROW_TRACK_FORWARD = _globalmapper.GM_PEN_ARROW_TRACK_FORWARD

GM_PEN_V_TRACK_SOLID_FORWARD = _globalmapper.GM_PEN_V_TRACK_SOLID_FORWARD

GM_PEN_V_TRACK_SOLID_REVERSE = _globalmapper.GM_PEN_V_TRACK_SOLID_REVERSE

GM_PEN_LAST_DIRECTED_TRACK_PLUS_ONE = _globalmapper.GM_PEN_LAST_DIRECTED_TRACK_PLUS_ONE

GM_PEN_LAST_DIRECTED_TRACK = _globalmapper.GM_PEN_LAST_DIRECTED_TRACK

GM_PEN_FIRST_BOTH_SIDES_NO_LINE = _globalmapper.GM_PEN_FIRST_BOTH_SIDES_NO_LINE

GM_PEN_MINUS_SIGNS_BOTH_NO_LINE = _globalmapper.GM_PEN_MINUS_SIGNS_BOTH_NO_LINE

GM_PEN_LAST_BOTH_SIDES_NO_LINE_PLUS_ONE = _globalmapper.GM_PEN_LAST_BOTH_SIDES_NO_LINE_PLUS_ONE

GM_PEN_LAST_BOTH_SIDES_NO_LINE = _globalmapper.GM_PEN_LAST_BOTH_SIDES_NO_LINE

GM_PEN_FIRST_SOLID_SYMBOL = _globalmapper.GM_PEN_FIRST_SOLID_SYMBOL

GM_PEN_SOLID_WITH_X = _globalmapper.GM_PEN_SOLID_WITH_X

GM_PEN_SOLID_DIAMONDS = _globalmapper.GM_PEN_SOLID_DIAMONDS

GM_PEN_SOLID_EMPTY_DIAMONDS = _globalmapper.GM_PEN_SOLID_EMPTY_DIAMONDS

GM_PEN_SOLID_CIRCLES = _globalmapper.GM_PEN_SOLID_CIRCLES

GM_PEN_SOLID_EMPTY_CIRCLES = _globalmapper.GM_PEN_SOLID_EMPTY_CIRCLES

GM_PEN_LAST_SOLID_SYMBOL_PLUS_ONE = _globalmapper.GM_PEN_LAST_SOLID_SYMBOL_PLUS_ONE

GM_PEN_LAST_SOLID_SYMBOL = _globalmapper.GM_PEN_LAST_SOLID_SYMBOL

GM_PEN_FIRST_END_SYMBOL = _globalmapper.GM_PEN_FIRST_END_SYMBOL

GM_PEN_ARROW_TO_START = _globalmapper.GM_PEN_ARROW_TO_START

GM_PEN_ARROW_TO_END = _globalmapper.GM_PEN_ARROW_TO_END

GM_PEN_EMPTY_CIRCLE_AT_START = _globalmapper.GM_PEN_EMPTY_CIRCLE_AT_START

GM_PEN_EMPTY_CIRCLE_AT_END = _globalmapper.GM_PEN_EMPTY_CIRCLE_AT_END

GM_PEN_STRIPED_BLACK_EDGES = _globalmapper.GM_PEN_STRIPED_BLACK_EDGES

GM_PEN_ARROW_TO_BOTH_ENDS = _globalmapper.GM_PEN_ARROW_TO_BOTH_ENDS

GM_PEN_ARROW_TO_START_DASHED = _globalmapper.GM_PEN_ARROW_TO_START_DASHED

GM_PEN_ARROW_TO_END_DASHED = _globalmapper.GM_PEN_ARROW_TO_END_DASHED

GM_PEN_ARROW_TO_BOTH_ENDS_DASHED = _globalmapper.GM_PEN_ARROW_TO_BOTH_ENDS_DASHED

GM_PEN_MAP_LAYOUT_ARROWS_START = _globalmapper.GM_PEN_MAP_LAYOUT_ARROWS_START

GM_PEN_MLE_EMPTY_CIRCLE_AT_START = _globalmapper.GM_PEN_MLE_EMPTY_CIRCLE_AT_START

GM_PEN_MLE_EMPTY_CIRCLE_AT_END = _globalmapper.GM_PEN_MLE_EMPTY_CIRCLE_AT_END

GM_PEN_MLE_ARROW_TO_END = _globalmapper.GM_PEN_MLE_ARROW_TO_END

GM_PEN_MLE_SOLID_CIRCLE_TO_END = _globalmapper.GM_PEN_MLE_SOLID_CIRCLE_TO_END

GM_PEN_MLE_SOLID_SQUARE_TO_END = _globalmapper.GM_PEN_MLE_SOLID_SQUARE_TO_END

GM_PEN_MLE_EMPTY_SQUARE_TO_END = _globalmapper.GM_PEN_MLE_EMPTY_SQUARE_TO_END

GM_PEN_MLE_FEATHERS_TO_END = _globalmapper.GM_PEN_MLE_FEATHERS_TO_END

GM_PEN_MLE_EQUILAT_TO_END = _globalmapper.GM_PEN_MLE_EQUILAT_TO_END

GM_PEN_MLE_HALFNHALF_TO_END = _globalmapper.GM_PEN_MLE_HALFNHALF_TO_END

GM_PEN_MLE_SOLID_CIRCLE_TO_START = _globalmapper.GM_PEN_MLE_SOLID_CIRCLE_TO_START

GM_PEN_MLE_SOLID_SQUARE_TO_START = _globalmapper.GM_PEN_MLE_SOLID_SQUARE_TO_START

GM_PEN_MLE_EMPTY_SQUARE_TO_START = _globalmapper.GM_PEN_MLE_EMPTY_SQUARE_TO_START

GM_PEN_MLE_FEATHERS_TO_START = _globalmapper.GM_PEN_MLE_FEATHERS_TO_START

GM_PEN_MAP_LAYOUT_ARROWS_END = _globalmapper.GM_PEN_MAP_LAYOUT_ARROWS_END

GM_PEN_LAST_END_SYMBOL_PLUS_ONE = _globalmapper.GM_PEN_LAST_END_SYMBOL_PLUS_ONE

GM_PEN_LAST_END_SYMBOL = _globalmapper.GM_PEN_LAST_END_SYMBOL

GM_PEN_FIRST_CUSTOM_DASH_STYLE = _globalmapper.GM_PEN_FIRST_CUSTOM_DASH_STYLE

GM_PEN_DASH_VERY_SHORT_WIDE_SPACED = _globalmapper.GM_PEN_DASH_VERY_SHORT_WIDE_SPACED

GM_PEN_DASH_SHORT_WIDE_SPACED = _globalmapper.GM_PEN_DASH_SHORT_WIDE_SPACED

GM_PEN_DASH_LONG_WIDE_SPACED = _globalmapper.GM_PEN_DASH_LONG_WIDE_SPACED

GM_PEN_DASH_ULTRA_SHORT_CLOSE_SPACED = _globalmapper.GM_PEN_DASH_ULTRA_SHORT_CLOSE_SPACED

GM_PEN_DASH_LONG_CLOSE_SPACED = _globalmapper.GM_PEN_DASH_LONG_CLOSE_SPACED

GM_PEN_LAST_CUSTOM_DASH_STYLE_PLUS_ONE = _globalmapper.GM_PEN_LAST_CUSTOM_DASH_STYLE_PLUS_ONE

GM_PEN_LAST_CUSTOM_DASH_STYLE = _globalmapper.GM_PEN_LAST_CUSTOM_DASH_STYLE

GM_PEN_FIRST_ELEVATION_STYLE = _globalmapper.GM_PEN_FIRST_ELEVATION_STYLE

GM_PEN_ELEV_SHADED_SOLID = _globalmapper.GM_PEN_ELEV_SHADED_SOLID

GM_PEN_ELEV_SHADED_DASH = _globalmapper.GM_PEN_ELEV_SHADED_DASH

GM_PEN_ELEV_SHADED_DOT = _globalmapper.GM_PEN_ELEV_SHADED_DOT

GM_PEN_ELEV_SHADED_DASHDOT = _globalmapper.GM_PEN_ELEV_SHADED_DASHDOT

GM_PEN_ELEV_SHADED_DASHDOTDOT = _globalmapper.GM_PEN_ELEV_SHADED_DASHDOTDOT

GM_PEN_LAST_ELEVATION_STYLE_PLUS_ONE = _globalmapper.GM_PEN_LAST_ELEVATION_STYLE_PLUS_ONE

GM_PEN_LAST_ELEVATION_STYLE = _globalmapper.GM_PEN_LAST_ELEVATION_STYLE

GM_PEN_FIRST_OFFSET_LINE_STYLE = _globalmapper.GM_PEN_FIRST_OFFSET_LINE_STYLE

GM_PEN_OFFSET_LINE_LEFT = _globalmapper.GM_PEN_OFFSET_LINE_LEFT

GM_PEN_OFFSET_LINE_RIGHT = _globalmapper.GM_PEN_OFFSET_LINE_RIGHT

GM_PEN_OFFSET_LINE_LEFT_COMB = _globalmapper.GM_PEN_OFFSET_LINE_LEFT_COMB

GM_PEN_OFFSET_LINE_RIGHT_COMB = _globalmapper.GM_PEN_OFFSET_LINE_RIGHT_COMB

GM_PEN_OFFSET_LINE_LEFT_COMB_LONG_TEETH = _globalmapper.GM_PEN_OFFSET_LINE_LEFT_COMB_LONG_TEETH

GM_PEN_OFFSET_LINE_RIGHT_COMB_LONG_TEETH = _globalmapper.GM_PEN_OFFSET_LINE_RIGHT_COMB_LONG_TEETH

GM_PEN_OFFSET_LINE_LEFT_COMB_WIDE_SPACED = _globalmapper.GM_PEN_OFFSET_LINE_LEFT_COMB_WIDE_SPACED

GM_PEN_OFFSET_LINE_RIGHT_COMB_WIDE_SPACED = _globalmapper.GM_PEN_OFFSET_LINE_RIGHT_COMB_WIDE_SPACED

GM_PEN_LAST_OFFSET_LINE_STYLE_PLUS_ONE = _globalmapper.GM_PEN_LAST_OFFSET_LINE_STYLE_PLUS_ONE

GM_PEN_LAST_OFFSET_LINE_STYLE = _globalmapper.GM_PEN_LAST_OFFSET_LINE_STYLE

GM_PEN_FIRST_ADDITIONAL_STYLE = _globalmapper.GM_PEN_FIRST_ADDITIONAL_STYLE

GM_PEN_RAILROAD_WIDE = _globalmapper.GM_PEN_RAILROAD_WIDE

GM_PEN_RAILROAD_DOUBLE = _globalmapper.GM_PEN_RAILROAD_DOUBLE

GM_PEN_NUM_STYLES = _globalmapper.GM_PEN_NUM_STYLES

GM_PEN_FIRST_STYLIZED = _globalmapper.GM_PEN_FIRST_STYLIZED

GM_LABEL_AUTO = _globalmapper.GM_LABEL_AUTO

GM_LABEL_CENTER = _globalmapper.GM_LABEL_CENTER

GM_LABEL_TOP_RIGHT = _globalmapper.GM_LABEL_TOP_RIGHT

GM_LABEL_RIGHT = _globalmapper.GM_LABEL_RIGHT

GM_LABEL_BOTTOM_RIGHT = _globalmapper.GM_LABEL_BOTTOM_RIGHT

GM_LABEL_BOTTOM = _globalmapper.GM_LABEL_BOTTOM

GM_LABEL_BOTTOM_LEFT = _globalmapper.GM_LABEL_BOTTOM_LEFT

GM_LABEL_LEFT = _globalmapper.GM_LABEL_LEFT

GM_LABEL_TOP_LEFT = _globalmapper.GM_LABEL_TOP_LEFT

GM_LABEL_TOP = _globalmapper.GM_LABEL_TOP

GM_LABEL_RIGHT_BASELINE = _globalmapper.GM_LABEL_RIGHT_BASELINE

GM_LABEL_CENTER_BASELINE = _globalmapper.GM_LABEL_CENTER_BASELINE

GM_LABEL_LEFT_BASELINE = _globalmapper.GM_LABEL_LEFT_BASELINE

GM_LABEL_NUM_PLACEMENTS = _globalmapper.GM_LABEL_NUM_PLACEMENTS

GM_LABEL_AT_EDGE = _globalmapper.GM_LABEL_AT_EDGE

GM_SAMPLING_NEAREST_NEIGHBOR = _globalmapper.GM_SAMPLING_NEAREST_NEIGHBOR

GM_SAMPLING_BILINEAR_INTERPOLATION = _globalmapper.GM_SAMPLING_BILINEAR_INTERPOLATION

GM_SAMPLING_BICUBIC_INTERPOLATION = _globalmapper.GM_SAMPLING_BICUBIC_INTERPOLATION

GM_SAMPLING_BOX_AVG_2X2 = _globalmapper.GM_SAMPLING_BOX_AVG_2X2

GM_SAMPLING_BOX_AVG_3X3 = _globalmapper.GM_SAMPLING_BOX_AVG_3X3

GM_SAMPLING_BOX_AVG_4X4 = _globalmapper.GM_SAMPLING_BOX_AVG_4X4

GM_SAMPLING_BOX_AVG_5X5 = _globalmapper.GM_SAMPLING_BOX_AVG_5X5

GM_SAMPLING_BOX_AVG_6X6 = _globalmapper.GM_SAMPLING_BOX_AVG_6X6

GM_SAMPLING_BOX_AVG_7X7 = _globalmapper.GM_SAMPLING_BOX_AVG_7X7

GM_SAMPLING_BOX_AVG_8X8 = _globalmapper.GM_SAMPLING_BOX_AVG_8X8

GM_SAMPLING_BOX_AVG_9X9 = _globalmapper.GM_SAMPLING_BOX_AVG_9X9

GM_SAMPLING_BOX_MAX_2X2 = _globalmapper.GM_SAMPLING_BOX_MAX_2X2

GM_SAMPLING_BOX_MAX_3X3 = _globalmapper.GM_SAMPLING_BOX_MAX_3X3

GM_SAMPLING_BOX_MAX_4X4 = _globalmapper.GM_SAMPLING_BOX_MAX_4X4

GM_SAMPLING_BOX_MAX_5X5 = _globalmapper.GM_SAMPLING_BOX_MAX_5X5

GM_SAMPLING_BOX_MAX_6X6 = _globalmapper.GM_SAMPLING_BOX_MAX_6X6

GM_SAMPLING_BOX_MAX_7X7 = _globalmapper.GM_SAMPLING_BOX_MAX_7X7

GM_SAMPLING_BOX_MAX_8X8 = _globalmapper.GM_SAMPLING_BOX_MAX_8X8

GM_SAMPLING_BOX_MAX_9X9 = _globalmapper.GM_SAMPLING_BOX_MAX_9X9

GM_SAMPLING_BOX_MIN_2X2 = _globalmapper.GM_SAMPLING_BOX_MIN_2X2

GM_SAMPLING_BOX_MIN_3X3 = _globalmapper.GM_SAMPLING_BOX_MIN_3X3

GM_SAMPLING_BOX_MIN_4X4 = _globalmapper.GM_SAMPLING_BOX_MIN_4X4

GM_SAMPLING_BOX_MIN_5X5 = _globalmapper.GM_SAMPLING_BOX_MIN_5X5

GM_SAMPLING_BOX_MIN_6X6 = _globalmapper.GM_SAMPLING_BOX_MIN_6X6

GM_SAMPLING_BOX_MIN_7X7 = _globalmapper.GM_SAMPLING_BOX_MIN_7X7

GM_SAMPLING_BOX_MIN_8X8 = _globalmapper.GM_SAMPLING_BOX_MIN_8X8

GM_SAMPLING_BOX_MIN_9X9 = _globalmapper.GM_SAMPLING_BOX_MIN_9X9

GM_SAMPLING_BOX_MED_2X2 = _globalmapper.GM_SAMPLING_BOX_MED_2X2

GM_SAMPLING_BOX_MED_3X3 = _globalmapper.GM_SAMPLING_BOX_MED_3X3

GM_SAMPLING_BOX_MED_4X4 = _globalmapper.GM_SAMPLING_BOX_MED_4X4

GM_SAMPLING_BOX_MED_5X5 = _globalmapper.GM_SAMPLING_BOX_MED_5X5

GM_SAMPLING_BOX_MED_6X6 = _globalmapper.GM_SAMPLING_BOX_MED_6X6

GM_SAMPLING_BOX_MED_7X7 = _globalmapper.GM_SAMPLING_BOX_MED_7X7

GM_SAMPLING_BOX_MED_8X8 = _globalmapper.GM_SAMPLING_BOX_MED_8X8

GM_SAMPLING_BOX_MED_9X9 = _globalmapper.GM_SAMPLING_BOX_MED_9X9

GM_SAMPLING_BOX_BLUR_3X3 = _globalmapper.GM_SAMPLING_BOX_BLUR_3X3

GM_SAMPLING_BOX_BLUR_5X5 = _globalmapper.GM_SAMPLING_BOX_BLUR_5X5

GM_SAMPLING_BOX_BLUR_7X7 = _globalmapper.GM_SAMPLING_BOX_BLUR_7X7

GM_SAMPLING_BOX_MODE_2X2 = _globalmapper.GM_SAMPLING_BOX_MODE_2X2

GM_SAMPLING_BOX_MODE_3X3 = _globalmapper.GM_SAMPLING_BOX_MODE_3X3

GM_SAMPLING_BOX_MODE_4X4 = _globalmapper.GM_SAMPLING_BOX_MODE_4X4

GM_SAMPLING_BOX_MODE_5X5 = _globalmapper.GM_SAMPLING_BOX_MODE_5X5

GM_SAMPLING_BOX_MODE_6X6 = _globalmapper.GM_SAMPLING_BOX_MODE_6X6

GM_SAMPLING_BOX_MODE_7X7 = _globalmapper.GM_SAMPLING_BOX_MODE_7X7

GM_SAMPLING_BOX_MODE_8X8 = _globalmapper.GM_SAMPLING_BOX_MODE_8X8

GM_SAMPLING_BOX_MODE_9X9 = _globalmapper.GM_SAMPLING_BOX_MODE_9X9

GM_SAMPLING_SHARPEN_3X3 = _globalmapper.GM_SAMPLING_SHARPEN_3X3

GM_SAMPLING_SHARPEN_II_3X3 = _globalmapper.GM_SAMPLING_SHARPEN_II_3X3

GM_SAMPLING_SHARPEN_HIGH_PASS_3X3 = _globalmapper.GM_SAMPLING_SHARPEN_HIGH_PASS_3X3

GM_SAMPLING_SHARPEN_HIGH_PASS_5X5 = _globalmapper.GM_SAMPLING_SHARPEN_HIGH_PASS_5X5

GM_SAMPLING_SMOOTHING_3X3 = _globalmapper.GM_SAMPLING_SMOOTHING_3X3

GM_SAMPLING_SMOOTHING_5X5 = _globalmapper.GM_SAMPLING_SMOOTHING_5X5

GM_SAMPLING_GRADIENT_N_3X3 = _globalmapper.GM_SAMPLING_GRADIENT_N_3X3

GM_SAMPLING_GRADIENT_E_3X3 = _globalmapper.GM_SAMPLING_GRADIENT_E_3X3

GM_SAMPLING_GRADIENT_S_3X3 = _globalmapper.GM_SAMPLING_GRADIENT_S_3X3

GM_SAMPLING_GRADIENT_W_3X3 = _globalmapper.GM_SAMPLING_GRADIENT_W_3X3

GM_SAMPLING_GRADIENT_NE_3X3 = _globalmapper.GM_SAMPLING_GRADIENT_NE_3X3

GM_SAMPLING_GRADIENT_NW_3X3 = _globalmapper.GM_SAMPLING_GRADIENT_NW_3X3

GM_SAMPLING_LAPLACIAN_3X3 = _globalmapper.GM_SAMPLING_LAPLACIAN_3X3

GM_SAMPLING_LAPLACIAN_5X5 = _globalmapper.GM_SAMPLING_LAPLACIAN_5X5

GM_SAMPLING_LINE_DETECT_HORZ_3X3 = _globalmapper.GM_SAMPLING_LINE_DETECT_HORZ_3X3

GM_SAMPLING_LINE_DETECT_VERT_3X3 = _globalmapper.GM_SAMPLING_LINE_DETECT_VERT_3X3

GM_SAMPLING_LINE_DETECT_L_DIAG_3X3 = _globalmapper.GM_SAMPLING_LINE_DETECT_L_DIAG_3X3

GM_SAMPLING_LINE_DETECT_R_DIAG_3X3 = _globalmapper.GM_SAMPLING_LINE_DETECT_R_DIAG_3X3

GM_SAMPLING_SOBEL_HORZ_3X3 = _globalmapper.GM_SAMPLING_SOBEL_HORZ_3X3

GM_SAMPLING_SOBEL_VERT_3X3 = _globalmapper.GM_SAMPLING_SOBEL_VERT_3X3

GM_NUM_SAMPLING_METHODS = _globalmapper.GM_NUM_SAMPLING_METHODS

GM_SAMPLING_BOX_AVG_FIRST = _globalmapper.GM_SAMPLING_BOX_AVG_FIRST

GM_SAMPLING_BOX_AVG_LAST = _globalmapper.GM_SAMPLING_BOX_AVG_LAST

GM_SAMPLING_BOX_MAX_FIRST = _globalmapper.GM_SAMPLING_BOX_MAX_FIRST

GM_SAMPLING_BOX_MAX_LAST = _globalmapper.GM_SAMPLING_BOX_MAX_LAST

GM_SAMPLING_BOX_MIN_FIRST = _globalmapper.GM_SAMPLING_BOX_MIN_FIRST

GM_SAMPLING_BOX_MIN_LAST = _globalmapper.GM_SAMPLING_BOX_MIN_LAST

GM_SAMPLING_BOX_MED_FIRST = _globalmapper.GM_SAMPLING_BOX_MED_FIRST

GM_SAMPLING_BOX_MED_LAST = _globalmapper.GM_SAMPLING_BOX_MED_LAST

GM_SAMPLING_BOX_BLUR_FIRST = _globalmapper.GM_SAMPLING_BOX_BLUR_FIRST

GM_SAMPLING_BOX_BLUR_LAST = _globalmapper.GM_SAMPLING_BOX_BLUR_LAST

GM_SAMPLING_BOX_MODE_FIRST = _globalmapper.GM_SAMPLING_BOX_MODE_FIRST

GM_SAMPLING_BOX_MODE_LAST = _globalmapper.GM_SAMPLING_BOX_MODE_LAST

GM_SAMPLING_SHARPEN_HIGH_FIRST = _globalmapper.GM_SAMPLING_SHARPEN_HIGH_FIRST

GM_SAMPLING_SHARPEN_HIGH_LAST = _globalmapper.GM_SAMPLING_SHARPEN_HIGH_LAST

GM_SAMPLING_SMOOTHING_FIRST = _globalmapper.GM_SAMPLING_SMOOTHING_FIRST

GM_SAMPLING_SMOOTHING_LAST = _globalmapper.GM_SAMPLING_SMOOTHING_LAST

GM_SAMPLING_GRADIENT_FIRST = _globalmapper.GM_SAMPLING_GRADIENT_FIRST

GM_SAMPLING_GRADIENT_LAST = _globalmapper.GM_SAMPLING_GRADIENT_LAST

GM_SAMPLING_LAPLACIAN_FIRST = _globalmapper.GM_SAMPLING_LAPLACIAN_FIRST

GM_SAMPLING_LAPLACIAN_LAST = _globalmapper.GM_SAMPLING_LAPLACIAN_LAST

GM_SAMPLING_LINE_DETECT_FIRST = _globalmapper.GM_SAMPLING_LINE_DETECT_FIRST

GM_SAMPLING_LINE_DETECT_LAST = _globalmapper.GM_SAMPLING_LINE_DETECT_LAST

GM_SAMPLING_SOBEL_FIRST = _globalmapper.GM_SAMPLING_SOBEL_FIRST

GM_SAMPLING_SOBEL_LAST = _globalmapper.GM_SAMPLING_SOBEL_LAST

GM_SAMPLING_FIRST_MATRIX_METHOD = _globalmapper.GM_SAMPLING_FIRST_MATRIX_METHOD

GM_SAMPLING_MAX_BOX_SIZE = _globalmapper.GM_SAMPLING_MAX_BOX_SIZE

GM_SAMPLING_MAX_BLUR_SIZE = _globalmapper.GM_SAMPLING_MAX_BLUR_SIZE

GM_BOX_OP_AVG = _globalmapper.GM_BOX_OP_AVG

GM_BOX_OP_MAX = _globalmapper.GM_BOX_OP_MAX

GM_BOX_OP_MIN = _globalmapper.GM_BOX_OP_MIN

GM_BOX_OP_MED = _globalmapper.GM_BOX_OP_MED

GM_BOX_OP_BLUR = _globalmapper.GM_BOX_OP_BLUR

GM_BOX_OP_MODE = _globalmapper.GM_BOX_OP_MODE

GM_BOX_OP_SHARPEN = _globalmapper.GM_BOX_OP_SHARPEN

GM_BOX_OP_SHARPEN_II = _globalmapper.GM_BOX_OP_SHARPEN_II

GM_BOX_OP_SHARPEN_HIGH = _globalmapper.GM_BOX_OP_SHARPEN_HIGH

GM_BOX_OP_SMOOTH = _globalmapper.GM_BOX_OP_SMOOTH

GM_BOX_OP_GRAD_N = _globalmapper.GM_BOX_OP_GRAD_N

GM_BOX_OP_GRAD_E = _globalmapper.GM_BOX_OP_GRAD_E

GM_BOX_OP_GRAD_S = _globalmapper.GM_BOX_OP_GRAD_S

GM_BOX_OP_GRAD_W = _globalmapper.GM_BOX_OP_GRAD_W

GM_BOX_OP_GRAD_NE = _globalmapper.GM_BOX_OP_GRAD_NE

GM_BOX_OP_GRAD_NW = _globalmapper.GM_BOX_OP_GRAD_NW

GM_BOX_OP_LAPLACIAN = _globalmapper.GM_BOX_OP_LAPLACIAN

GM_BOX_OP_LINE_DETECT_HORZ = _globalmapper.GM_BOX_OP_LINE_DETECT_HORZ

GM_BOX_OP_LINE_DETECT_VERT = _globalmapper.GM_BOX_OP_LINE_DETECT_VERT

GM_BOX_OP_LINE_DETECT_L_DIAG = _globalmapper.GM_BOX_OP_LINE_DETECT_L_DIAG

GM_BOX_OP_LINE_DETECT_R_DIAG = _globalmapper.GM_BOX_OP_LINE_DETECT_R_DIAG

GM_BOX_OP_SOBEL_HORZ = _globalmapper.GM_BOX_OP_SOBEL_HORZ

GM_BOX_OP_SOBEL_VERT = _globalmapper.GM_BOX_OP_SOBEL_VERT

GM_NUM_BOX_OPS = _globalmapper.GM_NUM_BOX_OPS

GM_SAMPLING_EXPORT_DEFAULT = _globalmapper.GM_SAMPLING_EXPORT_DEFAULT

GM_SAMPLING_EXPORT_AUTOMATIC = _globalmapper.GM_SAMPLING_EXPORT_AUTOMATIC

GM_SAMPLING_EXPORT_KEEP_LAYER = _globalmapper.GM_SAMPLING_EXPORT_KEEP_LAYER

GM_SAMPLING_EXPORT_CONV_FILTER_MASK = _globalmapper.GM_SAMPLING_EXPORT_CONV_FILTER_MASK

GM_SAMPLING_EXPORT_CUSTOM_MASK = _globalmapper.GM_SAMPLING_EXPORT_CUSTOM_MASK

GM_LANG_ENGLISH = _globalmapper.GM_LANG_ENGLISH

GM_LANG_ARABIC = _globalmapper.GM_LANG_ARABIC

GM_LANG_FRENCH = _globalmapper.GM_LANG_FRENCH

GM_LANG_GREEK = _globalmapper.GM_LANG_GREEK

GM_LANG_ITALIAN = _globalmapper.GM_LANG_ITALIAN

GM_LANG_KOREAN = _globalmapper.GM_LANG_KOREAN

GM_LANG_JAPANESE = _globalmapper.GM_LANG_JAPANESE

GM_LANG_PORTUGESE = _globalmapper.GM_LANG_PORTUGESE

GM_LANG_CHINESE_TRADITIONAL = _globalmapper.GM_LANG_CHINESE_TRADITIONAL

GM_LANG_SPANISH = _globalmapper.GM_LANG_SPANISH

GM_LANG_POLISH = _globalmapper.GM_LANG_POLISH

GM_LANG_RUSSIAN = _globalmapper.GM_LANG_RUSSIAN

GM_LANG_TURKISH = _globalmapper.GM_LANG_TURKISH

GM_LANG_GERMAN = _globalmapper.GM_LANG_GERMAN

GM_LANG_NUM_LANGUAGES = _globalmapper.GM_LANG_NUM_LANGUAGES

GM_Log_Critical = _globalmapper.GM_Log_Critical

GM_Log_Error = _globalmapper.GM_Log_Error

GM_Log_Warning = _globalmapper.GM_Log_Warning

GM_Log_Status = _globalmapper.GM_Log_Status

GM_Log_Debug = _globalmapper.GM_Log_Debug

GM_Log_ExtremeDebug = _globalmapper.GM_Log_ExtremeDebug

GM_Log_Timing = _globalmapper.GM_Log_Timing

GM_Log_ImportantStatus = _globalmapper.GM_Log_ImportantStatus

GM_Log_HighestLogLevel = _globalmapper.GM_Log_HighestLogLevel

GM_Log_DontLog = _globalmapper.GM_Log_DontLog

GM_Log_Nothing = _globalmapper.GM_Log_Nothing

GM_Log_NotRead = _globalmapper.GM_Log_NotRead

GM_LayerFetch_IncludeHidden = _globalmapper.GM_LayerFetch_IncludeHidden

GM_LayerFetch_SingleUserCreated = _globalmapper.GM_LayerFetch_SingleUserCreated

GM_LayerFetch_IncludeFixedScreen = _globalmapper.GM_LayerFetch_IncludeFixedScreen

GM_LayerFetch_OnlyElev = _globalmapper.GM_LayerFetch_OnlyElev

GM_LayerFetch_OnlyRaster = _globalmapper.GM_LayerFetch_OnlyRaster

GM_LayerFetch_OnlyVector = _globalmapper.GM_LayerFetch_OnlyVector

GM_LayerFetch_OnlyArea = _globalmapper.GM_LayerFetch_OnlyArea

GM_LayerFetch_OnlyLidar = _globalmapper.GM_LayerFetch_OnlyLidar

GM_LayerFetch_OnlyLine = _globalmapper.GM_LayerFetch_OnlyLine

GM_LayerFetch_OnlyMesh = _globalmapper.GM_LayerFetch_OnlyMesh

GM_LayerFetch_OnlyPoint = _globalmapper.GM_LayerFetch_OnlyPoint

GM_LayerFetch_IncludeGridLines = _globalmapper.GM_LayerFetch_IncludeGridLines

GM_LayerFetch_IncludeActiveGPSTrack = _globalmapper.GM_LayerFetch_IncludeActiveGPSTrack

GM_LayerFetch_NoUserCreated = _globalmapper.GM_LayerFetch_NoUserCreated

GM_LayerFetch_ExportableOnly = _globalmapper.GM_LayerFetch_ExportableOnly

GM_LayerFetch_ExportableRenderOnly = _globalmapper.GM_LayerFetch_ExportableRenderOnly

GM_LayerFetch_NoParents = _globalmapper.GM_LayerFetch_NoParents

GM_LayerFetch_NoRaster = _globalmapper.GM_LayerFetch_NoRaster

GM_LayerFetch_NoVector = _globalmapper.GM_LayerFetch_NoVector

GM_LayerFetch_NoLidar = _globalmapper.GM_LayerFetch_NoLidar

GM_LayerFetch_IncClosingLayers = _globalmapper.GM_LayerFetch_IncClosingLayers

GM_LayerFetch_OnlyPalette = _globalmapper.GM_LayerFetch_OnlyPalette

GM_LayerFetch_OnlyGrayscale = _globalmapper.GM_LayerFetch_OnlyGrayscale

GM_LayerFetch_NoGrayscale = _globalmapper.GM_LayerFetch_NoGrayscale

GM_LayerFetch_IncludeMapLayoutIndex = _globalmapper.GM_LayerFetch_IncludeMapLayoutIndex

GM_LayerFetch_OnlyAlwaysOnTop = _globalmapper.GM_LayerFetch_OnlyAlwaysOnTop

GM_LayerFetch_OnlyFixedScreen = _globalmapper.GM_LayerFetch_OnlyFixedScreen

GM_LayerFetch_NoAllDeletedVector = _globalmapper.GM_LayerFetch_NoAllDeletedVector

GM_LayerFetch_Available = _globalmapper.GM_LayerFetch_Available

GM_LayerFetch_NoOnline = _globalmapper.GM_LayerFetch_NoOnline

GM_LayerFetch_Reverse = _globalmapper.GM_LayerFetch_Reverse

GM_LayerFetch_OnlySelectable = _globalmapper.GM_LayerFetch_OnlySelectable

GM_LayerFetch_AllLayers = _globalmapper.GM_LayerFetch_AllLayers

GM_LayerFetchEx_OnlyModified = _globalmapper.GM_LayerFetchEx_OnlyModified

GM_LayerFetchEx_OnlySaveToOrig = _globalmapper.GM_LayerFetchEx_OnlySaveToOrig

GM_LayerFetchEx_IncludeEmptyLayers = _globalmapper.GM_LayerFetchEx_IncludeEmptyLayers

GM_LayerFetchEx_IgnoreAnimateLayers = _globalmapper.GM_LayerFetchEx_IgnoreAnimateLayers

GM_LayerFetchEx_NoLabelLayers = _globalmapper.GM_LayerFetchEx_NoLabelLayers

GM_LayerFetchEx_OnlyTinLayers = _globalmapper.GM_LayerFetchEx_OnlyTinLayers

GM_LayerFetchEx_OnlyEditable = _globalmapper.GM_LayerFetchEx_OnlyEditable

GM_LayerFetchEx_OnlyOnline = _globalmapper.GM_LayerFetchEx_OnlyOnline

GM_LayerFetchEx_OnlySingleBand = _globalmapper.GM_LayerFetchEx_OnlySingleBand

GM_LayerFetchEx_NoCatalog = _globalmapper.GM_LayerFetchEx_NoCatalog

GM_LayerFetchEx_Default = _globalmapper.GM_LayerFetchEx_Default

GM_Layer_AddToUserCreated = _globalmapper.GM_Layer_AddToUserCreated

GM_Layer_MultipleSelectedParents = _globalmapper.GM_Layer_MultipleSelectedParents

GM_Layer_CreateNewLayerParent = _globalmapper.GM_Layer_CreateNewLayerParent

GM_Layer_MapLayoutLayers = _globalmapper.GM_Layer_MapLayoutLayers

GM_Layer_GPSLayers = _globalmapper.GM_Layer_GPSLayers

GM_Layer_NewLayerFromFile = _globalmapper.GM_Layer_NewLayerFromFile

GM_Layer_NormalPtr = _globalmapper.GM_Layer_NormalPtr

GM_Layer_MinSpecialLayerPtr = _globalmapper.GM_Layer_MinSpecialLayerPtr

GM_Layer_MaxSpecialLayerPtr = _globalmapper.GM_Layer_MaxSpecialLayerPtr

GM_RasterType_Image = _globalmapper.GM_RasterType_Image

GM_RasterType_ElevGrid = _globalmapper.GM_RasterType_ElevGrid

GM_RasterType_Density = _globalmapper.GM_RasterType_Density

GM_RasterType_Roughness = _globalmapper.GM_RasterType_Roughness

GM_RasterType_ViewShed = _globalmapper.GM_RasterType_ViewShed

GM_RasterType_LandCover = _globalmapper.GM_RasterType_LandCover

GM_RasterType_PowerGrid = _globalmapper.GM_RasterType_PowerGrid

GM_RasterType_Count = _globalmapper.GM_RasterType_Count

GM_RasterType_Intensity = _globalmapper.GM_RasterType_Intensity

GM_RasterType_NDVI = _globalmapper.GM_RasterType_NDVI

GM_RasterType_NDWI = _globalmapper.GM_RasterType_NDWI

GM_RasterType_Gravity = _globalmapper.GM_RasterType_Gravity

GM_RasterType_Temp = _globalmapper.GM_RasterType_Temp

GM_RasterType_Velocity = _globalmapper.GM_RasterType_Velocity

GM_RasterType_UnspecNonElev = _globalmapper.GM_RasterType_UnspecNonElev

GM_RasterType_Class = _globalmapper.GM_RasterType_Class

GM_RasterType_Curvature = _globalmapper.GM_RasterType_Curvature

GM_RasterType_Slope = _globalmapper.GM_RasterType_Slope

GM_RasterType_REM = _globalmapper.GM_RasterType_REM

GM_RasterType_NoWaterMask = _globalmapper.GM_RasterType_NoWaterMask

GM_RasterType_NoInterpolateMask = _globalmapper.GM_RasterType_NoInterpolateMask

GM_PixelTrans_None = _globalmapper.GM_PixelTrans_None

GM_PixelTrans_Alpha = _globalmapper.GM_PixelTrans_Alpha

GM_PixelTrans_AssociatedAlpha = _globalmapper.GM_PixelTrans_AssociatedAlpha

GM_PixelTrans_InvalidPixels = _globalmapper.GM_PixelTrans_InvalidPixels

GM_PixelTrans_SpecialVal = _globalmapper.GM_PixelTrans_SpecialVal

[docs]
class GM_Point_t(object):
    r"""Proxy of C++ GM_Point_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, x: "double"=0, y: "double"=0):
        _globalmapper.GM_Point_t_swiginit(self, _globalmapper.new_GM_Point_t(x, y))

    def __repr__( self ) :
        return str( (self.mX, self.mY ) )

    mX = property(_globalmapper.GM_Point_t_mX_get, _globalmapper.GM_Point_t_mX_set, doc=r"""mX : double""")
    mY = property(_globalmapper.GM_Point_t_mY_get, _globalmapper.GM_Point_t_mY_set, doc=r"""mY : double""")
    __swig_destroy__ = _globalmapper.delete_GM_Point_t


# Register GM_Point_t in _globalmapper:
_globalmapper.GM_Point_t_swigregister(GM_Point_t)

[docs]
class GM_Rectangle_t(object):
    r"""Proxy of C++ GM_Rectangle_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

[docs]
    def getCenterX(self) -> "double":
        r"""getCenterX(GM_Rectangle_t self) -> double"""
        return _globalmapper.GM_Rectangle_t_getCenterX(self)


[docs]
    def getCenterY(self) -> "double":
        r"""getCenterY(GM_Rectangle_t self) -> double"""
        return _globalmapper.GM_Rectangle_t_getCenterY(self)


[docs]
    def getHeight(self) -> "double":
        r"""getHeight(GM_Rectangle_t self) -> double"""
        return _globalmapper.GM_Rectangle_t_getHeight(self)


[docs]
    def getWidth(self) -> "double":
        r"""getWidth(GM_Rectangle_t self) -> double"""
        return _globalmapper.GM_Rectangle_t_getWidth(self)


[docs]
    def init(self, aPtList: "GM_Point_t", aNumPts: "uint32") -> "void":
        r"""
        init(GM_Rectangle_t self, GM_Point_t aPtList, uint32 aNumPts)

        Parameters
        ----------
        aPtList: GM_Point_t const *
        aNumPts: uint32

        """
        return _globalmapper.GM_Rectangle_t_init(self, aPtList, aNumPts)

    mMinX = property(_globalmapper.GM_Rectangle_t_mMinX_get, _globalmapper.GM_Rectangle_t_mMinX_set, doc=r"""mMinX : double""")
    mMinY = property(_globalmapper.GM_Rectangle_t_mMinY_get, _globalmapper.GM_Rectangle_t_mMinY_set, doc=r"""mMinY : double""")
    mMaxX = property(_globalmapper.GM_Rectangle_t_mMaxX_get, _globalmapper.GM_Rectangle_t_mMaxX_set, doc=r"""mMaxX : double""")
    mMaxY = property(_globalmapper.GM_Rectangle_t_mMaxY_get, _globalmapper.GM_Rectangle_t_mMaxY_set, doc=r"""mMaxY : double""")

    def __init__(self, a: "double"=0, b: "double"=0, c: "double"=0, d: "double"=0):
        _globalmapper.GM_Rectangle_t_swiginit(self, _globalmapper.new_GM_Rectangle_t(a, b, c, d))

    def __repr__( self ) :
        return str( (self.mMinX, self.mMinY, self.mMaxX, self.mMaxY) )

    __swig_destroy__ = _globalmapper.delete_GM_Rectangle_t


# Register GM_Rectangle_t in _globalmapper:
_globalmapper.GM_Rectangle_t_swigregister(GM_Rectangle_t)

[docs]
class GM_PixelRect_t(object):
    r"""Proxy of C++ GM_PixelRect_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

[docs]
    def getHeight(self) -> "double":
        r"""getHeight(GM_PixelRect_t self) -> double"""
        return _globalmapper.GM_PixelRect_t_getHeight(self)


[docs]
    def getWidth(self) -> "double":
        r"""getWidth(GM_PixelRect_t self) -> double"""
        return _globalmapper.GM_PixelRect_t_getWidth(self)

    mLeft = property(_globalmapper.GM_PixelRect_t_mLeft_get, _globalmapper.GM_PixelRect_t_mLeft_set, doc=r"""mLeft : sint32""")
    mRight = property(_globalmapper.GM_PixelRect_t_mRight_get, _globalmapper.GM_PixelRect_t_mRight_set, doc=r"""mRight : sint32""")
    mTop = property(_globalmapper.GM_PixelRect_t_mTop_get, _globalmapper.GM_PixelRect_t_mTop_set, doc=r"""mTop : sint32""")
    mBottom = property(_globalmapper.GM_PixelRect_t_mBottom_get, _globalmapper.GM_PixelRect_t_mBottom_set, doc=r"""mBottom : sint32""")

    def __init__(self, *args):
        _globalmapper.GM_PixelRect_t_swiginit(self, _globalmapper.new_GM_PixelRect_t(*args))

    def __repr__( self ) :
        return str( (self.mLeft, self.mRight, self.mTop, self.mBottom) )

    __swig_destroy__ = _globalmapper.delete_GM_PixelRect_t


# Register GM_PixelRect_t in _globalmapper:
_globalmapper.GM_PixelRect_t_swigregister(GM_PixelRect_t)

GM_Bounds_Global = _globalmapper.GM_Bounds_Global

GM_Bounds_Export = _globalmapper.GM_Bounds_Export

GM_Bounds_DefaultView = _globalmapper.GM_Bounds_DefaultView

GM_Bounds_Native = _globalmapper.GM_Bounds_Native

GM_Bounds_NumTypes = _globalmapper.GM_Bounds_NumTypes

GM_BLENDING_ALG_AVERAGE = _globalmapper.GM_BLENDING_ALG_AVERAGE

GM_BLENDING_ALG_MAXIMUM = _globalmapper.GM_BLENDING_ALG_MAXIMUM

GM_BLENDING_ALG_MINIMUM = _globalmapper.GM_BLENDING_ALG_MINIMUM

GM_BLENDING_ALG_WEIGHTED_AVERAGE = _globalmapper.GM_BLENDING_ALG_WEIGHTED_AVERAGE

GM_BLENDING_NUM_TYPES = _globalmapper.GM_BLENDING_NUM_TYPES

GM_SlopeAlg_Combined4 = _globalmapper.GM_SlopeAlg_Combined4

GM_SlopeAlg_Combined8 = _globalmapper.GM_SlopeAlg_Combined8

GM_SlopeAlg_Max4 = _globalmapper.GM_SlopeAlg_Max4

GM_SlopeAlg_Max8 = _globalmapper.GM_SlopeAlg_Max8

GM_SlopeAlg_NumTypes = _globalmapper.GM_SlopeAlg_NumTypes

GM_SlopeAlg_Default = _globalmapper.GM_SlopeAlg_Default

[docs]
class GM_VerticalDisplayOptions_t(object):
    r"""Proxy of C++ GM_VerticalDisplayOptions_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    mSize = property(_globalmapper.GM_VerticalDisplayOptions_t_mSize_get, _globalmapper.GM_VerticalDisplayOptions_t_mSize_set, doc=r"""mSize : uint32""")
    mShaderName = property(_globalmapper.GM_VerticalDisplayOptions_t_mShaderName_get, _globalmapper.GM_VerticalDisplayOptions_t_mShaderName_set, doc=r"""mShaderName : p.q(const).char""")
    mAmbientLight = property(_globalmapper.GM_VerticalDisplayOptions_t_mAmbientLight_get, _globalmapper.GM_VerticalDisplayOptions_t_mAmbientLight_set, doc=r"""mAmbientLight : float""")
    mVertExag = property(_globalmapper.GM_VerticalDisplayOptions_t_mVertExag_get, _globalmapper.GM_VerticalDisplayOptions_t_mVertExag_set, doc=r"""mVertExag : float""")
    mLightAltitude = property(_globalmapper.GM_VerticalDisplayOptions_t_mLightAltitude_get, _globalmapper.GM_VerticalDisplayOptions_t_mLightAltitude_set, doc=r"""mLightAltitude : float""")
    mLightAzimuth = property(_globalmapper.GM_VerticalDisplayOptions_t_mLightAzimuth_get, _globalmapper.GM_VerticalDisplayOptions_t_mLightAzimuth_set, doc=r"""mLightAzimuth : float""")
    mHillShading = property(_globalmapper.GM_VerticalDisplayOptions_t_mHillShading_get, _globalmapper.GM_VerticalDisplayOptions_t_mHillShading_set, doc=r"""mHillShading : boolean""")
    mWaterEnabled = property(_globalmapper.GM_VerticalDisplayOptions_t_mWaterEnabled_get, _globalmapper.GM_VerticalDisplayOptions_t_mWaterEnabled_set, doc=r"""mWaterEnabled : boolean""")
    mWaterAlpha = property(_globalmapper.GM_VerticalDisplayOptions_t_mWaterAlpha_get, _globalmapper.GM_VerticalDisplayOptions_t_mWaterAlpha_set, doc=r"""mWaterAlpha : uint8""")
    mWaterColorRed = property(_globalmapper.GM_VerticalDisplayOptions_t_mWaterColorRed_get, _globalmapper.GM_VerticalDisplayOptions_t_mWaterColorRed_set, doc=r"""mWaterColorRed : uint8""")
    mWaterColorGrn = property(_globalmapper.GM_VerticalDisplayOptions_t_mWaterColorGrn_get, _globalmapper.GM_VerticalDisplayOptions_t_mWaterColorGrn_set, doc=r"""mWaterColorGrn : uint8""")
    mWaterColorBlue = property(_globalmapper.GM_VerticalDisplayOptions_t_mWaterColorBlue_get, _globalmapper.GM_VerticalDisplayOptions_t_mWaterColorBlue_set, doc=r"""mWaterColorBlue : uint8""")
    mWaterLevel = property(_globalmapper.GM_VerticalDisplayOptions_t_mWaterLevel_get, _globalmapper.GM_VerticalDisplayOptions_t_mWaterLevel_set, doc=r"""mWaterLevel : float""")
    mShadeDarkness = property(_globalmapper.GM_VerticalDisplayOptions_t_mShadeDarkness_get, _globalmapper.GM_VerticalDisplayOptions_t_mShadeDarkness_set, doc=r"""mShadeDarkness : uint8""")
    mShadeHighlight = property(_globalmapper.GM_VerticalDisplayOptions_t_mShadeHighlight_get, _globalmapper.GM_VerticalDisplayOptions_t_mShadeHighlight_set, doc=r"""mShadeHighlight : uint8""")
    mSlopeAlgorithm = property(_globalmapper.GM_VerticalDisplayOptions_t_mSlopeAlgorithm_get, _globalmapper.GM_VerticalDisplayOptions_t_mSlopeAlgorithm_set, doc=r"""mSlopeAlgorithm : GM_SlopeAlg_t8""")
    mLightBlendingAlgorithm = property(_globalmapper.GM_VerticalDisplayOptions_t_mLightBlendingAlgorithm_get, _globalmapper.GM_VerticalDisplayOptions_t_mLightBlendingAlgorithm_set, doc=r"""mLightBlendingAlgorithm : GM_ShaderBlendingAlg_t8""")
    mLightNumSources = property(_globalmapper.GM_VerticalDisplayOptions_t_mLightNumSources_get, _globalmapper.GM_VerticalDisplayOptions_t_mLightNumSources_set, doc=r"""mLightNumSources : uint32""")

    def __eq__(self, aOther: "GM_VerticalDisplayOptions_t") -> "bool":
        r"""
        __eq__(GM_VerticalDisplayOptions_t self, GM_VerticalDisplayOptions_t aOther) -> bool

        Parameters
        ----------
        aOther: GM_VerticalDisplayOptions_t const &

        """
        return _globalmapper.GM_VerticalDisplayOptions_t___eq__(self, aOther)

    def __ne__(self, aOther: "GM_VerticalDisplayOptions_t") -> "bool":
        r"""
        __ne__(GM_VerticalDisplayOptions_t self, GM_VerticalDisplayOptions_t aOther) -> bool

        Parameters
        ----------
        aOther: GM_VerticalDisplayOptions_t const &

        """
        return _globalmapper.GM_VerticalDisplayOptions_t___ne__(self, aOther)

    def __repr__( self ) :
        return str( gmobject_to_map( self ) )


    def __init__(self):
        r"""__init__(GM_VerticalDisplayOptions_t self) -> GM_VerticalDisplayOptions_t"""
        _globalmapper.GM_VerticalDisplayOptions_t_swiginit(self, _globalmapper.new_GM_VerticalDisplayOptions_t())
    __swig_destroy__ = _globalmapper.delete_GM_VerticalDisplayOptions_t


# Register GM_VerticalDisplayOptions_t in _globalmapper:
_globalmapper.GM_VerticalDisplayOptions_t_swigregister(GM_VerticalDisplayOptions_t)

GM_LayerType_ELEVATION = _globalmapper.GM_LayerType_ELEVATION

GM_LayerType_RASTER = _globalmapper.GM_LayerType_RASTER

GM_LayerType_VECTOR = _globalmapper.GM_LayerType_VECTOR

GM_LayerType_WEB = _globalmapper.GM_LayerType_WEB

GM_LayerType_DB_VECTOR = _globalmapper.GM_LayerType_DB_VECTOR

GM_LayerType_DB_RASTER = _globalmapper.GM_LayerType_DB_RASTER

GM_LayerType_LIDAR = _globalmapper.GM_LayerType_LIDAR

GM_LayerType_3D = _globalmapper.GM_LayerType_3D

GM_LayerType_SUPPORTS_NON_SPATIAL = _globalmapper.GM_LayerType_SUPPORTS_NON_SPATIAL

GM_LayerType_FLYTHROUGH = _globalmapper.GM_LayerType_FLYTHROUGH

GM_LayerType_AllTypes = _globalmapper.GM_LayerType_AllTypes

GM_PROGRESS_START = _globalmapper.GM_PROGRESS_START

GM_PROGRESS_UPDATE_STATUS = _globalmapper.GM_PROGRESS_UPDATE_STATUS

GM_PROGRESS_UPDATE_PERCENT = _globalmapper.GM_PROGRESS_UPDATE_PERCENT

GM_PROGRESS_STOP = _globalmapper.GM_PROGRESS_STOP

GM_PROGRESS_RENDER_UPDATE = _globalmapper.GM_PROGRESS_RENDER_UPDATE

GM_PROGRESS_DOWNLOAD_FAILED = _globalmapper.GM_PROGRESS_DOWNLOAD_FAILED

GM_PROGRESS_UPDATE_CAPTION = _globalmapper.GM_PROGRESS_UPDATE_CAPTION

GM_PROGRESS_CHECK_CANCEL = _globalmapper.GM_PROGRESS_CHECK_CANCEL

GM_PROGRESS_NUM_TYPES = _globalmapper.GM_PROGRESS_NUM_TYPES

GM_Prompt_ShowPrompt = _globalmapper.GM_Prompt_ShowPrompt

GM_Prompt_AlreadyShown = _globalmapper.GM_Prompt_AlreadyShown

INVALID_FEATURE_CLASS = _globalmapper.INVALID_FEATURE_CLASS

Z_LVL_MIN = _globalmapper.Z_LVL_MIN

Z_LVL_DFLT = _globalmapper.Z_LVL_DFLT

Z_LVL_MAX = _globalmapper.Z_LVL_MAX

Z_LVL_LAND = _globalmapper.Z_LVL_LAND

Z_LVL_URBAN_AREA = _globalmapper.Z_LVL_URBAN_AREA

Z_LVL_PARK = _globalmapper.Z_LVL_PARK

Z_LVL_SURFACE_COVER = _globalmapper.Z_LVL_SURFACE_COVER

Z_LVL_WATER = _globalmapper.Z_LVL_WATER

Z_LVL_INTERTIDAL = _globalmapper.Z_LVL_INTERTIDAL

Z_LVL_ISOBATH = _globalmapper.Z_LVL_ISOBATH

Z_LVL_MISC_MARINE = _globalmapper.Z_LVL_MISC_MARINE

Z_LVL_BLDG_GROUND = _globalmapper.Z_LVL_BLDG_GROUND

Z_LVL_BLDG_FLOOR = _globalmapper.Z_LVL_BLDG_FLOOR

Z_LVL_BLDG_WALL = _globalmapper.Z_LVL_BLDG_WALL

Z_LVL_BLDG_ROOF = _globalmapper.Z_LVL_BLDG_ROOF

Z_LVL_CONTOURS = _globalmapper.Z_LVL_CONTOURS

Z_LVL_ROADS = _globalmapper.Z_LVL_ROADS

Z_LVL_POWERLINES = _globalmapper.Z_LVL_POWERLINES

Z_LVL_BOUNDARIES = _globalmapper.Z_LVL_BOUNDARIES

Z_LVL_MEASUREMENT = _globalmapper.Z_LVL_MEASUREMENT

AFC_MIN = _globalmapper.AFC_MIN

AFC_NONE = _globalmapper.AFC_NONE

AFC_ISLAND = _globalmapper.AFC_ISLAND

AFC_RESERVATION = _globalmapper.AFC_RESERVATION

AFC_SNOW_OR_GLACIER = _globalmapper.AFC_SNOW_OR_GLACIER

AFC_SALT = _globalmapper.AFC_SALT

AFC_SAND = _globalmapper.AFC_SAND

AFC_ROCK = _globalmapper.AFC_ROCK

AFC_REEF = _globalmapper.AFC_REEF

AFC_MIN_CITY_MA = _globalmapper.AFC_MIN_CITY_MA

AFC_CITY_LARGE = _globalmapper.AFC_CITY_LARGE

AFC_CITY_SMALL = _globalmapper.AFC_CITY_SMALL

AFC_CITY_UNKNOWN = _globalmapper.AFC_CITY_UNKNOWN

AFC_MAX_CITY_MA = _globalmapper.AFC_MAX_CITY_MA

AFC_COVERAGE = _globalmapper.AFC_COVERAGE

AFC_MAP_CATALOG_LAYER = _globalmapper.AFC_MAP_CATALOG_LAYER

AFC_WATERSHED = _globalmapper.AFC_WATERSHED

AFC_AERIAL_COVERAGE = _globalmapper.AFC_AERIAL_COVERAGE

AFC_MIN_PARK = _globalmapper.AFC_MIN_PARK

AFC_NTNL_PARK_MJR = _globalmapper.AFC_NTNL_PARK_MJR

AFC_NTNL_PARK_OTHR = _globalmapper.AFC_NTNL_PARK_OTHR

AFC_STATE_PARK_MJR = _globalmapper.AFC_STATE_PARK_MJR

AFC_STATE_PARK_OTHR = _globalmapper.AFC_STATE_PARK_OTHR

AFC_URBAN_PARK = _globalmapper.AFC_URBAN_PARK

AFC_GOLF_COURSE = _globalmapper.AFC_GOLF_COURSE

AFC_MAX_PARK = _globalmapper.AFC_MAX_PARK

AFC_WETLAND = _globalmapper.AFC_WETLAND

AFC_TUNDRA = _globalmapper.AFC_TUNDRA

AFC_WOODS = _globalmapper.AFC_WOODS

AFC_SCRUB = _globalmapper.AFC_SCRUB

AFC_ORCHARD = _globalmapper.AFC_ORCHARD

AFC_CROPLAND = _globalmapper.AFC_CROPLAND

AFC_SCATTERED_TREES = _globalmapper.AFC_SCATTERED_TREES

AFC_MIN_WATER = _globalmapper.AFC_MIN_WATER

AFC_OCEAN = _globalmapper.AFC_OCEAN

AFC_STILL_WATER_MJR = _globalmapper.AFC_STILL_WATER_MJR

AFC_STILL_WATER_250MI = _globalmapper.AFC_STILL_WATER_250MI

AFC_STILL_WATER_100MI = _globalmapper.AFC_STILL_WATER_100MI

AFC_STILL_WATER_50MI = _globalmapper.AFC_STILL_WATER_50MI

AFC_STILL_WATER_10MI = _globalmapper.AFC_STILL_WATER_10MI

AFC_STILL_WATER_5MI = _globalmapper.AFC_STILL_WATER_5MI

AFC_STILL_WATER_1MI = _globalmapper.AFC_STILL_WATER_1MI

AFC_STILL_WATER_HALF = _globalmapper.AFC_STILL_WATER_HALF

AFC_STILL_WATER_LT_HALF = _globalmapper.AFC_STILL_WATER_LT_HALF

AFC_STILL_WATER_UNK = _globalmapper.AFC_STILL_WATER_UNK

AFC_FLOW_WATER_MJR = _globalmapper.AFC_FLOW_WATER_MJR

AFC_FLOW_WATER_RGNL = _globalmapper.AFC_FLOW_WATER_RGNL

AFC_FLOW_WATER_MNR = _globalmapper.AFC_FLOW_WATER_MNR

AFC_FLOW_WATER_INT = _globalmapper.AFC_FLOW_WATER_INT

AFC_STILL_WATER_INT = _globalmapper.AFC_STILL_WATER_INT

AFC_STILL_WATER_DRY = _globalmapper.AFC_STILL_WATER_DRY

AFC_MAX_WATER = _globalmapper.AFC_MAX_WATER

AFC_LAND_GRANT = _globalmapper.AFC_LAND_GRANT

AFC_COUNTY = _globalmapper.AFC_COUNTY

AFC_STATE = _globalmapper.AFC_STATE

AFC_COUNTRY = _globalmapper.AFC_COUNTRY

AFC_SURVEY_SECTION = _globalmapper.AFC_SURVEY_SECTION

AFC_COUNTY_SUBDIVISION = _globalmapper.AFC_COUNTY_SUBDIVISION

AFC_ISOBATH = _globalmapper.AFC_ISOBATH

AFC_ANCHORAGE = _globalmapper.AFC_ANCHORAGE

AFC_LAND = _globalmapper.AFC_LAND

AFC_INTERTIDAL_AREA = _globalmapper.AFC_INTERTIDAL_AREA

AFC_MARINE_INFO_AREA = _globalmapper.AFC_MARINE_INFO_AREA

AFC_MARINE_TRAFFIC_ZONE = _globalmapper.AFC_MARINE_TRAFFIC_ZONE

AFC_MISC_STRUCTURE = _globalmapper.AFC_MISC_STRUCTURE

AFC_MEASUREMENT = _globalmapper.AFC_MEASUREMENT

AFC_ISOHEIGHT = _globalmapper.AFC_ISOHEIGHT

AFC_RANGE_RING = _globalmapper.AFC_RANGE_RING

AFC_VIEW_SHED_COVERAGE = _globalmapper.AFC_VIEW_SHED_COVERAGE

AFC_TIN_FACE = _globalmapper.AFC_TIN_FACE

AFC_ROUGHNESS = _globalmapper.AFC_ROUGHNESS

AFC_BUILDING_ROOF = _globalmapper.AFC_BUILDING_ROOF

AFC_BUILDING_WALL = _globalmapper.AFC_BUILDING_WALL

AFC_BUILDING_GROUND = _globalmapper.AFC_BUILDING_GROUND

AFC_BUILDING_FLOOR = _globalmapper.AFC_BUILDING_FLOOR

AFC_BASE_S52 = _globalmapper.AFC_BASE_S52

AFC_UNKNOWN = _globalmapper.AFC_UNKNOWN

AFC_MAX_BUILTIN = _globalmapper.AFC_MAX_BUILTIN

AFC_FIRST_CUSTOM = _globalmapper.AFC_FIRST_CUSTOM

AFC_INVALID = _globalmapper.AFC_INVALID

LFC_MIN_LINE = _globalmapper.LFC_MIN_LINE

LFC_NONE = _globalmapper.LFC_NONE

LFC_MIN_ROAD = _globalmapper.LFC_MIN_ROAD

LFC_INTERSTATE = _globalmapper.LFC_INTERSTATE

LFC_MAJOR_HWY = _globalmapper.LFC_MAJOR_HWY

LFC_STATE_HWY = _globalmapper.LFC_STATE_HWY

LFC_ARTERIAL = _globalmapper.LFC_ARTERIAL

LFC_COLLECTOR = _globalmapper.LFC_COLLECTOR

LFC_RESIDENTIAL = _globalmapper.LFC_RESIDENTIAL

LFC_ALLEY = _globalmapper.LFC_ALLEY

LFC_RAMP = _globalmapper.LFC_RAMP

LFC_UNPAVED = _globalmapper.LFC_UNPAVED

LFC_COUNTY_ROUTE = _globalmapper.LFC_COUNTY_ROUTE

LFC_MAX_ROAD = _globalmapper.LFC_MAX_ROAD

LFC_STREAM = _globalmapper.LFC_STREAM

LFC_STREAM_INT = _globalmapper.LFC_STREAM_INT

LFC_STREAM_DRY = _globalmapper.LFC_STREAM_DRY

LFC_MIN_RAILROAD = _globalmapper.LFC_MIN_RAILROAD

LFC_RAILROAD_CLASS1A = _globalmapper.LFC_RAILROAD_CLASS1A

LFC_RAILROAD_CLASS1B = _globalmapper.LFC_RAILROAD_CLASS1B

LFC_RAILROAD_OTHER = _globalmapper.LFC_RAILROAD_OTHER

LFC_MAX_RAILROAD = _globalmapper.LFC_MAX_RAILROAD

LFC_SHORELINE = _globalmapper.LFC_SHORELINE

LFC_TRAIL = _globalmapper.LFC_TRAIL

LFC_DATABASE = _globalmapper.LFC_DATABASE

LFC_GRID_LINE = _globalmapper.LFC_GRID_LINE

LFC_GRID_LINE_MINOR = _globalmapper.LFC_GRID_LINE_MINOR

LFC_GRID_LINE_MAJOR = _globalmapper.LFC_GRID_LINE_MAJOR

LFC_LOCAL_FERRY = _globalmapper.LFC_LOCAL_FERRY

LFC_MJR_PLTCL = _globalmapper.LFC_MJR_PLTCL

LFC_MNR_PLTCL = _globalmapper.LFC_MNR_PLTCL

LFC_INTRN_PLTCL = _globalmapper.LFC_INTRN_PLTCL

LFC_CITY_BDRY = _globalmapper.LFC_CITY_BDRY

LFC_INVISIBLE_BDRY = _globalmapper.LFC_INVISIBLE_BDRY

LFC_POWERLINE = _globalmapper.LFC_POWERLINE

LFC_PARK_BOUNDARY = _globalmapper.LFC_PARK_BOUNDARY

LFC_PIPELINE = _globalmapper.LFC_PIPELINE

LFC_MIN_CONTOUR = _globalmapper.LFC_MIN_CONTOUR

LFC_CONTOUR = _globalmapper.LFC_CONTOUR

LFC_CONTOUR_MINOR = _globalmapper.LFC_CONTOUR_MINOR

LFC_CONTOUR_MAJOR = _globalmapper.LFC_CONTOUR_MAJOR

LFC_CONTOUR_SUPP = _globalmapper.LFC_CONTOUR_SUPP

LFC_MAX_CONTOUR = _globalmapper.LFC_MAX_CONTOUR

LFC_MIN_WATER = _globalmapper.LFC_MIN_WATER

LFC_RIVER_UNKNOWN = _globalmapper.LFC_RIVER_UNKNOWN

LFC_RIVER_LT_20KM = _globalmapper.LFC_RIVER_LT_20KM

LFC_RIVER_50KM = _globalmapper.LFC_RIVER_50KM

LFC_RIVER_100KM = _globalmapper.LFC_RIVER_100KM

LFC_RIVER_250KM = _globalmapper.LFC_RIVER_250KM

LFC_RIVER_GT_250KM = _globalmapper.LFC_RIVER_GT_250KM

LFC_MAX_WATER = _globalmapper.LFC_MAX_WATER

LFC_MIN_BATHY_CONTOUR = _globalmapper.LFC_MIN_BATHY_CONTOUR

LFC_BATHY_CONTOUR = _globalmapper.LFC_BATHY_CONTOUR

LFC_BATHY_MINOR = _globalmapper.LFC_BATHY_MINOR

LFC_BATHY_MAJOR = _globalmapper.LFC_BATHY_MAJOR

LFC_BATHY_SUPP = _globalmapper.LFC_BATHY_SUPP

LFC_MAX_BATHY_CONTOUR = _globalmapper.LFC_MAX_BATHY_CONTOUR

LFC_UNKNOWN = _globalmapper.LFC_UNKNOWN

LFC_MEASUREMENT = _globalmapper.LFC_MEASUREMENT

LFC_RUNWAY = _globalmapper.LFC_RUNWAY

LFC_TRACKLOG = _globalmapper.LFC_TRACKLOG

LFC_MARINE_ROUTE = _globalmapper.LFC_MARINE_ROUTE

LFC_DIGITIZER_LINE = _globalmapper.LFC_DIGITIZER_LINE

LFC_DELETED_LINE = _globalmapper.LFC_DELETED_LINE

LFC_SELECTED_LINE = _globalmapper.LFC_SELECTED_LINE

LFC_COURSE_LINE = _globalmapper.LFC_COURSE_LINE

LFC_RANGE_RING_RADIAL = _globalmapper.LFC_RANGE_RING_RADIAL

LFC_CROSS_SECTION = _globalmapper.LFC_CROSS_SECTION

LFC_BASE_S52 = _globalmapper.LFC_BASE_S52

LFC_BREAKLINE = _globalmapper.LFC_BREAKLINE

LFC_FLIGHT_PATH = _globalmapper.LFC_FLIGHT_PATH

LFC_MAX_LINE_AUTOMATION = _globalmapper.LFC_MAX_LINE_AUTOMATION

LFC_MAX_LINE = _globalmapper.LFC_MAX_LINE

LFC_FIRST_CUSTOM = _globalmapper.LFC_FIRST_CUSTOM

LFC_INVALID = _globalmapper.LFC_INVALID

PFC_MIN_POINT = _globalmapper.PFC_MIN_POINT

PFC_NONE = _globalmapper.PFC_NONE

PFC_MIN_CITY = _globalmapper.PFC_MIN_CITY

PFC_CITY_10M = _globalmapper.PFC_CITY_10M

PFC_CITY_1M = _globalmapper.PFC_CITY_1M

PFC_CITY_500K = _globalmapper.PFC_CITY_500K

PFC_CITY_100K = _globalmapper.PFC_CITY_100K

PFC_CITY_50K = _globalmapper.PFC_CITY_50K

PFC_CITY_10K = _globalmapper.PFC_CITY_10K

PFC_CITY_LT10K = _globalmapper.PFC_CITY_LT10K

PFC_CITY_UNKNOWN = _globalmapper.PFC_CITY_UNKNOWN

PFC_MAX_CITY = _globalmapper.PFC_MAX_CITY

PFC_TEXT = _globalmapper.PFC_TEXT

PFC_TREE = _globalmapper.PFC_TREE

PFC_MIN_POLITICAL = _globalmapper.PFC_MIN_POLITICAL

PFC_COUNTRY = _globalmapper.PFC_COUNTRY

PFC_STATE = _globalmapper.PFC_STATE

PFC_COUNTY = _globalmapper.PFC_COUNTY

PFC_ISLAND = _globalmapper.PFC_ISLAND

PFC_LAND_GRANT = _globalmapper.PFC_LAND_GRANT

PFC_MAX_POLITICAL = _globalmapper.PFC_MAX_POLITICAL

PFC_MIN_MARINE = _globalmapper.PFC_MIN_MARINE

PFC_ANCHORAGE = _globalmapper.PFC_ANCHORAGE

PFC_BEACON = _globalmapper.PFC_BEACON

PFC_BOTTOM_CONDITIONS = _globalmapper.PFC_BOTTOM_CONDITIONS

PFC_BUOY = _globalmapper.PFC_BUOY

PFC_DANGER = _globalmapper.PFC_DANGER

PFC_LIGHTHOUSE = _globalmapper.PFC_LIGHTHOUSE

PFC_SPOT_SOUNDING = _globalmapper.PFC_SPOT_SOUNDING

PFC_MAX_MARINE = _globalmapper.PFC_MAX_MARINE

PFC_MIN_LIDAR = _globalmapper.PFC_MIN_LIDAR

PFC_LIDAR_RAILROAD = _globalmapper.PFC_LIDAR_RAILROAD

PFC_LIDAR_UNCLASSIFIED = _globalmapper.PFC_LIDAR_UNCLASSIFIED

PFC_LIDAR_BUILDING = _globalmapper.PFC_LIDAR_BUILDING

PFC_LIDAR_GROUND = _globalmapper.PFC_LIDAR_GROUND

PFC_LIDAR_VEGETATION_LOW = _globalmapper.PFC_LIDAR_VEGETATION_LOW

PFC_LIDAR_VEGETATION_MEDIUM = _globalmapper.PFC_LIDAR_VEGETATION_MEDIUM

PFC_LIDAR_VEGETATION_HIGH = _globalmapper.PFC_LIDAR_VEGETATION_HIGH

PFC_LIDAR_WATER = _globalmapper.PFC_LIDAR_WATER

PFC_LIDAR_POWER_LINES = _globalmapper.PFC_LIDAR_POWER_LINES

PFC_LIDAR_TOWERS_OR_POLES = _globalmapper.PFC_LIDAR_TOWERS_OR_POLES

PFC_LIDAR_MODEL_KEY_POINT = _globalmapper.PFC_LIDAR_MODEL_KEY_POINT

PFC_LIDAR_BRIDGE = _globalmapper.PFC_LIDAR_BRIDGE

PFC_LIDAR_ROAD = _globalmapper.PFC_LIDAR_ROAD

PFC_LIDAR_LOW_POINT_NOISE = _globalmapper.PFC_LIDAR_LOW_POINT_NOISE

PFC_LIDAR_OVERLAP = _globalmapper.PFC_LIDAR_OVERLAP

PFC_LIDAR_SUBMERGED = _globalmapper.PFC_LIDAR_SUBMERGED

PFC_MAX_LIDAR = _globalmapper.PFC_MAX_LIDAR

PFC_RANGE_RING_CENTER = _globalmapper.PFC_RANGE_RING_CENTER

PFC_STRIKE_AND_DIP = _globalmapper.PFC_STRIKE_AND_DIP

PFC_PICTURE = _globalmapper.PFC_PICTURE

PFC_ADDRESS_LABEL = _globalmapper.PFC_ADDRESS_LABEL

PFC_WAYPOINT = _globalmapper.PFC_WAYPOINT

PFC_ARCH = _globalmapper.PFC_ARCH

PFC_BRIDGE = _globalmapper.PFC_BRIDGE

PFC_CLIFF = _globalmapper.PFC_CLIFF

PFC_WATERFALL = _globalmapper.PFC_WATERFALL

PFC_GEYSER = _globalmapper.PFC_GEYSER

PFC_SUMMIT = _globalmapper.PFC_SUMMIT

PFC_WRECK = _globalmapper.PFC_WRECK

PFC_MARINA = _globalmapper.PFC_MARINA

PFC_WELL = _globalmapper.PFC_WELL

PFC_TOWER = _globalmapper.PFC_TOWER

PFC_ROCK = _globalmapper.PFC_ROCK

PFC_BOAT_RAMP = _globalmapper.PFC_BOAT_RAMP

PFC_CAMPGROUND = _globalmapper.PFC_CAMPGROUND

PFC_PARK = _globalmapper.PFC_PARK

PFC_PICNIC_AREA = _globalmapper.PFC_PICNIC_AREA

PFC_1ST_AID = _globalmapper.PFC_1ST_AID

PFC_MILITARY = _globalmapper.PFC_MILITARY

PFC_LANDMARK = _globalmapper.PFC_LANDMARK

PFC_RESTROOMS = _globalmapper.PFC_RESTROOMS

PFC_LODGING = _globalmapper.PFC_LODGING

PFC_SHOPPING = _globalmapper.PFC_SHOPPING

PFC_GOLF_COURSE = _globalmapper.PFC_GOLF_COURSE

PFC_LIBRARY = _globalmapper.PFC_LIBRARY

PFC_HOSPITAL = _globalmapper.PFC_HOSPITAL

PFC_SWIMMING_AREA = _globalmapper.PFC_SWIMMING_AREA

PFC_DAM = _globalmapper.PFC_DAM

PFC_MINE = _globalmapper.PFC_MINE

PFC_BUILDING = _globalmapper.PFC_BUILDING

PFC_BANK = _globalmapper.PFC_BANK

PFC_AIRPORT = _globalmapper.PFC_AIRPORT

PFC_SCHOOL = _globalmapper.PFC_SCHOOL

PFC_CHURCH = _globalmapper.PFC_CHURCH

PFC_POST_OFFICE = _globalmapper.PFC_POST_OFFICE

PFC_CEMETERY = _globalmapper.PFC_CEMETERY

PFC_RESTAURANT = _globalmapper.PFC_RESTAURANT

PFC_WEIGH_STATION = _globalmapper.PFC_WEIGH_STATION

PFC_AMUSEMENT = _globalmapper.PFC_AMUSEMENT

PFC_STADIUM = _globalmapper.PFC_STADIUM

PFC_SPOT_ELEVATION = _globalmapper.PFC_SPOT_ELEVATION

PFC_STREAM_ORIGIN = _globalmapper.PFC_STREAM_ORIGIN

PFC_UNKNOWN = _globalmapper.PFC_UNKNOWN

PFC_SEAWEED = _globalmapper.PFC_SEAWEED

PFC_CONTROL_POINT = _globalmapper.PFC_CONTROL_POINT

PFC_CURRENT = _globalmapper.PFC_CURRENT

PFC_DISTANCE_MARK = _globalmapper.PFC_DISTANCE_MARK

PFC_FOG_SIGNAL = _globalmapper.PFC_FOG_SIGNAL

PFC_PILE = _globalmapper.PFC_PILE

PFC_RADAR_REFLECTOR = _globalmapper.PFC_RADAR_REFLECTOR

PFC_RETRO_REFLECTOR = _globalmapper.PFC_RETRO_REFLECTOR

PFC_SIGNAL_STATION = _globalmapper.PFC_SIGNAL_STATION

PFC_TOP_MARK = _globalmapper.PFC_TOP_MARK

PFC_BERTH = _globalmapper.PFC_BERTH

PFC_SHORELINECONSTRUCTION = _globalmapper.PFC_SHORELINECONSTRUCTION

PFC_CARGO = _globalmapper.PFC_CARGO

PFC_CRANE = _globalmapper.PFC_CRANE

PFC_FISHINGFACILITY = _globalmapper.PFC_FISHINGFACILITY

PFC_WATERTURBULENCE = _globalmapper.PFC_WATERTURBULENCE

PFC_FORTIFIEDSTRUCTURE = _globalmapper.PFC_FORTIFIEDSTRUCTURE

PFC_GATE = _globalmapper.PFC_GATE

PFC_HULK = _globalmapper.PFC_HULK

PFC_INCINERATIONAREA = _globalmapper.PFC_INCINERATIONAREA

PFC_S52_LANDMARK = _globalmapper.PFC_S52_LANDMARK

PFC_LOCALMAGNETICANOMALY = _globalmapper.PFC_LOCALMAGNETICANOMALY

PFC_MAGNETICVARIATION = _globalmapper.PFC_MAGNETICVARIATION

PFC_MARINEFARM = _globalmapper.PFC_MARINEFARM

PFC_MOORING = _globalmapper.PFC_MOORING

PFC_OFFSHOREPLATFORM = _globalmapper.PFC_OFFSHOREPLATFORM

PFC_PILOTBOARDING = _globalmapper.PFC_PILOTBOARDING

PFC_PRODUCTION = _globalmapper.PFC_PRODUCTION

PFC_RADIOCALLING = _globalmapper.PFC_RADIOCALLING

PFC_SILO = _globalmapper.PFC_SILO

PFC_SLOPING = _globalmapper.PFC_SLOPING

PFC_TIDALSTREAM = _globalmapper.PFC_TIDALSTREAM

PFC_TIDE = _globalmapper.PFC_TIDE

PFC_MAX_POINT = _globalmapper.PFC_MAX_POINT

PFC_FIRST_CUSTOM = _globalmapper.PFC_FIRST_CUSTOM

PFC_INVALID = _globalmapper.PFC_INVALID

MFC_MIN = _globalmapper.MFC_MIN

MFC_NONE = _globalmapper.MFC_NONE

MFC_MISC_STRUCTURE = _globalmapper.MFC_MISC_STRUCTURE

MFC_UNKNOWN = _globalmapper.MFC_UNKNOWN

MFC_MAX_BUILTIN = _globalmapper.MFC_MAX_BUILTIN

MFC_FIRST_CUSTOM = _globalmapper.MFC_FIRST_CUSTOM

MFC_INVALID = _globalmapper.MFC_INVALID

GM_PRJ_GEO = _globalmapper.GM_PRJ_GEO

GM_PRJ_UTM = _globalmapper.GM_PRJ_UTM

GM_PRJ_SPCS = _globalmapper.GM_PRJ_SPCS

GM_PRJ_ALBERS = _globalmapper.GM_PRJ_ALBERS

GM_PRJ_LAMCC = _globalmapper.GM_PRJ_LAMCC

GM_PRJ_MERCAT = _globalmapper.GM_PRJ_MERCAT

GM_PRJ_PS = _globalmapper.GM_PRJ_PS

GM_PRJ_POLYC = _globalmapper.GM_PRJ_POLYC

GM_PRJ_EQUIDC_A = _globalmapper.GM_PRJ_EQUIDC_A

GM_PRJ_TM = _globalmapper.GM_PRJ_TM

GM_PRJ_STEREO = _globalmapper.GM_PRJ_STEREO

GM_PRJ_LAMAZ = _globalmapper.GM_PRJ_LAMAZ

GM_PRJ_AZMEQD = _globalmapper.GM_PRJ_AZMEQD

GM_PRJ_GNOMON = _globalmapper.GM_PRJ_GNOMON

GM_PRJ_ORTHO = _globalmapper.GM_PRJ_ORTHO

GM_PRJ_GVNSP = _globalmapper.GM_PRJ_GVNSP

GM_PRJ_SNSOID = _globalmapper.GM_PRJ_SNSOID

GM_PRJ_EQRECT = _globalmapper.GM_PRJ_EQRECT

GM_PRJ_MILLER = _globalmapper.GM_PRJ_MILLER

GM_PRJ_VGRINT = _globalmapper.GM_PRJ_VGRINT

GM_PRJ_HOM_A = _globalmapper.GM_PRJ_HOM_A

GM_PRJ_ROBIN = _globalmapper.GM_PRJ_ROBIN

GM_PRJ_SOM_A = _globalmapper.GM_PRJ_SOM_A

GM_PRJ_ALASKA = _globalmapper.GM_PRJ_ALASKA

GM_PRJ_GOOD = _globalmapper.GM_PRJ_GOOD

GM_PRJ_MOLL = _globalmapper.GM_PRJ_MOLL

GM_PRJ_IMOLL = _globalmapper.GM_PRJ_IMOLL

GM_PRJ_HAMMER = _globalmapper.GM_PRJ_HAMMER

GM_PRJ_WAGIV = _globalmapper.GM_PRJ_WAGIV

GM_PRJ_WAGVII = _globalmapper.GM_PRJ_WAGVII

GM_PRJ_OBLEQA = _globalmapper.GM_PRJ_OBLEQA

GM_PRJ_EQUIDC_B = _globalmapper.GM_PRJ_EQUIDC_B

GM_PRJ_HOM_B = _globalmapper.GM_PRJ_HOM_B

GM_PRJ_SOM_B = _globalmapper.GM_PRJ_SOM_B

GM_PRJ_NZMG = _globalmapper.GM_PRJ_NZMG

GM_PRJ_OB_STEREO = _globalmapper.GM_PRJ_OB_STEREO

GM_PRJ_GALL = _globalmapper.GM_PRJ_GALL

GM_PRJ_ECKERT_IV = _globalmapper.GM_PRJ_ECKERT_IV

GM_PRJ_AITOFF_WAGNER = _globalmapper.GM_PRJ_AITOFF_WAGNER

GM_PRJ_BONNE = _globalmapper.GM_PRJ_BONNE

GM_PRJ_CASSINI_SOLDNER = _globalmapper.GM_PRJ_CASSINI_SOLDNER

GM_PRJ_MILOS = _globalmapper.GM_PRJ_MILOS

GM_PRJ_TIMES = _globalmapper.GM_PRJ_TIMES

GM_PRJ_BIPOLAR_CONIC_WEST = _globalmapper.GM_PRJ_BIPOLAR_CONIC_WEST

GM_PRJ_2PT_EQUIDISTANT = _globalmapper.GM_PRJ_2PT_EQUIDISTANT

GM_PRJ_FIXED_SCREEN_POS = _globalmapper.GM_PRJ_FIXED_SCREEN_POS

GM_PRJ_LAMBERT_CYL_EQ_AREA = _globalmapper.GM_PRJ_LAMBERT_CYL_EQ_AREA

GM_PRJ_KROVAK = _globalmapper.GM_PRJ_KROVAK

GM_PRJ_LAMBERT_MARTA = _globalmapper.GM_PRJ_LAMBERT_MARTA

GM_PRJ_LAMBERT_NOAA = _globalmapper.GM_PRJ_LAMBERT_NOAA

GM_PRJ_MARTA_SATELLITE = _globalmapper.GM_PRJ_MARTA_SATELLITE

GM_PRJ_WINKEL_I = _globalmapper.GM_PRJ_WINKEL_I

GM_PRJ_POLYCONIC_INT_MAP = _globalmapper.GM_PRJ_POLYCONIC_INT_MAP

GM_PRJ_WINKEL_TRIPEL = _globalmapper.GM_PRJ_WINKEL_TRIPEL

GM_PRJ_LABORDE = _globalmapper.GM_PRJ_LABORDE

GM_PRJ_TM_SOUTH_ORIENTATED = _globalmapper.GM_PRJ_TM_SOUTH_ORIENTATED

GM_PRJ_RSO = _globalmapper.GM_PRJ_RSO

GM_PRJ_DOUBLE_STEREOGRAPHIC = _globalmapper.GM_PRJ_DOUBLE_STEREOGRAPHIC

GM_PRJ_INT_SINUSOIDAL = _globalmapper.GM_PRJ_INT_SINUSOIDAL

GM_PRJ_HOM_AZI_NAT_ORIG = _globalmapper.GM_PRJ_HOM_AZI_NAT_ORIG

GM_PRJ_MERCAT_NAVIONICS = _globalmapper.GM_PRJ_MERCAT_NAVIONICS

GM_PRJ_MERCAT_LOWRANCE = _globalmapper.GM_PRJ_MERCAT_LOWRANCE

GM_PRJ_NATURAL_EARTH = _globalmapper.GM_PRJ_NATURAL_EARTH

GM_PRJ_GEO_ITALIA = _globalmapper.GM_PRJ_GEO_ITALIA

GM_PRJ_CASSINI_SOLDNER_ITALIA = _globalmapper.GM_PRJ_CASSINI_SOLDNER_ITALIA

GM_PRJ_EQUAL_EARTH = _globalmapper.GM_PRJ_EQUAL_EARTH

GM_PRJ_NUM_PROJ_SYS = _globalmapper.GM_PRJ_NUM_PROJ_SYS

GM_PRJ_FIRST_ALIAS_PRJ = _globalmapper.GM_PRJ_FIRST_ALIAS_PRJ

GM_PRJ_WTM83_91 = _globalmapper.GM_PRJ_WTM83_91

GM_PRJ_MICHIGAN_GEOREF = _globalmapper.GM_PRJ_MICHIGAN_GEOREF

GM_PRJ_SWEDISH_GRID_RT90 = _globalmapper.GM_PRJ_SWEDISH_GRID_RT90

GM_PRJ_BRITISH_GRID = _globalmapper.GM_PRJ_BRITISH_GRID

GM_PRJ_NZTM_2000 = _globalmapper.GM_PRJ_NZTM_2000

GM_PRJ_LAMBERT_I_NORD = _globalmapper.GM_PRJ_LAMBERT_I_NORD

GM_PRJ_LAMBERT_II_CENTRE = _globalmapper.GM_PRJ_LAMBERT_II_CENTRE

GM_PRJ_LAMBERT_III_SUD = _globalmapper.GM_PRJ_LAMBERT_III_SUD

GM_PRJ_LAMBERT_IV_CORSE = _globalmapper.GM_PRJ_LAMBERT_IV_CORSE

GM_PRJ_LAMBERT_II_CARTO_ETENDU = _globalmapper.GM_PRJ_LAMBERT_II_CARTO_ETENDU

GM_PRJ_LAMBERT_93 = _globalmapper.GM_PRJ_LAMBERT_93

GM_PRJ_DUTCH_GRID = _globalmapper.GM_PRJ_DUTCH_GRID

GM_PRJ_STEREO70 = _globalmapper.GM_PRJ_STEREO70

GM_PRJ_PLATE_CARREE = _globalmapper.GM_PRJ_PLATE_CARREE

GM_PRJ_GAUSS_KRUEGER = _globalmapper.GM_PRJ_GAUSS_KRUEGER

GM_PRJ_GAUSS_KRUEGER_GERMANY = _globalmapper.GM_PRJ_GAUSS_KRUEGER_GERMANY

GM_PRJ_GAUSS_KRUEGER_SLOVENIA = _globalmapper.GM_PRJ_GAUSS_KRUEGER_SLOVENIA

GM_PRJ_AUSTRIAN_GRID = _globalmapper.GM_PRJ_AUSTRIAN_GRID

GM_PRJ_GAUSS_BOAGA = _globalmapper.GM_PRJ_GAUSS_BOAGA

GM_PRJ_GREEK_GRID = _globalmapper.GM_PRJ_GREEK_GRID

GM_PRJ_POLAND_1992_19 = _globalmapper.GM_PRJ_POLAND_1992_19

GM_PRJ_GAUSS_KRUEGER_ARGENTINA = _globalmapper.GM_PRJ_GAUSS_KRUEGER_ARGENTINA

GM_PRJ_SWISS_GRID = _globalmapper.GM_PRJ_SWISS_GRID

GM_PRJ_IRISH_GRID = _globalmapper.GM_PRJ_IRISH_GRID

GM_PRJ_QUEBEC_MTM = _globalmapper.GM_PRJ_QUEBEC_MTM

GM_PRJ_ISRAEL_GRID_OLD = _globalmapper.GM_PRJ_ISRAEL_GRID_OLD

GM_PRJ_ISRAEL_GRID_NEW = _globalmapper.GM_PRJ_ISRAEL_GRID_NEW

GM_PRJ_LAMBERT_I_CARTO = _globalmapper.GM_PRJ_LAMBERT_I_CARTO

GM_PRJ_LAMBERT_III_CARTO = _globalmapper.GM_PRJ_LAMBERT_III_CARTO

GM_PRJ_LAMBERT_IV_CARTO = _globalmapper.GM_PRJ_LAMBERT_IV_CARTO

GM_PRJ_HUNGARIAN_EOV = _globalmapper.GM_PRJ_HUNGARIAN_EOV

GM_PRJ_RSO_EAST_MALAYSIA = _globalmapper.GM_PRJ_RSO_EAST_MALAYSIA

GM_PRJ_RSO_WEST_MALAYSIA = _globalmapper.GM_PRJ_RSO_WEST_MALAYSIA

GM_PRJ_CASSINI_MALAYSIA = _globalmapper.GM_PRJ_CASSINI_MALAYSIA

GM_PRJ_KOREAN_GRID = _globalmapper.GM_PRJ_KOREAN_GRID

GM_PRJ_INDIA_GRID = _globalmapper.GM_PRJ_INDIA_GRID

GM_PRJ_BELGE_1972 = _globalmapper.GM_PRJ_BELGE_1972

GM_PRJ_MGA = _globalmapper.GM_PRJ_MGA

GM_PRJ_NEW_BRUNSWICK_STEREO = _globalmapper.GM_PRJ_NEW_BRUNSWICK_STEREO

GM_PRJ_MSTM = _globalmapper.GM_PRJ_MSTM

GM_PRJ_SYSTEM_1965 = _globalmapper.GM_PRJ_SYSTEM_1965

GM_PRJ_WISCONSIN_COUNTY = _globalmapper.GM_PRJ_WISCONSIN_COUNTY

GM_PRJ_PHILIPPINES_GRID = _globalmapper.GM_PRJ_PHILIPPINES_GRID

GM_PRJ_JAPANESE_GRID = _globalmapper.GM_PRJ_JAPANESE_GRID

GM_PRJ_ITALIAN_CADASTRAL = _globalmapper.GM_PRJ_ITALIAN_CADASTRAL

GM_PRJ_UTM_ITALY = _globalmapper.GM_PRJ_UTM_ITALY

GM_PRJ_SWEDISH_GRID_SWEREF99 = _globalmapper.GM_PRJ_SWEDISH_GRID_SWEREF99

GM_PRJ_10TM = _globalmapper.GM_PRJ_10TM

GM_PRJ_CASSINI_ITALIA_BAS = _globalmapper.GM_PRJ_CASSINI_ITALIA_BAS

GM_PRJ_CASSINI_ITALIA_PUG = _globalmapper.GM_PRJ_CASSINI_ITALIA_PUG

GM_PRJ_MINNESOTA_COUNTY = _globalmapper.GM_PRJ_MINNESOTA_COUNTY

GM_PRJ_UPS_NORTH = _globalmapper.GM_PRJ_UPS_NORTH

GM_PRJ_UPS_SOUTH = _globalmapper.GM_PRJ_UPS_SOUTH

GM_PRJ_TRINIDAD_GRID = _globalmapper.GM_PRJ_TRINIDAD_GRID

GM_PRJ_3TM = _globalmapper.GM_PRJ_3TM

GM_PRJ_GAUSS_KRUEGER_CROATIA = _globalmapper.GM_PRJ_GAUSS_KRUEGER_CROATIA

GM_PRJ_CROATIA_TM = _globalmapper.GM_PRJ_CROATIA_TM

GM_PRJ_CASSINI_ITALIA_CAM = _globalmapper.GM_PRJ_CASSINI_ITALIA_CAM

GM_PRJ_CASSINI_ITALIA_VDA = _globalmapper.GM_PRJ_CASSINI_ITALIA_VDA

GM_PRJ_NORWEGIAN_TM = _globalmapper.GM_PRJ_NORWEGIAN_TM

GM_PRJ_POLAND_2000 = _globalmapper.GM_PRJ_POLAND_2000

GM_PRJ_SWISS_GRID_LV95 = _globalmapper.GM_PRJ_SWISS_GRID_LV95

GM_PRJ_CASSINI_ITALIA_VEN = _globalmapper.GM_PRJ_CASSINI_ITALIA_VEN

GM_PRJ_AMG = _globalmapper.GM_PRJ_AMG

GM_PRJ_INDIANA_COUNTY = _globalmapper.GM_PRJ_INDIANA_COUNTY

GM_PRJ_KANSAS_REGIONAL = _globalmapper.GM_PRJ_KANSAS_REGIONAL

GM_PRJ_LAST_ALIAS_PRJ = _globalmapper.GM_PRJ_LAST_ALIAS_PRJ

GM_PRJ_GEOCALC = _globalmapper.GM_PRJ_GEOCALC

GM_PRJ_UNKNOWN = _globalmapper.GM_PRJ_UNKNOWN

GM_PRJ_UNIT_RADIANS = _globalmapper.GM_PRJ_UNIT_RADIANS

GM_PRJ_UNIT_US_FEET = _globalmapper.GM_PRJ_UNIT_US_FEET

GM_PRJ_UNIT_METERS = _globalmapper.GM_PRJ_UNIT_METERS

GM_PRJ_UNIT_ARC_SECONDS = _globalmapper.GM_PRJ_UNIT_ARC_SECONDS

GM_PRJ_UNIT_ARC_DEGREES = _globalmapper.GM_PRJ_UNIT_ARC_DEGREES

GM_PRJ_UNIT_INTERNATIONAL_FEET = _globalmapper.GM_PRJ_UNIT_INTERNATIONAL_FEET

GM_PRJ_UNIT_NAUTICAL_MILES = _globalmapper.GM_PRJ_UNIT_NAUTICAL_MILES

GM_PRJ_UNIT_YARDS = _globalmapper.GM_PRJ_UNIT_YARDS

GM_PRJ_UNIT_GRADES = _globalmapper.GM_PRJ_UNIT_GRADES

GM_PRJ_UNIT_INDIAN_YARD = _globalmapper.GM_PRJ_UNIT_INDIAN_YARD

GM_PRJ_UNIT_CLARKE_FEET = _globalmapper.GM_PRJ_UNIT_CLARKE_FEET

GM_PRJ_UNIT_INCHES = _globalmapper.GM_PRJ_UNIT_INCHES

GM_PRJ_UNIT_LINKS = _globalmapper.GM_PRJ_UNIT_LINKS

GM_PRJ_UNIT_CLARKE_LINKS = _globalmapper.GM_PRJ_UNIT_CLARKE_LINKS

GM_PRJ_UNIT_CAPE_FEET = _globalmapper.GM_PRJ_UNIT_CAPE_FEET

GM_PRJ_UNIT_CENTIMETERS = _globalmapper.GM_PRJ_UNIT_CENTIMETERS

GM_PRJ_UNIT_MILLIMETERS = _globalmapper.GM_PRJ_UNIT_MILLIMETERS

GM_PRJ_UNIT_KILOMETERS = _globalmapper.GM_PRJ_UNIT_KILOMETERS

GM_PRJ_UNIT_CHAINS_BENOIT = _globalmapper.GM_PRJ_UNIT_CHAINS_BENOIT

GM_PRJ_UNIT_CHAINS_SEARS = _globalmapper.GM_PRJ_UNIT_CHAINS_SEARS

GM_PRJ_UNIT_BRITISH_CHAIN_SEARS_1922_TRUNC = _globalmapper.GM_PRJ_UNIT_BRITISH_CHAIN_SEARS_1922_TRUNC

GM_PRJ_UNIT_CLARKE_YARD = _globalmapper.GM_PRJ_UNIT_CLARKE_YARD

GM_PRJ_UNIT_GERMAN_LEGAL_METER = _globalmapper.GM_PRJ_UNIT_GERMAN_LEGAL_METER

GM_PRJ_UNIT_GOLD_COAST_FEET = _globalmapper.GM_PRJ_UNIT_GOLD_COAST_FEET

GM_PRJ_UNIT_SEARS_YARD = _globalmapper.GM_PRJ_UNIT_SEARS_YARD

GM_PRJ_UNIT_SEARS_FEET = _globalmapper.GM_PRJ_UNIT_SEARS_FEET

GM_PRJ_UNIT_MILES = _globalmapper.GM_PRJ_UNIT_MILES

GM_PRJ_UNIT_INTERNATIONAL_INCHES = _globalmapper.GM_PRJ_UNIT_INTERNATIONAL_INCHES

GM_PRJ_NUM_UNITS = _globalmapper.GM_PRJ_NUM_UNITS

GM_PRJ_UNIT_UNKNOWN = _globalmapper.GM_PRJ_UNIT_UNKNOWN

GM_DATUM_ADINDAN = _globalmapper.GM_DATUM_ADINDAN

GM_DATUM_ARC1950 = _globalmapper.GM_DATUM_ARC1950

GM_DATUM_ARC1960 = _globalmapper.GM_DATUM_ARC1960

GM_DATUM_AUSTRALIAN_GEODETIC_1966 = _globalmapper.GM_DATUM_AUSTRALIAN_GEODETIC_1966

GM_DATUM_AUSTRALIAN_GEODETIC_1984 = _globalmapper.GM_DATUM_AUSTRALIAN_GEODETIC_1984

GM_DATUM_CAMP_AREA_ASTRO = _globalmapper.GM_DATUM_CAMP_AREA_ASTRO

GM_DATUM_CAPE = _globalmapper.GM_DATUM_CAPE

GM_DATUM_EUROPEAN_DATUM_1950 = _globalmapper.GM_DATUM_EUROPEAN_DATUM_1950

GM_DATUM_EUROPEAN_DATUM_1979 = _globalmapper.GM_DATUM_EUROPEAN_DATUM_1979

GM_DATUM_GEODETIC_DATUM_1949 = _globalmapper.GM_DATUM_GEODETIC_DATUM_1949

GM_DATUM_HONG_KONG_1963 = _globalmapper.GM_DATUM_HONG_KONG_1963

GM_DATUM_HU_TZU_SHAN = _globalmapper.GM_DATUM_HU_TZU_SHAN

GM_DATUM_INDIAN_1954 = _globalmapper.GM_DATUM_INDIAN_1954

GM_DATUM_NAD27_CONUS = _globalmapper.GM_DATUM_NAD27_CONUS

GM_DATUM_NAD83 = _globalmapper.GM_DATUM_NAD83

GM_DATUM_OLD_HAWAIIAN_MEAN = _globalmapper.GM_DATUM_OLD_HAWAIIAN_MEAN

GM_DATUM_OMAN = _globalmapper.GM_DATUM_OMAN

GM_DATUM_ORDNANCE_SURVEY_1936 = _globalmapper.GM_DATUM_ORDNANCE_SURVEY_1936

GM_DATUM_PUERTO_RICO = _globalmapper.GM_DATUM_PUERTO_RICO

GM_DATUM_PULKOVO_1942 = _globalmapper.GM_DATUM_PULKOVO_1942

GM_DATUM_PROVISIONAL_S_AMERICAN_1956 = _globalmapper.GM_DATUM_PROVISIONAL_S_AMERICAN_1956

GM_DATUM_TOKYO = _globalmapper.GM_DATUM_TOKYO

GM_DATUM_WGS_72 = _globalmapper.GM_DATUM_WGS_72

GM_DATUM_WGS_84 = _globalmapper.GM_DATUM_WGS_84

GM_DATUM_NAD27_ALASKA = _globalmapper.GM_DATUM_NAD27_ALASKA

GM_DATUM_NAD27_ALEUTIANS_EAST = _globalmapper.GM_DATUM_NAD27_ALEUTIANS_EAST

GM_DATUM_NAD27_ALEUTIANS_WEST = _globalmapper.GM_DATUM_NAD27_ALEUTIANS_WEST

GM_DATUM_NAD27_YPG = _globalmapper.GM_DATUM_NAD27_YPG

GM_DATUM_CH1903 = _globalmapper.GM_DATUM_CH1903

GM_DATUM_EGYPT_1907 = _globalmapper.GM_DATUM_EGYPT_1907

GM_DATUM_SOUTH_AMERICA_1969 = _globalmapper.GM_DATUM_SOUTH_AMERICA_1969

GM_DATUM_RT90 = _globalmapper.GM_DATUM_RT90

GM_DATUM_GUAM_1963 = _globalmapper.GM_DATUM_GUAM_1963

GM_DATUM_POTSDAM = _globalmapper.GM_DATUM_POTSDAM

GM_DATUM_MGI_AUSTRIA = _globalmapper.GM_DATUM_MGI_AUSTRIA

GM_DATUM_GDA94 = _globalmapper.GM_DATUM_GDA94

GM_DATUM_INDIAN_1975 = _globalmapper.GM_DATUM_INDIAN_1975

GM_DATUM_NZGD_2000 = _globalmapper.GM_DATUM_NZGD_2000

GM_DATUM_NAHRWAN = _globalmapper.GM_DATUM_NAHRWAN

GM_DATUM_S_42_HUNGARY = _globalmapper.GM_DATUM_S_42_HUNGARY

GM_DATUM_S_42_POLAND = _globalmapper.GM_DATUM_S_42_POLAND

GM_DATUM_S_42_CZECH = _globalmapper.GM_DATUM_S_42_CZECH

GM_DATUM_S_42_LATVIA = _globalmapper.GM_DATUM_S_42_LATVIA

GM_DATUM_S_42_KAZAKHSTAN = _globalmapper.GM_DATUM_S_42_KAZAKHSTAN

GM_DATUM_S_42_ALBANIA = _globalmapper.GM_DATUM_S_42_ALBANIA

GM_DATUM_S_42_ROMANIA = _globalmapper.GM_DATUM_S_42_ROMANIA

GM_DATUM_D_48_SLOVENIA = _globalmapper.GM_DATUM_D_48_SLOVENIA

GM_DATUM_NAD27_CANADA = _globalmapper.GM_DATUM_NAD27_CANADA

GM_DATUM_MINNA_CAMEROON = _globalmapper.GM_DATUM_MINNA_CAMEROON

GM_DATUM_MINNA_NIGERIA = _globalmapper.GM_DATUM_MINNA_NIGERIA

GM_DATUM_DUTCH = _globalmapper.GM_DATUM_DUTCH

GM_DATUM_ZANDERIJ = _globalmapper.GM_DATUM_ZANDERIJ

GM_DATUM_FINLAND_HAYFORD = _globalmapper.GM_DATUM_FINLAND_HAYFORD

GM_DATUM_BEIJING_1954 = _globalmapper.GM_DATUM_BEIJING_1954

GM_DATUM_NGO_1948_GREENWICH = _globalmapper.GM_DATUM_NGO_1948_GREENWICH

GM_DATUM_NTF_FRANCE_GREENWICH = _globalmapper.GM_DATUM_NTF_FRANCE_GREENWICH

GM_DATUM_CHAD_WG1998 = _globalmapper.GM_DATUM_CHAD_WG1998

GM_DATUM_HJORSEY_1955 = _globalmapper.GM_DATUM_HJORSEY_1955

GM_DATUM_BOGOTA_OBSERVATORY = _globalmapper.GM_DATUM_BOGOTA_OBSERVATORY

GM_DATUM_SCHWARZECK = _globalmapper.GM_DATUM_SCHWARZECK

GM_DATUM_NORTH_SAHARA_1959 = _globalmapper.GM_DATUM_NORTH_SAHARA_1959

GM_DATUM_REUNION_ISLAND = _globalmapper.GM_DATUM_REUNION_ISLAND

GM_DATUM_IRELAND_1965 = _globalmapper.GM_DATUM_IRELAND_1965

GM_DATUM_AIN_EL_ABD_BAHRAIN = _globalmapper.GM_DATUM_AIN_EL_ABD_BAHRAIN

GM_DATUM_AIN_EL_ABD_SAUDI_ARABIA = _globalmapper.GM_DATUM_AIN_EL_ABD_SAUDI_ARABIA

GM_DATUM_LUZON = _globalmapper.GM_DATUM_LUZON

GM_DATUM_CARTHAGE = _globalmapper.GM_DATUM_CARTHAGE

GM_DATUM_MERCHICH = _globalmapper.GM_DATUM_MERCHICH

GM_DATUM_NAD27_MEXICO = _globalmapper.GM_DATUM_NAD27_MEXICO

GM_DATUM_ED50_ENGLAND = _globalmapper.GM_DATUM_ED50_ENGLAND

GM_DATUM_ED50_FINLAND_NORWAY = _globalmapper.GM_DATUM_ED50_FINLAND_NORWAY

GM_DATUM_ED50_GREECE = _globalmapper.GM_DATUM_ED50_GREECE

GM_DATUM_ED50_SICILY = _globalmapper.GM_DATUM_ED50_SICILY

GM_DATUM_ED50_SPAIN_PORTUGAL = _globalmapper.GM_DATUM_ED50_SPAIN_PORTUGAL

GM_DATUM_ROME_1940 = _globalmapper.GM_DATUM_ROME_1940

GM_DATUM_KERTAU_1948 = _globalmapper.GM_DATUM_KERTAU_1948

GM_DATUM_LEIGON = _globalmapper.GM_DATUM_LEIGON

GM_DATUM_TIMBALAI_1948 = _globalmapper.GM_DATUM_TIMBALAI_1948

GM_DATUM_ASTRO_B4_SOROL_ATOLL = _globalmapper.GM_DATUM_ASTRO_B4_SOROL_ATOLL

GM_DATUM_ASTRO_BEACON = _globalmapper.GM_DATUM_ASTRO_BEACON

GM_DATUM_ASTRO_DOS_71_4 = _globalmapper.GM_DATUM_ASTRO_DOS_71_4

GM_DATUM_ASTRONOMIC_STN_1952 = _globalmapper.GM_DATUM_ASTRONOMIC_STN_1952

GM_DATUM_EASTER_ISLAND_1967 = _globalmapper.GM_DATUM_EASTER_ISLAND_1967

GM_DATUM_HERMANNSKOGEL = _globalmapper.GM_DATUM_HERMANNSKOGEL

GM_DATUM_INDIAN_BANGLADESH = _globalmapper.GM_DATUM_INDIAN_BANGLADESH

GM_DATUM_INDIAN_MEAN_VALUE = _globalmapper.GM_DATUM_INDIAN_MEAN_VALUE

GM_DATUM_INDIAN_THAILAND = _globalmapper.GM_DATUM_INDIAN_THAILAND

GM_DATUM_ISTS_073_ASTRO = _globalmapper.GM_DATUM_ISTS_073_ASTRO

GM_DATUM_NAD27_BAHAMAS = _globalmapper.GM_DATUM_NAD27_BAHAMAS

GM_DATUM_NAD27_CANAL_ZONE = _globalmapper.GM_DATUM_NAD27_CANAL_ZONE

GM_DATUM_NAD27_CARIBBEAN = _globalmapper.GM_DATUM_NAD27_CARIBBEAN

GM_DATUM_NAD27_CENTRAL = _globalmapper.GM_DATUM_NAD27_CENTRAL

GM_DATUM_NAD27_CUBA = _globalmapper.GM_DATUM_NAD27_CUBA

GM_DATUM_NAD27_GREENLAND = _globalmapper.GM_DATUM_NAD27_GREENLAND

GM_DATUM_NAD27_SAN_SALVADOR = _globalmapper.GM_DATUM_NAD27_SAN_SALVADOR

GM_DATUM_OBSERVATORIO_1966 = _globalmapper.GM_DATUM_OBSERVATORIO_1966

GM_DATUM_PICO_DE_LAS_NIEVES = _globalmapper.GM_DATUM_PICO_DE_LAS_NIEVES

GM_DATUM_PORTUGESE_1973 = _globalmapper.GM_DATUM_PORTUGESE_1973

GM_DATUM_PROV_S_CHILEAN = _globalmapper.GM_DATUM_PROV_S_CHILEAN

GM_DATUM_QORNOQ = _globalmapper.GM_DATUM_QORNOQ

GM_DATUM_SAO_BRAZ = _globalmapper.GM_DATUM_SAO_BRAZ

GM_DATUM_SOUTHEAST_BASE = _globalmapper.GM_DATUM_SOUTHEAST_BASE

GM_DATUM_SOUTHWEST_BASE = _globalmapper.GM_DATUM_SOUTHWEST_BASE

GM_DATUM_KKJ = _globalmapper.GM_DATUM_KKJ

GM_DATUM_GGRS87 = _globalmapper.GM_DATUM_GGRS87

GM_DATUM_POINTE_NOIRE = _globalmapper.GM_DATUM_POINTE_NOIRE

GM_DATUM_RGF_93 = _globalmapper.GM_DATUM_RGF_93

GM_DATUM_CAMPO_INCHAUSPE = _globalmapper.GM_DATUM_CAMPO_INCHAUSPE

GM_DATUM_ETRS89 = _globalmapper.GM_DATUM_ETRS89

GM_DATUM_NTF_FRANCE_PARIS = _globalmapper.GM_DATUM_NTF_FRANCE_PARIS

GM_DATUM_HARTEBEESTHOEK94 = _globalmapper.GM_DATUM_HARTEBEESTHOEK94

GM_DATUM_INDONESIA_1974 = _globalmapper.GM_DATUM_INDONESIA_1974

GM_DATUM_BUKIT_RIMPAH = _globalmapper.GM_DATUM_BUKIT_RIMPAH

GM_DATUM_NAD27 = _globalmapper.GM_DATUM_NAD27

GM_DATUM_LUREF = _globalmapper.GM_DATUM_LUREF

GM_DATUM_QND95 = _globalmapper.GM_DATUM_QND95

GM_DATUM_OLD_ISRAELI = _globalmapper.GM_DATUM_OLD_ISRAELI

GM_DATUM_NEW_ISRAELI = _globalmapper.GM_DATUM_NEW_ISRAELI

GM_DATUM_CORREGO_ALEGRE = _globalmapper.GM_DATUM_CORREGO_ALEGRE

GM_DATUM_POSGAR94 = _globalmapper.GM_DATUM_POSGAR94

GM_DATUM_HD72 = _globalmapper.GM_DATUM_HD72

GM_DATUM_ATS77_NOVA_SCOTIA = _globalmapper.GM_DATUM_ATS77_NOVA_SCOTIA

GM_DATUM_INDIAN_NEPAL = _globalmapper.GM_DATUM_INDIAN_NEPAL

GM_DATUM_YACARE = _globalmapper.GM_DATUM_YACARE

GM_DATUM_TANANARIVE_1925 = _globalmapper.GM_DATUM_TANANARIVE_1925

GM_DATUM_S_JTSK = _globalmapper.GM_DATUM_S_JTSK

GM_DATUM_GRS80_ELLIPSOID = _globalmapper.GM_DATUM_GRS80_ELLIPSOID

GM_DATUM_KGD = _globalmapper.GM_DATUM_KGD

GM_DATUM_IRELAND_1975 = _globalmapper.GM_DATUM_IRELAND_1975

GM_DATUM_DP1970 = _globalmapper.GM_DATUM_DP1970

GM_DATUM_LISBON_DLX = _globalmapper.GM_DATUM_LISBON_DLX

GM_DATUM_SOLOMON_1968 = _globalmapper.GM_DATUM_SOLOMON_1968

GM_DATUM_M_PORALOKO = _globalmapper.GM_DATUM_M_PORALOKO

GM_DATUM_GOOGLE_MAPS = _globalmapper.GM_DATUM_GOOGLE_MAPS

GM_DATUM_BD72 = _globalmapper.GM_DATUM_BD72

GM_DATUM_NGO_1948_OSLO = _globalmapper.GM_DATUM_NGO_1948_OSLO

GM_DATUM_TANANARIVE_1925_PARIS = _globalmapper.GM_DATUM_TANANARIVE_1925_PARIS

GM_DATUM_ARATU = _globalmapper.GM_DATUM_ARATU

GM_DATUM_CAMACUPA = _globalmapper.GM_DATUM_CAMACUPA

GM_DATUM_JAD69 = _globalmapper.GM_DATUM_JAD69

GM_DATUM_JAD2001 = _globalmapper.GM_DATUM_JAD2001

GM_DATUM_EUROPEAN_DATUM_1987 = _globalmapper.GM_DATUM_EUROPEAN_DATUM_1987

GM_DATUM_S_42_AZ_GEORGIA = _globalmapper.GM_DATUM_S_42_AZ_GEORGIA

GM_DATUM_S_42_ESTONIA = _globalmapper.GM_DATUM_S_42_ESTONIA

GM_DATUM_S_42_GERMANY = _globalmapper.GM_DATUM_S_42_GERMANY

GM_DATUM_S_42_LITHUANIA = _globalmapper.GM_DATUM_S_42_LITHUANIA

GM_DATUM_S_42_RUSSIA = _globalmapper.GM_DATUM_S_42_RUSSIA

GM_DATUM_IRENET95 = _globalmapper.GM_DATUM_IRENET95

GM_DATUM_PRS92 = _globalmapper.GM_DATUM_PRS92

GM_DATUM_MALONGO_1987 = _globalmapper.GM_DATUM_MALONGO_1987

GM_DATUM_SWEREF99 = _globalmapper.GM_DATUM_SWEREF99

GM_DATUM_KOREAN_1985 = _globalmapper.GM_DATUM_KOREAN_1985

GM_DATUM_KOREAN_1995 = _globalmapper.GM_DATUM_KOREAN_1995

GM_DATUM_HERAT_NORTH = _globalmapper.GM_DATUM_HERAT_NORTH

GM_DATUM_DEIR_EZ_ZOR = _globalmapper.GM_DATUM_DEIR_EZ_ZOR

GM_DATUM_EGYPT_GULF_OF_SUEZ = _globalmapper.GM_DATUM_EGYPT_GULF_OF_SUEZ

GM_DATUM_JORDAN = _globalmapper.GM_DATUM_JORDAN

GM_DATUM_FD_1958 = _globalmapper.GM_DATUM_FD_1958

GM_DATUM_OCOTEPEQUE = _globalmapper.GM_DATUM_OCOTEPEQUE

GM_DATUM_ISN93 = _globalmapper.GM_DATUM_ISN93

GM_DATUM_REYKJAVIK_1900 = _globalmapper.GM_DATUM_REYKJAVIK_1900

GM_DATUM_ESTONIA_1997 = _globalmapper.GM_DATUM_ESTONIA_1997

GM_DATUM_TRINIDAD_1903 = _globalmapper.GM_DATUM_TRINIDAD_1903

GM_DATUM_LKS92 = _globalmapper.GM_DATUM_LKS92

GM_DATUM_MODIS_SPHEROID = _globalmapper.GM_DATUM_MODIS_SPHEROID

GM_DATUM_ETRF_2000 = _globalmapper.GM_DATUM_ETRF_2000

GM_DATUM_ROME_1940_ROME = _globalmapper.GM_DATUM_ROME_1940_ROME

GM_DATUM_NAPARIMA_1972 = _globalmapper.GM_DATUM_NAPARIMA_1972

GM_DATUM_JGD2000 = _globalmapper.GM_DATUM_JGD2000

GM_DATUM_SIRGAS_2000 = _globalmapper.GM_DATUM_SIRGAS_2000

GM_DATUM_CLARKE_1866_AUTHALIC = _globalmapper.GM_DATUM_CLARKE_1866_AUTHALIC

GM_DATUM_RGNC91_93 = _globalmapper.GM_DATUM_RGNC91_93

GM_DATUM_IGN72_GRANDE_TERRE = _globalmapper.GM_DATUM_IGN72_GRANDE_TERRE

GM_DATUM_BESSEL_1841 = _globalmapper.GM_DATUM_BESSEL_1841

GM_DATUM_BESSEL_1841_GENOVA = _globalmapper.GM_DATUM_BESSEL_1841_GENOVA

GM_DATUM_BESSEL_1841_MONTE_MARIO = _globalmapper.GM_DATUM_BESSEL_1841_MONTE_MARIO

GM_DATUM_BESSEL_1841_CASTANEA_DELLE_FURIE = _globalmapper.GM_DATUM_BESSEL_1841_CASTANEA_DELLE_FURIE

GM_DATUM_PSD93 = _globalmapper.GM_DATUM_PSD93

GM_DATUM_NORTH_SAHARA_1959_HASSI = _globalmapper.GM_DATUM_NORTH_SAHARA_1959_HASSI

GM_DATUM_LA_CANOA = _globalmapper.GM_DATUM_LA_CANOA

GM_DATUM_NAD83_ITRF96 = _globalmapper.GM_DATUM_NAD83_ITRF96

GM_DATUM_MGI_CROATIA_SERBIA = _globalmapper.GM_DATUM_MGI_CROATIA_SERBIA

GM_DATUM_MGI_SLOVENIA = _globalmapper.GM_DATUM_MGI_SLOVENIA

GM_DATUM_HONG_KONG_1980 = _globalmapper.GM_DATUM_HONG_KONG_1980

GM_DATUM_AMERICAN_SAMOA_1962 = _globalmapper.GM_DATUM_AMERICAN_SAMOA_1962

GM_DATUM_POTSDAM_FERRO = _globalmapper.GM_DATUM_POTSDAM_FERRO

GM_DATUM_GDM2000 = _globalmapper.GM_DATUM_GDM2000

GM_DATUM_LOWRANCE = _globalmapper.GM_DATUM_LOWRANCE

GM_DATUM_NAD83_CSRS = _globalmapper.GM_DATUM_NAD83_CSRS

GM_DATUM_RGFG95 = _globalmapper.GM_DATUM_RGFG95

GM_DATUM_RGR92 = _globalmapper.GM_DATUM_RGR92

GM_DATUM_RGM04 = _globalmapper.GM_DATUM_RGM04

GM_DATUM_RGSPM06 = _globalmapper.GM_DATUM_RGSPM06

GM_DATUM_ED50_TURKEY = _globalmapper.GM_DATUM_ED50_TURKEY

GM_DATUM_GUADELOUPE_1948 = _globalmapper.GM_DATUM_GUADELOUPE_1948

GM_DATUM_MARTINIQUE_1938 = _globalmapper.GM_DATUM_MARTINIQUE_1938

GM_DATUM_COMBANI_1950 = _globalmapper.GM_DATUM_COMBANI_1950

GM_DATUM_CSJ67 = _globalmapper.GM_DATUM_CSJ67

GM_DATUM_FORT_MARIGOT = _globalmapper.GM_DATUM_FORT_MARIGOT

GM_DATUM_XIAN_1980 = _globalmapper.GM_DATUM_XIAN_1980

GM_DATUM_DEALUL_PISCULUI_1933 = _globalmapper.GM_DATUM_DEALUL_PISCULUI_1933

GM_DATUM_LE_POUCE_1934 = _globalmapper.GM_DATUM_LE_POUCE_1934

GM_DATUM_VN_2000 = _globalmapper.GM_DATUM_VN_2000

GM_DATUM_TETE = _globalmapper.GM_DATUM_TETE

GM_DATUM_POTSDAM_1983_FERRO = _globalmapper.GM_DATUM_POTSDAM_1983_FERRO

GM_DATUM_KRASOVSKY_ELLIPSOID = _globalmapper.GM_DATUM_KRASOVSKY_ELLIPSOID

GM_DATUM_NAD27_MICHIGAN = _globalmapper.GM_DATUM_NAD27_MICHIGAN

GM_DATUM_INDIAN_1960 = _globalmapper.GM_DATUM_INDIAN_1960

GM_DATUM_OSGB36_NTV2 = _globalmapper.GM_DATUM_OSGB36_NTV2

GM_DATUM_OSGB36_7PARAM = _globalmapper.GM_DATUM_OSGB36_7PARAM

GM_DATUM_TWD67 = _globalmapper.GM_DATUM_TWD67

GM_DATUM_CROATIA_HDKS = _globalmapper.GM_DATUM_CROATIA_HDKS

GM_DATUM_SPHERE_6378137M = _globalmapper.GM_DATUM_SPHERE_6378137M

GM_DATUM_STM1987 = _globalmapper.GM_DATUM_STM1987

GM_DATUM_QATAR_1974 = _globalmapper.GM_DATUM_QATAR_1974

GM_DATUM_RT38 = _globalmapper.GM_DATUM_RT38

GM_DATUM_RT38_STOCKHOLM = _globalmapper.GM_DATUM_RT38_STOCKHOLM

GM_DATUM_CH1903_PLUS = _globalmapper.GM_DATUM_CH1903_PLUS

GM_DATUM_NAPARIMA_1955 = _globalmapper.GM_DATUM_NAPARIMA_1955

GM_DATUM_CLARKE_1866_ELLIPSOID = _globalmapper.GM_DATUM_CLARKE_1866_ELLIPSOID

GM_DATUM_CLARKE_1880_ELLIPSOID = _globalmapper.GM_DATUM_CLARKE_1880_ELLIPSOID

GM_DATUM_BATAVIA = _globalmapper.GM_DATUM_BATAVIA

GM_DATUM_SPHERE_6371228M = _globalmapper.GM_DATUM_SPHERE_6371228M

GM_DATUM_TWD97 = _globalmapper.GM_DATUM_TWD97

GM_DATUM_JGD2011 = _globalmapper.GM_DATUM_JGD2011

GM_DATUM_PNG94 = _globalmapper.GM_DATUM_PNG94

GM_DATUM_CR05 = _globalmapper.GM_DATUM_CR05

GM_DATUM_RDN2008 = _globalmapper.GM_DATUM_RDN2008

GM_DATUM_HTRS96 = _globalmapper.GM_DATUM_HTRS96

GM_DATUM_ACCRA = _globalmapper.GM_DATUM_ACCRA

GM_DATUM_S_42_KAZAKHSTAN_CASPIAN = _globalmapper.GM_DATUM_S_42_KAZAKHSTAN_CASPIAN

GM_DATUM_TUREF = _globalmapper.GM_DATUM_TUREF

GM_DATUM_GDA2020 = _globalmapper.GM_DATUM_GDA2020

GM_DATUM_IGD05 = _globalmapper.GM_DATUM_IGD05

GM_DATUM_IGD05_12 = _globalmapper.GM_DATUM_IGD05_12

GM_DATUM_IG05_12_INTERMEDIATE = _globalmapper.GM_DATUM_IG05_12_INTERMEDIATE

GM_DATUM_HS2_IRF = _globalmapper.GM_DATUM_HS2_IRF

GM_DATUM_LTF2004 = _globalmapper.GM_DATUM_LTF2004

GM_DATUM_S_JTSK_FERRO = _globalmapper.GM_DATUM_S_JTSK_FERRO

GM_DATUM_FIJI_1986 = _globalmapper.GM_DATUM_FIJI_1986

GM_DATUM_CHILD_FIRST = _globalmapper.GM_DATUM_CHILD_FIRST

GM_DATUM_NAD83_ALABAMA = _globalmapper.GM_DATUM_NAD83_ALABAMA

GM_DATUM_NAD83_ARIZONA = _globalmapper.GM_DATUM_NAD83_ARIZONA

GM_DATUM_NAD83_ARKANSAS = _globalmapper.GM_DATUM_NAD83_ARKANSAS

GM_DATUM_NAD83_CALIFORNIA_NORTH = _globalmapper.GM_DATUM_NAD83_CALIFORNIA_NORTH

GM_DATUM_NAD83_CALIFORNIA_SOUTH = _globalmapper.GM_DATUM_NAD83_CALIFORNIA_SOUTH

GM_DATUM_NAD83_COLORADO = _globalmapper.GM_DATUM_NAD83_COLORADO

GM_DATUM_NAD83_FLORIDA = _globalmapper.GM_DATUM_NAD83_FLORIDA

GM_DATUM_NAD83_GEORGIA = _globalmapper.GM_DATUM_NAD83_GEORGIA

GM_DATUM_NAD83_HAWAII = _globalmapper.GM_DATUM_NAD83_HAWAII

GM_DATUM_NAD83_ILLINOIS = _globalmapper.GM_DATUM_NAD83_ILLINOIS

GM_DATUM_NAD83_INDIANA = _globalmapper.GM_DATUM_NAD83_INDIANA

GM_DATUM_NAD83_IOWA = _globalmapper.GM_DATUM_NAD83_IOWA

GM_DATUM_NAD83_KANSAS = _globalmapper.GM_DATUM_NAD83_KANSAS

GM_DATUM_NAD83_KENTUCKY = _globalmapper.GM_DATUM_NAD83_KENTUCKY

GM_DATUM_NAD83_LOUISIANA = _globalmapper.GM_DATUM_NAD83_LOUISIANA

GM_DATUM_NAD83_MAINE = _globalmapper.GM_DATUM_NAD83_MAINE

GM_DATUM_NAD83_MARYLAND = _globalmapper.GM_DATUM_NAD83_MARYLAND

GM_DATUM_NAD83_MICHIGAN = _globalmapper.GM_DATUM_NAD83_MICHIGAN

GM_DATUM_NAD83_MINNESOTA = _globalmapper.GM_DATUM_NAD83_MINNESOTA

GM_DATUM_NAD83_MISSISSIPPI = _globalmapper.GM_DATUM_NAD83_MISSISSIPPI

GM_DATUM_NAD83_MISSOURI = _globalmapper.GM_DATUM_NAD83_MISSOURI

GM_DATUM_NAD83_MONTANA_EAST = _globalmapper.GM_DATUM_NAD83_MONTANA_EAST

GM_DATUM_NAD83_MONTANA_WEST = _globalmapper.GM_DATUM_NAD83_MONTANA_WEST

GM_DATUM_NAD83_NEBRASKA = _globalmapper.GM_DATUM_NAD83_NEBRASKA

GM_DATUM_NAD83_NEVADA = _globalmapper.GM_DATUM_NAD83_NEVADA

GM_DATUM_NAD83_NEW_ENGLAND = _globalmapper.GM_DATUM_NAD83_NEW_ENGLAND

GM_DATUM_NAD83_NEW_JERSEY = _globalmapper.GM_DATUM_NAD83_NEW_JERSEY

GM_DATUM_NAD83_NEW_MEXICO = _globalmapper.GM_DATUM_NAD83_NEW_MEXICO

GM_DATUM_NAD83_NEW_YORK = _globalmapper.GM_DATUM_NAD83_NEW_YORK

GM_DATUM_NAD83_NORTH_DAKOTA = _globalmapper.GM_DATUM_NAD83_NORTH_DAKOTA

GM_DATUM_NAD83_OHIO = _globalmapper.GM_DATUM_NAD83_OHIO

GM_DATUM_NAD83_OKLAHOMA = _globalmapper.GM_DATUM_NAD83_OKLAHOMA

GM_DATUM_NAD83_PENNSYLVANIA = _globalmapper.GM_DATUM_NAD83_PENNSYLVANIA

GM_DATUM_NAD83_PUERTO_RICO = _globalmapper.GM_DATUM_NAD83_PUERTO_RICO

GM_DATUM_NAD83_SOUTH_DAKOTA = _globalmapper.GM_DATUM_NAD83_SOUTH_DAKOTA

GM_DATUM_NAD83_TENNESSEE = _globalmapper.GM_DATUM_NAD83_TENNESSEE

GM_DATUM_NAD83_TEXAS_EAST = _globalmapper.GM_DATUM_NAD83_TEXAS_EAST

GM_DATUM_NAD83_TEXAS_WEST = _globalmapper.GM_DATUM_NAD83_TEXAS_WEST

GM_DATUM_NAD83_UTAH = _globalmapper.GM_DATUM_NAD83_UTAH

GM_DATUM_NAD83_VIRGINIA = _globalmapper.GM_DATUM_NAD83_VIRGINIA

GM_DATUM_NAD83_WASHINGTON = _globalmapper.GM_DATUM_NAD83_WASHINGTON

GM_DATUM_NAD83_WEST_VIRGINIA = _globalmapper.GM_DATUM_NAD83_WEST_VIRGINIA

GM_DATUM_NAD83_WISCONSIN = _globalmapper.GM_DATUM_NAD83_WISCONSIN

GM_DATUM_NAD83_WYOMING = _globalmapper.GM_DATUM_NAD83_WYOMING

GM_DATUM_MN_ANOKA = _globalmapper.GM_DATUM_MN_ANOKA

GM_DATUM_MN_BECKER = _globalmapper.GM_DATUM_MN_BECKER

GM_DATUM_MN_BELTRAMI_NORTH = _globalmapper.GM_DATUM_MN_BELTRAMI_NORTH

GM_DATUM_MN_BELTRAMI_SOUTH = _globalmapper.GM_DATUM_MN_BELTRAMI_SOUTH

GM_DATUM_MN_BENTON = _globalmapper.GM_DATUM_MN_BENTON

GM_DATUM_MN_BIG_STONE = _globalmapper.GM_DATUM_MN_BIG_STONE

GM_DATUM_MN_BLUE_EARTH = _globalmapper.GM_DATUM_MN_BLUE_EARTH

GM_DATUM_MN_BROWN = _globalmapper.GM_DATUM_MN_BROWN

GM_DATUM_MN_CARLTON = _globalmapper.GM_DATUM_MN_CARLTON

GM_DATUM_MN_CARVER = _globalmapper.GM_DATUM_MN_CARVER

GM_DATUM_MN_CASS_NORTH = _globalmapper.GM_DATUM_MN_CASS_NORTH

GM_DATUM_MN_CASS_SOUTH = _globalmapper.GM_DATUM_MN_CASS_SOUTH

GM_DATUM_MN_CHIPPEWA = _globalmapper.GM_DATUM_MN_CHIPPEWA

GM_DATUM_MN_CHISAGO = _globalmapper.GM_DATUM_MN_CHISAGO

GM_DATUM_MN_COOK_NORTH = _globalmapper.GM_DATUM_MN_COOK_NORTH

GM_DATUM_MN_COOK_SOUTH = _globalmapper.GM_DATUM_MN_COOK_SOUTH

GM_DATUM_MN_COTTONWOOD = _globalmapper.GM_DATUM_MN_COTTONWOOD

GM_DATUM_MN_CROW_WING = _globalmapper.GM_DATUM_MN_CROW_WING

GM_DATUM_MN_DAKOTA = _globalmapper.GM_DATUM_MN_DAKOTA

GM_DATUM_MN_DODGE = _globalmapper.GM_DATUM_MN_DODGE

GM_DATUM_MN_DOUGLAS = _globalmapper.GM_DATUM_MN_DOUGLAS

GM_DATUM_MN_FARIBAULT = _globalmapper.GM_DATUM_MN_FARIBAULT

GM_DATUM_MN_FILLMORE = _globalmapper.GM_DATUM_MN_FILLMORE

GM_DATUM_MN_FREEBORN = _globalmapper.GM_DATUM_MN_FREEBORN

GM_DATUM_MN_GOODHUE = _globalmapper.GM_DATUM_MN_GOODHUE

GM_DATUM_MN_GRANT = _globalmapper.GM_DATUM_MN_GRANT

GM_DATUM_MN_HENNEPIN = _globalmapper.GM_DATUM_MN_HENNEPIN

GM_DATUM_MN_HOUSTON = _globalmapper.GM_DATUM_MN_HOUSTON

GM_DATUM_MN_ISANTI = _globalmapper.GM_DATUM_MN_ISANTI

GM_DATUM_MN_ITASCA_NORTH = _globalmapper.GM_DATUM_MN_ITASCA_NORTH

GM_DATUM_MN_ITASCA_SOUTH = _globalmapper.GM_DATUM_MN_ITASCA_SOUTH

GM_DATUM_MN_JACKSON = _globalmapper.GM_DATUM_MN_JACKSON

GM_DATUM_MN_KANABEC = _globalmapper.GM_DATUM_MN_KANABEC

GM_DATUM_MN_KANDIYOHI = _globalmapper.GM_DATUM_MN_KANDIYOHI

GM_DATUM_MN_KITTSON = _globalmapper.GM_DATUM_MN_KITTSON

GM_DATUM_MN_KOOCHICHING = _globalmapper.GM_DATUM_MN_KOOCHICHING

GM_DATUM_MN_LAC_QUI_PARLE = _globalmapper.GM_DATUM_MN_LAC_QUI_PARLE

GM_DATUM_MN_LAKE_OF_THE_WOODS_NORTH = _globalmapper.GM_DATUM_MN_LAKE_OF_THE_WOODS_NORTH

GM_DATUM_MN_LAKE_OF_THE_WOODS_SOUTH = _globalmapper.GM_DATUM_MN_LAKE_OF_THE_WOODS_SOUTH

GM_DATUM_MN_LE_SUEUR = _globalmapper.GM_DATUM_MN_LE_SUEUR

GM_DATUM_MN_LINCOLN = _globalmapper.GM_DATUM_MN_LINCOLN

GM_DATUM_MN_LYON = _globalmapper.GM_DATUM_MN_LYON

GM_DATUM_MN_MCLEOD = _globalmapper.GM_DATUM_MN_MCLEOD

GM_DATUM_MN_MAHNOMEN = _globalmapper.GM_DATUM_MN_MAHNOMEN

GM_DATUM_MN_MARSHALL = _globalmapper.GM_DATUM_MN_MARSHALL

GM_DATUM_MN_MARTIN = _globalmapper.GM_DATUM_MN_MARTIN

GM_DATUM_MN_MEEKER = _globalmapper.GM_DATUM_MN_MEEKER

GM_DATUM_MN_MORRISON = _globalmapper.GM_DATUM_MN_MORRISON

GM_DATUM_MN_MOWER = _globalmapper.GM_DATUM_MN_MOWER

GM_DATUM_MN_MURRAY = _globalmapper.GM_DATUM_MN_MURRAY

GM_DATUM_MN_NICOLLET = _globalmapper.GM_DATUM_MN_NICOLLET

GM_DATUM_MN_NOBLES = _globalmapper.GM_DATUM_MN_NOBLES

GM_DATUM_MN_NORMAN = _globalmapper.GM_DATUM_MN_NORMAN

GM_DATUM_MN_OLMSTED = _globalmapper.GM_DATUM_MN_OLMSTED

GM_DATUM_MN_OTTERTAIL = _globalmapper.GM_DATUM_MN_OTTERTAIL

GM_DATUM_MN_PENNINGTON = _globalmapper.GM_DATUM_MN_PENNINGTON

GM_DATUM_MN_PINE = _globalmapper.GM_DATUM_MN_PINE

GM_DATUM_MN_PIPESTONE = _globalmapper.GM_DATUM_MN_PIPESTONE

GM_DATUM_MN_POLK = _globalmapper.GM_DATUM_MN_POLK

GM_DATUM_MN_POPE = _globalmapper.GM_DATUM_MN_POPE

GM_DATUM_MN_RAMSEY = _globalmapper.GM_DATUM_MN_RAMSEY

GM_DATUM_MN_RED_LAKE = _globalmapper.GM_DATUM_MN_RED_LAKE

GM_DATUM_MN_REDWOOD = _globalmapper.GM_DATUM_MN_REDWOOD

GM_DATUM_MN_RENVILLE = _globalmapper.GM_DATUM_MN_RENVILLE

GM_DATUM_MN_RICE = _globalmapper.GM_DATUM_MN_RICE

GM_DATUM_MN_ROCK = _globalmapper.GM_DATUM_MN_ROCK

GM_DATUM_MN_ROSEAU = _globalmapper.GM_DATUM_MN_ROSEAU

GM_DATUM_MN_ST_LOUIS_NORTH = _globalmapper.GM_DATUM_MN_ST_LOUIS_NORTH

GM_DATUM_MN_ST_LOUIS_CENTRAL = _globalmapper.GM_DATUM_MN_ST_LOUIS_CENTRAL

GM_DATUM_MN_ST_LOUIS_SOUTH = _globalmapper.GM_DATUM_MN_ST_LOUIS_SOUTH

GM_DATUM_MN_SCOTT = _globalmapper.GM_DATUM_MN_SCOTT

GM_DATUM_MN_SHERBURNE = _globalmapper.GM_DATUM_MN_SHERBURNE

GM_DATUM_MN_SIBLEY = _globalmapper.GM_DATUM_MN_SIBLEY

GM_DATUM_MN_STEARNS = _globalmapper.GM_DATUM_MN_STEARNS

GM_DATUM_MN_STEELE = _globalmapper.GM_DATUM_MN_STEELE

GM_DATUM_MN_STEVENS = _globalmapper.GM_DATUM_MN_STEVENS

GM_DATUM_MN_SWIFT = _globalmapper.GM_DATUM_MN_SWIFT

GM_DATUM_MN_TODD = _globalmapper.GM_DATUM_MN_TODD

GM_DATUM_MN_TRAVERSE = _globalmapper.GM_DATUM_MN_TRAVERSE

GM_DATUM_MN_WABASHA = _globalmapper.GM_DATUM_MN_WABASHA

GM_DATUM_MN_WADENA = _globalmapper.GM_DATUM_MN_WADENA

GM_DATUM_MN_WASECA = _globalmapper.GM_DATUM_MN_WASECA

GM_DATUM_MN_WATONWAN = _globalmapper.GM_DATUM_MN_WATONWAN

GM_DATUM_MN_WINONA = _globalmapper.GM_DATUM_MN_WINONA

GM_DATUM_MN_WRIGHT = _globalmapper.GM_DATUM_MN_WRIGHT

GM_DATUM_MN_YELLOW_MEDICINE = _globalmapper.GM_DATUM_MN_YELLOW_MEDICINE

GM_DATUM_WI_SHEBOYGAN = _globalmapper.GM_DATUM_WI_SHEBOYGAN

GM_DATUM_ED50_ITALY = _globalmapper.GM_DATUM_ED50_ITALY

GM_DATUM_NAD83_SOUTH_CAROLINA = _globalmapper.GM_DATUM_NAD83_SOUTH_CAROLINA

GM_DATUM_ED50_NORTH_SEA = _globalmapper.GM_DATUM_ED50_NORTH_SEA

GM_DATUM_ED50_NORWAY_N62 = _globalmapper.GM_DATUM_ED50_NORWAY_N62

GM_DATUM_ED50_NORWAY_S62 = _globalmapper.GM_DATUM_ED50_NORWAY_S62

GM_DATUM_WI_BURNETT = _globalmapper.GM_DATUM_WI_BURNETT

GM_DATUM_WI_DOUGLAS = _globalmapper.GM_DATUM_WI_DOUGLAS

GM_DATUM_SAD69_BRAZIL = _globalmapper.GM_DATUM_SAD69_BRAZIL

GM_DATUM_KERTAU_1948_MALAYSIA = _globalmapper.GM_DATUM_KERTAU_1948_MALAYSIA

GM_DATUM_NAD83_CSRS_ALBERTA = _globalmapper.GM_DATUM_NAD83_CSRS_ALBERTA

GM_DATUM_NAD83_CSRS_BC = _globalmapper.GM_DATUM_NAD83_CSRS_BC

GM_DATUM_NAD83_CSRS_NB = _globalmapper.GM_DATUM_NAD83_CSRS_NB

GM_DATUM_NAD83_CSRS_QUEBEC = _globalmapper.GM_DATUM_NAD83_CSRS_QUEBEC

GM_DATUM_NAD83_CSRS_SASK = _globalmapper.GM_DATUM_NAD83_CSRS_SASK

GM_DATUM_WI_CHIPPEWA = _globalmapper.GM_DATUM_WI_CHIPPEWA

GM_DATUM_WI_TAYLOR = _globalmapper.GM_DATUM_WI_TAYLOR

GM_DATUM_NAD83_NORTH_CAROLINA = _globalmapper.GM_DATUM_NAD83_NORTH_CAROLINA

GM_DATUM_WI_MARATHON = _globalmapper.GM_DATUM_WI_MARATHON

GM_DATUM_ED50_MALTA = _globalmapper.GM_DATUM_ED50_MALTA

GM_DATUM_NAD83_NSRS2007 = _globalmapper.GM_DATUM_NAD83_NSRS2007

GM_DATUM_NAD83_NSRS2011 = _globalmapper.GM_DATUM_NAD83_NSRS2011

GM_DATUM_NAD83_PA11 = _globalmapper.GM_DATUM_NAD83_PA11

GM_DATUM_NAD83_MA11 = _globalmapper.GM_DATUM_NAD83_MA11

GM_DATUM_MN_ST_LOUIS = _globalmapper.GM_DATUM_MN_ST_LOUIS

GM_DATUM_NAD83_CSRS_7PARAM = _globalmapper.GM_DATUM_NAD83_CSRS_7PARAM

GM_DATUM_CHINA_2000 = _globalmapper.GM_DATUM_CHINA_2000

GM_DATUM_ETRS89_ITALY = _globalmapper.GM_DATUM_ETRS89_ITALY

GM_DATUM_ETRF_2000_ITALY = _globalmapper.GM_DATUM_ETRF_2000_ITALY

GM_DATUM_OSGB36_OSTN02 = _globalmapper.GM_DATUM_OSGB36_OSTN02

GM_DATUM_OSGB36_OSTN15 = _globalmapper.GM_DATUM_OSGB36_OSTN15

GM_DATUM_CUSTOM_FIRST = _globalmapper.GM_DATUM_CUSTOM_FIRST

GM_DATUM_CUSTOM_LAST = _globalmapper.GM_DATUM_CUSTOM_LAST

GM_DATUM_IP_FIRST = _globalmapper.GM_DATUM_IP_FIRST

GM_DATUM_IP_MERCURY = _globalmapper.GM_DATUM_IP_MERCURY

GM_DATUM_IP_VENUS = _globalmapper.GM_DATUM_IP_VENUS

GM_DATUM_IP_VENUS_1985 = _globalmapper.GM_DATUM_IP_VENUS_1985

GM_DATUM_IP_MOON = _globalmapper.GM_DATUM_IP_MOON

GM_DATUM_IP_MARS_2000 = _globalmapper.GM_DATUM_IP_MARS_2000

GM_DATUM_IP_MARS_1990 = _globalmapper.GM_DATUM_IP_MARS_1990

GM_DATUM_IP_JUPITER = _globalmapper.GM_DATUM_IP_JUPITER

GM_DATUM_IP_IO = _globalmapper.GM_DATUM_IP_IO

GM_DATUM_IP_EUROPA = _globalmapper.GM_DATUM_IP_EUROPA

GM_DATUM_IP_GANYMEDE = _globalmapper.GM_DATUM_IP_GANYMEDE

GM_DATUM_IP_CALLISTO = _globalmapper.GM_DATUM_IP_CALLISTO

GM_DATUM_IP_SATURN = _globalmapper.GM_DATUM_IP_SATURN

GM_DATUM_IP_TITAN = _globalmapper.GM_DATUM_IP_TITAN

GM_DATUM_IP_URANUS = _globalmapper.GM_DATUM_IP_URANUS

GM_DATUM_IP_NEPTUNE = _globalmapper.GM_DATUM_IP_NEPTUNE

GM_DATUM_IP_PLUTO = _globalmapper.GM_DATUM_IP_PLUTO

GM_DATUM_IP_MARS_2000_SPHERE = _globalmapper.GM_DATUM_IP_MARS_2000_SPHERE

GM_DATUM_IP_MARS_2000_POLAR_SPHERE = _globalmapper.GM_DATUM_IP_MARS_2000_POLAR_SPHERE

GM_DATUM_IP_MARS_MOLA_SPHERE = _globalmapper.GM_DATUM_IP_MARS_MOLA_SPHERE

GM_DATUM_IP_LAST = _globalmapper.GM_DATUM_IP_LAST

GM_DATUM_GEOCALC = _globalmapper.GM_DATUM_GEOCALC

GM_DATUM_UNKNOWN = _globalmapper.GM_DATUM_UNKNOWN

GM_DATUM_NONE = _globalmapper.GM_DATUM_NONE

GM_DATUM_DEFAULT = _globalmapper.GM_DATUM_DEFAULT

GM_DATUM_SWISS_GRID = _globalmapper.GM_DATUM_SWISS_GRID

GM_MERIDIAN_CASTANEA = _globalmapper.GM_MERIDIAN_CASTANEA

GM_MERIDIAN_FERRO = _globalmapper.GM_MERIDIAN_FERRO

GM_MERIDIAN_GENOVA = _globalmapper.GM_MERIDIAN_GENOVA

GM_MERIDIAN_MONTE_MARIO = _globalmapper.GM_MERIDIAN_MONTE_MARIO

GM_MERIDIAN_ROME = _globalmapper.GM_MERIDIAN_ROME

GM_MERIDIAN_OSLO = _globalmapper.GM_MERIDIAN_OSLO

GM_MERIDIAN_PARIS = _globalmapper.GM_MERIDIAN_PARIS

GM_MERIDIAN_STOCKHOLM = _globalmapper.GM_MERIDIAN_STOCKHOLM

FIRST_STANDARD_PARALLEL = _globalmapper.FIRST_STANDARD_PARALLEL

SECOND_STANDARD_PARALLEL = _globalmapper.SECOND_STANDARD_PARALLEL

CENTRAL_LATITUDE = _globalmapper.CENTRAL_LATITUDE

CENTRAL_LONGITUDE = _globalmapper.CENTRAL_LONGITUDE

FALSE_EASTING = _globalmapper.FALSE_EASTING

FALSE_NORTHING = _globalmapper.FALSE_NORTHING

SPHERE_RADIUS = _globalmapper.SPHERE_RADIUS

ORIGIN_LATITUDE = _globalmapper.ORIGIN_LATITUDE

SEMI_MAJOR_AXIS = _globalmapper.SEMI_MAJOR_AXIS

SEMI_MINOR_AXIS = _globalmapper.SEMI_MINOR_AXIS

CENTRAL_MERIDIAN = _globalmapper.CENTRAL_MERIDIAN

STANDARD_PARALLEL = _globalmapper.STANDARD_PARALLEL

TRUE_SCALE_LATITUDE = _globalmapper.TRUE_SCALE_LATITUDE

AZIMUTH_ANGLE = _globalmapper.AZIMUTH_ANGLE

AZIMUTH_POINT = _globalmapper.AZIMUTH_POINT

LATITUDE1 = _globalmapper.LATITUDE1

LATITUDE2 = _globalmapper.LATITUDE2

LONGITUDE1 = _globalmapper.LONGITUDE1

LONGITUDE2 = _globalmapper.LONGITUDE2

PROJ_CENTER_SCALE_FACTOR = _globalmapper.PROJ_CENTER_SCALE_FACTOR

LONGITUDE_POLE = _globalmapper.LONGITUDE_POLE

CENTRAL_MERIDIAN_SCALE_FACTOR = _globalmapper.CENTRAL_MERIDIAN_SCALE_FACTOR

PERSPECTIVE_POINT_HEIGHT = _globalmapper.PERSPECTIVE_POINT_HEIGHT

INCLINATION_ANGLE = _globalmapper.INCLINATION_ANGLE

ASCENTION_LONGITUDE = _globalmapper.ASCENTION_LONGITUDE

SAT_REV_PERIOD = _globalmapper.SAT_REV_PERIOD

END_OF_PATH_FLAG = _globalmapper.END_OF_PATH_FLAG

LANDSAT_SAT_NUM = _globalmapper.LANDSAT_SAT_NUM

OEA_SHAPE_PARM_M = _globalmapper.OEA_SHAPE_PARM_M

OEA_SHAPE_PARM_N = _globalmapper.OEA_SHAPE_PARM_N

OEA_OVAL_ROTATION_ANGLE = _globalmapper.OEA_OVAL_ROTATION_ANGLE

ZONE = _globalmapper.ZONE

GM_PRJ_ATTR_STATE_PLANE_SCALE_FACTOR = _globalmapper.GM_PRJ_ATTR_STATE_PLANE_SCALE_FACTOR

GM_PRJ_ATTR_HORZ_OFFSET = _globalmapper.GM_PRJ_ATTR_HORZ_OFFSET

GM_PRJ_ATTR_HORZ_OFFSET_TYPE = _globalmapper.GM_PRJ_ATTR_HORZ_OFFSET_TYPE

GM_PRJ_ATTR_HORZ_OFFSET_VTYPE = _globalmapper.GM_PRJ_ATTR_HORZ_OFFSET_VTYPE

GM_PRJ_ATTR_VERT_OFFSET = _globalmapper.GM_PRJ_ATTR_VERT_OFFSET

GM_PRJ_ATTR_VERT_OFFSET_TYPE = _globalmapper.GM_PRJ_ATTR_VERT_OFFSET_TYPE

GM_PRJ_ATTR_VERT_OFFSET_VTYPE = _globalmapper.GM_PRJ_ATTR_VERT_OFFSET_VTYPE

GM_PRJ_ATTR_SIZE_VALUE = _globalmapper.GM_PRJ_ATTR_SIZE_VALUE

GM_PRJ_ATTR_SIZE_VALUE_TYPE = _globalmapper.GM_PRJ_ATTR_SIZE_VALUE_TYPE

GM_PRJ_ATTR_ALWAYS_ON_TOP = _globalmapper.GM_PRJ_ATTR_ALWAYS_ON_TOP

GM_PRJ_ATTR_SHRINK_TO_FIT = _globalmapper.GM_PRJ_ATTR_SHRINK_TO_FIT

GM_PRJ_ATTR_STATE_PLANE_EXTRA_FALSE_EASTING = _globalmapper.GM_PRJ_ATTR_STATE_PLANE_EXTRA_FALSE_EASTING

GM_PRJ_ATTR_STATE_PLANE_EXTRA_FALSE_NORTHING = _globalmapper.GM_PRJ_ATTR_STATE_PLANE_EXTRA_FALSE_NORTHING

GM_PRJ_ATTR_STATE_PLANE_SCALE_CENTER_EASTING = _globalmapper.GM_PRJ_ATTR_STATE_PLANE_SCALE_CENTER_EASTING

GM_PRJ_ATTR_STATE_PLANE_SCALE_CENTER_NORTHING = _globalmapper.GM_PRJ_ATTR_STATE_PLANE_SCALE_CENTER_NORTHING

GM_PRJ_ATTR_ROTATION_ANGLE = _globalmapper.GM_PRJ_ATTR_ROTATION_ANGLE

GM_PRJ_ATTR_AUX_SPHERE_TYPE = _globalmapper.GM_PRJ_ATTR_AUX_SPHERE_TYPE

GM_PRJ_ATTR_RECTIFIED_GRID_ANGLE = _globalmapper.GM_PRJ_ATTR_RECTIFIED_GRID_ANGLE

NUM_PROJ_ATTR_TYPES = _globalmapper.NUM_PROJ_ATTR_TYPES

GM_MAX_ATTR_PER_PROJ = _globalmapper.GM_MAX_ATTR_PER_PROJ

GM_PRJ_ATTR_SKEW_GRID_ANGLE = _globalmapper.GM_PRJ_ATTR_SKEW_GRID_ANGLE

[docs]
class GM_ProjAttrValue_t(object):
    r"""Proxy of C++ GM_ProjAttrValue_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __repr__( self ) :
        return str((self.mAttr, self.mValue))


    def __init__(self, a: "PROJATTR"=0, t: "double"=0):
        _globalmapper.GM_ProjAttrValue_t_swiginit(self, _globalmapper.new_GM_ProjAttrValue_t(a, t))
    mAttr = property(_globalmapper.GM_ProjAttrValue_t_mAttr_get, _globalmapper.GM_ProjAttrValue_t_mAttr_set, doc=r"""mAttr : PROJATTR""")
    mValue = property(_globalmapper.GM_ProjAttrValue_t_mValue_get, _globalmapper.GM_ProjAttrValue_t_mValue_set, doc=r"""mValue : double""")
    __swig_destroy__ = _globalmapper.delete_GM_ProjAttrValue_t


# Register GM_ProjAttrValue_t in _globalmapper:
_globalmapper.GM_ProjAttrValue_t_swigregister(GM_ProjAttrValue_t)

[docs]
class GM_Projection_t(object):
    r"""Proxy of C++ GM_Projection_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

[docs]
    def setAttr(self, *args) -> "void":
        return _globalmapper.GM_Projection_t_setAttr(self, *args)


    def __repr__( self ) :
        return str( gmobject_to_map( self ) )

    mProjSys = property(_globalmapper.GM_Projection_t_mProjSys_get, _globalmapper.GM_Projection_t_mProjSys_set, doc=r"""mProjSys : PROJSYS""")
    mDatum = property(_globalmapper.GM_Projection_t_mDatum_get, _globalmapper.GM_Projection_t_mDatum_set, doc=r"""mDatum : DATUM""")
    mUnit = property(_globalmapper.GM_Projection_t_mUnit_get, _globalmapper.GM_Projection_t_mUnit_set, doc=r"""mUnit : UNIT""")
    mNumAttrs = property(_globalmapper.GM_Projection_t_mNumAttrs_get, _globalmapper.GM_Projection_t_mNumAttrs_set, doc=r"""mNumAttrs : unsigned long""")
    mAttrList = property(_globalmapper.GM_Projection_t_mAttrList_get, _globalmapper.GM_Projection_t_mAttrList_set, doc=r"""mAttrList : a(GM_MAX_ATTR_PER_PROJ).GM_ProjAttrValue_t""")

    def __init__(self):
        r"""__init__(GM_Projection_t self) -> GM_Projection_t"""
        _globalmapper.GM_Projection_t_swiginit(self, _globalmapper.new_GM_Projection_t())
    __swig_destroy__ = _globalmapper.delete_GM_Projection_t


# Register GM_Projection_t in _globalmapper:
_globalmapper.GM_Projection_t_swigregister(GM_Projection_t)

[docs]
class GM_ProjDef_t(object):
    r"""Proxy of C++ GM_ProjDef_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __repr__( self ) :
        return str( gmobject_to_map( self ) )

    mDefinition = property(_globalmapper.GM_ProjDef_t_mDefinition_get, _globalmapper.GM_ProjDef_t_mDefinition_set, doc=r"""mDefinition : GM_Projection_t""")
    mWKT = property(_globalmapper.GM_ProjDef_t_mWKT_get, _globalmapper.GM_ProjDef_t_mWKT_set, doc=r"""mWKT : p.q(const).char""")

    def __init__(self):
        r"""__init__(GM_ProjDef_t self) -> GM_ProjDef_t"""
        _globalmapper.GM_ProjDef_t_swiginit(self, _globalmapper.new_GM_ProjDef_t())
    __swig_destroy__ = _globalmapper.delete_GM_ProjDef_t


# Register GM_ProjDef_t in _globalmapper:
_globalmapper.GM_ProjDef_t_swigregister(GM_ProjDef_t)

[docs]
class GM_ValName_t(object):
    r"""Proxy of C++ GM_ValName_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __repr__( self ) :
        return str( gmobject_to_map( self ) )

    mVal = property(_globalmapper.GM_ValName_t_mVal_get, _globalmapper.GM_ValName_t_mVal_set, doc=r"""mVal : int""")
    mName = property(_globalmapper.GM_ValName_t_mName_get, _globalmapper.GM_ValName_t_mName_set, doc=r"""mName : p.q(const).char""")

    def __init__(self):
        r"""__init__(GM_ValName_t self) -> GM_ValName_t"""
        _globalmapper.GM_ValName_t_swiginit(self, _globalmapper.new_GM_ValName_t())
    __swig_destroy__ = _globalmapper.delete_GM_ValName_t


# Register GM_ValName_t in _globalmapper:
_globalmapper.GM_ValName_t_swigregister(GM_ValName_t)

[docs]
class GM_ProjectionInfo_t(object):
    r"""Proxy of C++ GM_ProjectionInfo_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __repr__( self ) :
        attr_map = gmobject_to_map( self )
        attr_map['mDatumList'] = carray_to_list( GM_ValName_array_frompointer( self.mDatumList ), self.mDatumListSize )
        attr_map['mUnitList'] = carray_to_list( GM_ValName_array_frompointer( self.mUnitList ), self.mUnitListSize )
        attr_map['mZoneList'] = carray_to_list( GM_ValName_array_frompointer( self.mZoneList ), self.mZoneListSize )
        attr_map['mAttrList'] = carray_to_list( GM_ValName_array_frompointer( self.mAttrList ), self.mAttrListSize )
        return str(attr_map)

    mProjSys = property(_globalmapper.GM_ProjectionInfo_t_mProjSys_get, _globalmapper.GM_ProjectionInfo_t_mProjSys_set, doc=r"""mProjSys : PROJSYS""")
    mProjSysName = property(_globalmapper.GM_ProjectionInfo_t_mProjSysName_get, _globalmapper.GM_ProjectionInfo_t_mProjSysName_set, doc=r"""mProjSysName : p.q(const).char""")
    mDatumList = property(_globalmapper.GM_ProjectionInfo_t_mDatumList_get, _globalmapper.GM_ProjectionInfo_t_mDatumList_set, doc=r"""mDatumList : p.GM_ValName_t""")
    mDatumListSize = property(_globalmapper.GM_ProjectionInfo_t_mDatumListSize_get, _globalmapper.GM_ProjectionInfo_t_mDatumListSize_set, doc=r"""mDatumListSize : int""")
    mUnitList = property(_globalmapper.GM_ProjectionInfo_t_mUnitList_get, _globalmapper.GM_ProjectionInfo_t_mUnitList_set, doc=r"""mUnitList : p.GM_ValName_t""")
    mUnitListSize = property(_globalmapper.GM_ProjectionInfo_t_mUnitListSize_get, _globalmapper.GM_ProjectionInfo_t_mUnitListSize_set, doc=r"""mUnitListSize : int""")
    mZoneList = property(_globalmapper.GM_ProjectionInfo_t_mZoneList_get, _globalmapper.GM_ProjectionInfo_t_mZoneList_set, doc=r"""mZoneList : p.GM_ValName_t""")
    mZoneListSize = property(_globalmapper.GM_ProjectionInfo_t_mZoneListSize_get, _globalmapper.GM_ProjectionInfo_t_mZoneListSize_set, doc=r"""mZoneListSize : int""")
    mAttrList = property(_globalmapper.GM_ProjectionInfo_t_mAttrList_get, _globalmapper.GM_ProjectionInfo_t_mAttrList_set, doc=r"""mAttrList : p.GM_ValName_t""")
    mAttrListSize = property(_globalmapper.GM_ProjectionInfo_t_mAttrListSize_get, _globalmapper.GM_ProjectionInfo_t_mAttrListSize_set, doc=r"""mAttrListSize : int""")

    def __init__(self):
        r"""__init__(GM_ProjectionInfo_t self) -> GM_ProjectionInfo_t"""
        _globalmapper.GM_ProjectionInfo_t_swiginit(self, _globalmapper.new_GM_ProjectionInfo_t())
    __swig_destroy__ = _globalmapper.delete_GM_ProjectionInfo_t


# Register GM_ProjectionInfo_t in _globalmapper:
_globalmapper.GM_ProjectionInfo_t_swigregister(GM_ProjectionInfo_t)

GM_INTENSITY_MIN_VALID = _globalmapper.GM_INTENSITY_MIN_VALID

GM_INTENSITY_MAX_VALID = _globalmapper.GM_INTENSITY_MAX_VALID

GM_NDVI_MIN_VALID = _globalmapper.GM_NDVI_MIN_VALID

GM_NDVI_MAX_VALID = _globalmapper.GM_NDVI_MAX_VALID

GM_NDVI_MIN_VEG = _globalmapper.GM_NDVI_MIN_VEG

GM_NDVI_MAX_BARE = _globalmapper.GM_NDVI_MAX_BARE

GM_NDWI_MIN_VALID = _globalmapper.GM_NDWI_MIN_VALID

GM_NDWI_MAX_VALID = _globalmapper.GM_NDWI_MAX_VALID

GM_NDWI_MAX_VEG = _globalmapper.GM_NDWI_MAX_VEG

GM_NDWI_MAX_NON_WATER = _globalmapper.GM_NDWI_MAX_NON_WATER

GM_NDWI_MIN_WATER = _globalmapper.GM_NDWI_MIN_WATER

LIDAR_INVALID_COLOR = _globalmapper.LIDAR_INVALID_COLOR

GM_LidarDraw_ElevWColor = _globalmapper.GM_LidarDraw_ElevWColor

GM_LidarDraw_Elev = _globalmapper.GM_LidarDraw_Elev

GM_LidarDraw_Intensity = _globalmapper.GM_LidarDraw_Intensity

GM_LidarDraw_Class = _globalmapper.GM_LidarDraw_Class

GM_LidarDraw_Return = _globalmapper.GM_LidarDraw_Return

GM_LidarDraw_HeightAboveGround = _globalmapper.GM_LidarDraw_HeightAboveGround

GM_LidarDraw_PointSourceId = _globalmapper.GM_LidarDraw_PointSourceId

GM_LidarDraw_PointIndex = _globalmapper.GM_LidarDraw_PointIndex

GM_LidarDraw_ReturnHeightDelta = _globalmapper.GM_LidarDraw_ReturnHeightDelta

GM_LidarDraw_CIR = _globalmapper.GM_LidarDraw_CIR

GM_LidarDraw_NDVI = _globalmapper.GM_LidarDraw_NDVI

GM_LidarDraw_NDWI = _globalmapper.GM_LidarDraw_NDWI

GM_LidarDraw_Density = _globalmapper.GM_LidarDraw_Density

GM_LidarDraw_Withheld = _globalmapper.GM_LidarDraw_Withheld

GM_LidarDraw_ModelKeyPoint = _globalmapper.GM_LidarDraw_ModelKeyPoint

GM_LidarDraw_Overlap = _globalmapper.GM_LidarDraw_Overlap

GM_LidarDraw_ScanAngle = _globalmapper.GM_LidarDraw_ScanAngle

GM_LidarDraw_ByLayer = _globalmapper.GM_LidarDraw_ByLayer

GM_LidarDraw_SegmentId = _globalmapper.GM_LidarDraw_SegmentId

GM_LidarDraw_Generic = _globalmapper.GM_LidarDraw_Generic

GM_LidarDraw_GenericUncertainty = _globalmapper.GM_LidarDraw_GenericUncertainty

GM_LidarDraw_NumTypes = _globalmapper.GM_LidarDraw_NumTypes

GM_LidarDraw_Default = _globalmapper.GM_LidarDraw_Default

GM_LidarDraw_Multiple = _globalmapper.GM_LidarDraw_Multiple

GM_LidarDraw_UseGlobal = _globalmapper.GM_LidarDraw_UseGlobal

GM_LidarReturn_Unknown = _globalmapper.GM_LidarReturn_Unknown

GM_LidarReturn_First = _globalmapper.GM_LidarReturn_First

GM_LidarReturn_Second = _globalmapper.GM_LidarReturn_Second

GM_LidarReturn_Last = _globalmapper.GM_LidarReturn_Last

GM_LidarReturn_Single = _globalmapper.GM_LidarReturn_Single

GM_LidarReturn_FirstOfMany = _globalmapper.GM_LidarReturn_FirstOfMany

GM_LidarReturn_SecondOfMany = _globalmapper.GM_LidarReturn_SecondOfMany

GM_LidarReturn_ThirdOrLaterOfMany = _globalmapper.GM_LidarReturn_ThirdOrLaterOfMany

GM_LidarReturn_LastOfMany = _globalmapper.GM_LidarReturn_LastOfMany

GM_LidarReturn_NumTypes = _globalmapper.GM_LidarReturn_NumTypes

GM_LidarReturn_ThirdOfMany = _globalmapper.GM_LidarReturn_ThirdOfMany

GM_LidarFlag_Synthetic = _globalmapper.GM_LidarFlag_Synthetic

GM_LidarFlag_KeyPoint = _globalmapper.GM_LidarFlag_KeyPoint

GM_LidarFlag_Overlay = _globalmapper.GM_LidarFlag_Overlay

GM_LidarFlag_Withheld = _globalmapper.GM_LidarFlag_Withheld

GM_LidarFlag_EdgeOfFlightLine = _globalmapper.GM_LidarFlag_EdgeOfFlightLine

GM_LidarFlag_None = _globalmapper.GM_LidarFlag_None

GM_LidarFlag_NumTypes = _globalmapper.GM_LidarFlag_NumTypes

LIDAR_RETURN_MASK_ALL_TYPES = _globalmapper.LIDAR_RETURN_MASK_ALL_TYPES

GM_LidarPulseId_OnlyGpsTime = _globalmapper.GM_LidarPulseId_OnlyGpsTime

GM_LidarPulseId_UserData = _globalmapper.GM_LidarPulseId_UserData

GM_LidarPulseId_PointSourceID = _globalmapper.GM_LidarPulseId_PointSourceID

GM_LidarPulseId_ScannerChannel = _globalmapper.GM_LidarPulseId_ScannerChannel

GM_LidarPulseId_PointSourceID_ScannerChannel = _globalmapper.GM_LidarPulseId_PointSourceID_ScannerChannel

GM_LidarPulseId_PointSourceID_UserData = _globalmapper.GM_LidarPulseId_PointSourceID_UserData

GM_LidarPulseId_NumTypes = _globalmapper.GM_LidarPulseId_NumTypes

GM_LidarPulseId_Default = _globalmapper.GM_LidarPulseId_Default

LIDAR_MAX_PULSE_TIME_DELTA = _globalmapper.LIDAR_MAX_PULSE_TIME_DELTA

GM_LidarFlags_ColorValid = _globalmapper.GM_LidarFlags_ColorValid

GM_LidarFlags_Withheld = _globalmapper.GM_LidarFlags_Withheld

GM_LidarFlags_Synthetic = _globalmapper.GM_LidarFlags_Synthetic

GM_LidarFlags_KeyPoint = _globalmapper.GM_LidarFlags_KeyPoint

GM_LidarFlags_Overlap = _globalmapper.GM_LidarFlags_Overlap

GM_LidarFlags_ScanDir = _globalmapper.GM_LidarFlags_ScanDir

GM_LidarFlags_EdgeOfFlightLine = _globalmapper.GM_LidarFlags_EdgeOfFlightLine

GM_LidarFlags_Deleted = _globalmapper.GM_LidarFlags_Deleted

GM_LidarFlags_Modified = _globalmapper.GM_LidarFlags_Modified

GM_LidarFlags_NirValid = _globalmapper.GM_LidarFlags_NirValid

GM_LidarClass_NeverClassified = _globalmapper.GM_LidarClass_NeverClassified

GM_LidarClass_Unclassified = _globalmapper.GM_LidarClass_Unclassified

GM_LidarClass_Ground = _globalmapper.GM_LidarClass_Ground

GM_LidarClass_LowVeg = _globalmapper.GM_LidarClass_LowVeg

GM_LidarClass_MedVeg = _globalmapper.GM_LidarClass_MedVeg

GM_LidarClass_HighVeg = _globalmapper.GM_LidarClass_HighVeg

GM_LidarClass_Building = _globalmapper.GM_LidarClass_Building

GM_LidarClass_LowPoint = _globalmapper.GM_LidarClass_LowPoint

GM_LidarClass_ModelKeyPoint = _globalmapper.GM_LidarClass_ModelKeyPoint

GM_LidarClass_Water = _globalmapper.GM_LidarClass_Water

GM_LidarClass_Railroad = _globalmapper.GM_LidarClass_Railroad

GM_LidarClass_Road = _globalmapper.GM_LidarClass_Road

GM_LidarClass_Overlap = _globalmapper.GM_LidarClass_Overlap

GM_LidarClass_WireGuard = _globalmapper.GM_LidarClass_WireGuard

GM_LidarClass_WireConductor = _globalmapper.GM_LidarClass_WireConductor

GM_LidarClass_TransmissionTower = _globalmapper.GM_LidarClass_TransmissionTower

GM_LidarClass_WireStructureConnector = _globalmapper.GM_LidarClass_WireStructureConnector

GM_LidarClass_Bridge = _globalmapper.GM_LidarClass_Bridge

GM_LidarClass_HighNoise = _globalmapper.GM_LidarClass_HighNoise

GM_LidarClass_OverheadStructure = _globalmapper.GM_LidarClass_OverheadStructure

GM_LidarClass_IgnoredGround = _globalmapper.GM_LidarClass_IgnoredGround

GM_LidarClass_Snow = _globalmapper.GM_LidarClass_Snow

GM_LidarClass_BathyPoint = _globalmapper.GM_LidarClass_BathyPoint

GM_LidarClass_WaterSurface = _globalmapper.GM_LidarClass_WaterSurface

GM_LidarClass_DerivedWaterSurface = _globalmapper.GM_LidarClass_DerivedWaterSurface

GM_LidarClass_SubmergedObject = _globalmapper.GM_LidarClass_SubmergedObject

GM_LidarClass_IhoS57Object = _globalmapper.GM_LidarClass_IhoS57Object

GM_LidarClass_NoBottomFoundBathyPoint = _globalmapper.GM_LidarClass_NoBottomFoundBathyPoint

GM_LidarClass_MaxValid = _globalmapper.GM_LidarClass_MaxValid

[docs]
class GM_LidarClassFilter_t(object):
    r"""Proxy of C++ GM_LidarClassFilter_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __repr__( self ) :
        mask = []
        mask_size = (GM_LidarClass_MaxValid + 1 + 31) // 32
        mask_array = uint32_array_frompointer( self.mBitMask )
        for i in range( mask_size ) :
            mask.append( mask_array[i] & 0xffffffff)
        attr_map = gmobject_to_map( self )
        attr_map['mBitMask'] = mask
        return str( attr_map )

    mBitMask = property(_globalmapper.GM_LidarClassFilter_t_mBitMask_get, _globalmapper.GM_LidarClassFilter_t_mBitMask_set, doc=r"""mBitMask : a(((GM_LidarClass_MaxValid+1) +31)/32).uint32""")

    def __init__(self):
        r"""__init__(GM_LidarClassFilter_t self) -> GM_LidarClassFilter_t"""
        _globalmapper.GM_LidarClassFilter_t_swiginit(self, _globalmapper.new_GM_LidarClassFilter_t())
    __swig_destroy__ = _globalmapper.delete_GM_LidarClassFilter_t


# Register GM_LidarClassFilter_t in _globalmapper:
_globalmapper.GM_LidarClassFilter_t_swigregister(GM_LidarClassFilter_t)

GM_LidarGroup_Surface = _globalmapper.GM_LidarGroup_Surface

GM_LidarGroup_OffSurface = _globalmapper.GM_LidarGroup_OffSurface

GM_LidarGroup_Noise = _globalmapper.GM_LidarGroup_Noise

GM_LidarGroup_Powerline = _globalmapper.GM_LidarGroup_Powerline

GM_LidarGroup_Structure = _globalmapper.GM_LidarGroup_Structure

GM_LidarGroup_Vegetation = _globalmapper.GM_LidarGroup_Vegetation

GM_LidarGroup_Bathy = _globalmapper.GM_LidarGroup_Bathy

GM_LidarGroup_Unclassified = _globalmapper.GM_LidarGroup_Unclassified

LIDAR_INVALID_SEGMENT_ID = _globalmapper.LIDAR_INVALID_SEGMENT_ID

LIDAR_SEGMENT_ID_NOT_SET = _globalmapper.LIDAR_SEGMENT_ID_NOT_SET

GM_LidarSort_None = _globalmapper.GM_LidarSort_None

GM_LidarSort_Always = _globalmapper.GM_LidarSort_Always

GM_LidarSort_IfPoorlyOrganized = _globalmapper.GM_LidarSort_IfPoorlyOrganized

GM_LidarSort_NotSpecified = _globalmapper.GM_LidarSort_NotSpecified

[docs]
class GM_LidarClassInfo_t(object):
    r"""Proxy of C++ GM_LidarClassInfo_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __repr__( self ) :
        return str( gmobject_to_map( self ) )

    mClass = property(_globalmapper.GM_LidarClassInfo_t_mClass_get, _globalmapper.GM_LidarClassInfo_t_mClass_set, doc=r"""mClass : GM_LidarClass_t8""")
    mClassGroup = property(_globalmapper.GM_LidarClassInfo_t_mClassGroup_get, _globalmapper.GM_LidarClassInfo_t_mClassGroup_set, doc=r"""mClassGroup : GM_LidarClassGroup_t16""")
    mName = property(_globalmapper.GM_LidarClassInfo_t_mName_get, _globalmapper.GM_LidarClassInfo_t_mName_set, doc=r"""mName : p.q(const).char""")
    mColor = property(_globalmapper.GM_LidarClassInfo_t_mColor_get, _globalmapper.GM_LidarClassInfo_t_mColor_set, doc=r"""mColor : COLORREF""")

    def __init__(self):
        r"""__init__(GM_LidarClassInfo_t self) -> GM_LidarClassInfo_t"""
        _globalmapper.GM_LidarClassInfo_t_swiginit(self, _globalmapper.new_GM_LidarClassInfo_t())
    __swig_destroy__ = _globalmapper.delete_GM_LidarClassInfo_t


# Register GM_LidarClassInfo_t in _globalmapper:
_globalmapper.GM_LidarClassInfo_t_swigregister(GM_LidarClassInfo_t)

[docs]
class GM_LidarPoint_t(object):
    r"""Proxy of C++ GM_LidarPoint_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __repr__( self ) :
        return str( gmobject_to_map( self ) )

    mLayer = property(_globalmapper.GM_LidarPoint_t_mLayer_get, _globalmapper.GM_LidarPoint_t_mLayer_set, doc=r"""mLayer : GM_LayerHandle_t32""")
    mPointIdx = property(_globalmapper.GM_LidarPoint_t_mPointIdx_get, _globalmapper.GM_LidarPoint_t_mPointIdx_set, doc=r"""mPointIdx : uint64""")
    mFlags = property(_globalmapper.GM_LidarPoint_t_mFlags_get, _globalmapper.GM_LidarPoint_t_mFlags_set, doc=r"""mFlags : GM_LidarFlags_t32""")
    mPos = property(_globalmapper.GM_LidarPoint_t_mPos_get, _globalmapper.GM_LidarPoint_t_mPos_set, doc=r"""mPos : GM_Point_t""")
    mElevMeters = property(_globalmapper.GM_LidarPoint_t_mElevMeters_get, _globalmapper.GM_LidarPoint_t_mElevMeters_set, doc=r"""mElevMeters : float""")
    mIntensity = property(_globalmapper.GM_LidarPoint_t_mIntensity_get, _globalmapper.GM_LidarPoint_t_mIntensity_set, doc=r"""mIntensity : uint16""")
    mClass = property(_globalmapper.GM_LidarPoint_t_mClass_get, _globalmapper.GM_LidarPoint_t_mClass_set, doc=r"""mClass : GM_LidarClass_t8""")
    mRetNum = property(_globalmapper.GM_LidarPoint_t_mRetNum_get, _globalmapper.GM_LidarPoint_t_mRetNum_set, doc=r"""mRetNum : uint8""")
    mRetCount = property(_globalmapper.GM_LidarPoint_t_mRetCount_get, _globalmapper.GM_LidarPoint_t_mRetCount_set, doc=r"""mRetCount : uint8""")
    mUserData = property(_globalmapper.GM_LidarPoint_t_mUserData_get, _globalmapper.GM_LidarPoint_t_mUserData_set, doc=r"""mUserData : uint8""")
    mScannerChannel = property(_globalmapper.GM_LidarPoint_t_mScannerChannel_get, _globalmapper.GM_LidarPoint_t_mScannerChannel_set, doc=r"""mScannerChannel : uint8""")
    mScanAngle = property(_globalmapper.GM_LidarPoint_t_mScanAngle_get, _globalmapper.GM_LidarPoint_t_mScanAngle_set, doc=r"""mScanAngle : float""")
    mGpsTime = property(_globalmapper.GM_LidarPoint_t_mGpsTime_get, _globalmapper.GM_LidarPoint_t_mGpsTime_set, doc=r"""mGpsTime : double""")
    mSourceId = property(_globalmapper.GM_LidarPoint_t_mSourceId_get, _globalmapper.GM_LidarPoint_t_mSourceId_set, doc=r"""mSourceId : uint16""")
    mRed = property(_globalmapper.GM_LidarPoint_t_mRed_get, _globalmapper.GM_LidarPoint_t_mRed_set, doc=r"""mRed : uint16""")
    mGreen = property(_globalmapper.GM_LidarPoint_t_mGreen_get, _globalmapper.GM_LidarPoint_t_mGreen_set, doc=r"""mGreen : uint16""")
    mBlue = property(_globalmapper.GM_LidarPoint_t_mBlue_get, _globalmapper.GM_LidarPoint_t_mBlue_set, doc=r"""mBlue : uint16""")
    mNIR = property(_globalmapper.GM_LidarPoint_t_mNIR_get, _globalmapper.GM_LidarPoint_t_mNIR_set, doc=r"""mNIR : uint16""")

    def __init__(self):
        r"""__init__(GM_LidarPoint_t self) -> GM_LidarPoint_t"""
        _globalmapper.GM_LidarPoint_t_swiginit(self, _globalmapper.new_GM_LidarPoint_t())
    __swig_destroy__ = _globalmapper.delete_GM_LidarPoint_t


# Register GM_LidarPoint_t in _globalmapper:
_globalmapper.GM_LidarPoint_t_swigregister(GM_LidarPoint_t)

[docs]
class GM_LidarReturnInfo_t(object):
    r"""Proxy of C++ GM_LidarReturnInfo_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __repr__( self ) :
        return str( gmobject_to_map( self ) )

    mCount = property(_globalmapper.GM_LidarReturnInfo_t_mCount_get, _globalmapper.GM_LidarReturnInfo_t_mCount_set, doc=r"""mCount : uint64""")
    mMinZ = property(_globalmapper.GM_LidarReturnInfo_t_mMinZ_get, _globalmapper.GM_LidarReturnInfo_t_mMinZ_set, doc=r"""mMinZ : double""")
    mMaxZ = property(_globalmapper.GM_LidarReturnInfo_t_mMaxZ_get, _globalmapper.GM_LidarReturnInfo_t_mMaxZ_set, doc=r"""mMaxZ : double""")
    mMinI = property(_globalmapper.GM_LidarReturnInfo_t_mMinI_get, _globalmapper.GM_LidarReturnInfo_t_mMinI_set, doc=r"""mMinI : uint16""")
    mMaxI = property(_globalmapper.GM_LidarReturnInfo_t_mMaxI_get, _globalmapper.GM_LidarReturnInfo_t_mMaxI_set, doc=r"""mMaxI : uint16""")
    mSyntheticCount = property(_globalmapper.GM_LidarReturnInfo_t_mSyntheticCount_get, _globalmapper.GM_LidarReturnInfo_t_mSyntheticCount_set, doc=r"""mSyntheticCount : uint64""")
    mWithheldCount = property(_globalmapper.GM_LidarReturnInfo_t_mWithheldCount_get, _globalmapper.GM_LidarReturnInfo_t_mWithheldCount_set, doc=r"""mWithheldCount : uint64""")
    mKeyPointCount = property(_globalmapper.GM_LidarReturnInfo_t_mKeyPointCount_get, _globalmapper.GM_LidarReturnInfo_t_mKeyPointCount_set, doc=r"""mKeyPointCount : uint64""")
    mOverlapCount = property(_globalmapper.GM_LidarReturnInfo_t_mOverlapCount_get, _globalmapper.GM_LidarReturnInfo_t_mOverlapCount_set, doc=r"""mOverlapCount : uint64""")

    def __init__(self):
        r"""__init__(GM_LidarReturnInfo_t self) -> GM_LidarReturnInfo_t"""
        _globalmapper.GM_LidarReturnInfo_t_swiginit(self, _globalmapper.new_GM_LidarReturnInfo_t())
    __swig_destroy__ = _globalmapper.delete_GM_LidarReturnInfo_t


# Register GM_LidarReturnInfo_t in _globalmapper:
_globalmapper.GM_LidarReturnInfo_t_swigregister(GM_LidarReturnInfo_t)

GM_LidarAttr_ReturnNo = _globalmapper.GM_LidarAttr_ReturnNo

GM_LidarAttr_Intensity = _globalmapper.GM_LidarAttr_Intensity

GM_LidarAttr_Class = _globalmapper.GM_LidarAttr_Class

GM_LidarAttr_ScanAngle = _globalmapper.GM_LidarAttr_ScanAngle

GM_LidarAttr_UserData = _globalmapper.GM_LidarAttr_UserData

GM_LidarAttr_PointSource = _globalmapper.GM_LidarAttr_PointSource

GM_LidarAttr_NumTypes = _globalmapper.GM_LidarAttr_NumTypes

[docs]
class GM_LidarAttrInfo_t(object):
    r"""Proxy of C++ GM_LidarAttrInfo_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __repr__( self ) :
        return str( gmobject_to_map( self ) )

    mMinVal = property(_globalmapper.GM_LidarAttrInfo_t_mMinVal_get, _globalmapper.GM_LidarAttrInfo_t_mMinVal_set, doc=r"""mMinVal : sint64""")
    mMaxVal = property(_globalmapper.GM_LidarAttrInfo_t_mMaxVal_get, _globalmapper.GM_LidarAttrInfo_t_mMaxVal_set, doc=r"""mMaxVal : sint64""")

    def __init__(self):
        r"""__init__(GM_LidarAttrInfo_t self) -> GM_LidarAttrInfo_t"""
        _globalmapper.GM_LidarAttrInfo_t_swiginit(self, _globalmapper.new_GM_LidarAttrInfo_t())
    __swig_destroy__ = _globalmapper.delete_GM_LidarAttrInfo_t


# Register GM_LidarAttrInfo_t in _globalmapper:
_globalmapper.GM_LidarAttrInfo_t_swigregister(GM_LidarAttrInfo_t)

[docs]
class GM_LidarStats_t(object):
    r"""Proxy of C++ GM_LidarStats_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __repr__( self ) :
        attr_map = gmobject_to_map( self )
    # GM_LidarAttrInfo_t mAttrStats[GM_LidarAttr_NumTypes];
        attr_map['mAttrStats'] = carray_to_list( GM_LidarAttrInfo_array_frompointer( self.mAttrStats ), GM_LidarAttr_NumTypes )

    # GM_LidarReturnInfo_t    mClassStats[256]
        attr_map['mClassStats'] = carray_to_list( GM_LidarReturnInfo_array_frompointer( self.mClassStats ), 256 )

    # GM_LidarReturnInfo_t    mReturnStats[GM_LidarReturn_NumTypes];
        attr_map['mReturnStats'] = carray_to_list( GM_LidarReturnInfo_array_frompointer( self.mReturnStats ), GM_LidarReturn_NumTypes )

        return str( attr_map )

    mAllPointsStats = property(_globalmapper.GM_LidarStats_t_mAllPointsStats_get, _globalmapper.GM_LidarStats_t_mAllPointsStats_set, doc=r"""mAllPointsStats : GM_LidarReturnInfo_t""")
    mAttrStats = property(_globalmapper.GM_LidarStats_t_mAttrStats_get, _globalmapper.GM_LidarStats_t_mAttrStats_set, doc=r"""mAttrStats : a(GM_LidarAttr_NumTypes).GM_LidarAttrInfo_t""")
    mClassStats = property(_globalmapper.GM_LidarStats_t_mClassStats_get, _globalmapper.GM_LidarStats_t_mClassStats_set, doc=r"""mClassStats : a(256).GM_LidarReturnInfo_t""")
    mReturnStats = property(_globalmapper.GM_LidarStats_t_mReturnStats_get, _globalmapper.GM_LidarStats_t_mReturnStats_set, doc=r"""mReturnStats : a(GM_LidarReturn_NumTypes).GM_LidarReturnInfo_t""")
    mAvgElev = property(_globalmapper.GM_LidarStats_t_mAvgElev_get, _globalmapper.GM_LidarStats_t_mAvgElev_set, doc=r"""mAvgElev : double""")
    mStdDevElev = property(_globalmapper.GM_LidarStats_t_mStdDevElev_get, _globalmapper.GM_LidarStats_t_mStdDevElev_set, doc=r"""mStdDevElev : double""")
    mAvgIntensity = property(_globalmapper.GM_LidarStats_t_mAvgIntensity_get, _globalmapper.GM_LidarStats_t_mAvgIntensity_set, doc=r"""mAvgIntensity : uint16""")
    mStdDevIntensity = property(_globalmapper.GM_LidarStats_t_mStdDevIntensity_get, _globalmapper.GM_LidarStats_t_mStdDevIntensity_set, doc=r"""mStdDevIntensity : uint16""")

    def __init__(self):
        r"""__init__(GM_LidarStats_t self) -> GM_LidarStats_t"""
        _globalmapper.GM_LidarStats_t_swiginit(self, _globalmapper.new_GM_LidarStats_t())
    __swig_destroy__ = _globalmapper.delete_GM_LidarStats_t


# Register GM_LidarStats_t in _globalmapper:
_globalmapper.GM_LidarStats_t_swigregister(GM_LidarStats_t)

GM_LidarFilterFlag_WithheldValid = _globalmapper.GM_LidarFilterFlag_WithheldValid

GM_LidarFilterFlag_Withheld = _globalmapper.GM_LidarFilterFlag_Withheld

GM_LidarFilterFlag_KeyPointValid = _globalmapper.GM_LidarFilterFlag_KeyPointValid

GM_LidarFilterFlag_KeyPoint = _globalmapper.GM_LidarFilterFlag_KeyPoint

GM_LidarFilterFlag_OverlapValid = _globalmapper.GM_LidarFilterFlag_OverlapValid

GM_LidarFilterFlag_Overlap = _globalmapper.GM_LidarFilterFlag_Overlap

GM_LidarFilterFlag_SyntheticValid = _globalmapper.GM_LidarFilterFlag_SyntheticValid

GM_LidarFilterFlag_Synthetic = _globalmapper.GM_LidarFilterFlag_Synthetic

GM_LidarFilterFlag_DeletedValid = _globalmapper.GM_LidarFilterFlag_DeletedValid

GM_LidarFilterFlag_Deleted = _globalmapper.GM_LidarFilterFlag_Deleted

GM_LidarFilterFlag_ModifiedValid = _globalmapper.GM_LidarFilterFlag_ModifiedValid

GM_LidarFilterFlag_Modified = _globalmapper.GM_LidarFilterFlag_Modified

GM_LidarFilterFlag_EdgeofFlightLineValid = _globalmapper.GM_LidarFilterFlag_EdgeofFlightLineValid

GM_LidarFilterFlag_EdgeofFlightLine = _globalmapper.GM_LidarFilterFlag_EdgeofFlightLine

GM_LidarFilterFlag_ScanDirectionValid = _globalmapper.GM_LidarFilterFlag_ScanDirectionValid

GM_LidarFilterFlag_ScanDirection = _globalmapper.GM_LidarFilterFlag_ScanDirection

GM_LidarFilterFlag_NoneValid = _globalmapper.GM_LidarFilterFlag_NoneValid

GM_LidarFilterFlag_None = _globalmapper.GM_LidarFilterFlag_None

[docs]
class GM_LidarQueryFilter_t(object):
    r"""Proxy of C++ GM_LidarQueryFilter_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(GM_LidarQueryFilter_t self) -> GM_LidarQueryFilter_t"""
        _globalmapper.GM_LidarQueryFilter_t_swiginit(self, _globalmapper.new_GM_LidarQueryFilter_t())
    mSize = property(_globalmapper.GM_LidarQueryFilter_t_mSize_get, _globalmapper.GM_LidarQueryFilter_t_mSize_set, doc=r"""mSize : uint32""")
    mClassFilter = property(_globalmapper.GM_LidarQueryFilter_t_mClassFilter_get, _globalmapper.GM_LidarQueryFilter_t_mClassFilter_set, doc=r"""mClassFilter : GM_LidarClassFilter_t""")
    mColorDist = property(_globalmapper.GM_LidarQueryFilter_t_mColorDist_get, _globalmapper.GM_LidarQueryFilter_t_mColorDist_set, doc=r"""mColorDist : uint32""")
    mColorsToKeep = property(_globalmapper.GM_LidarQueryFilter_t_mColorsToKeep_get, _globalmapper.GM_LidarQueryFilter_t_mColorsToKeep_set, doc=r"""mColorsToKeep : p.q(const).COLORREF""")
    mColorsToKeepCount = property(_globalmapper.GM_LidarQueryFilter_t_mColorsToKeepCount_get, _globalmapper.GM_LidarQueryFilter_t_mColorsToKeepCount_set, doc=r"""mColorsToKeepCount : uint32""")
    mFilterFlags = property(_globalmapper.GM_LidarQueryFilter_t_mFilterFlags_get, _globalmapper.GM_LidarQueryFilter_t_mFilterFlags_set, doc=r"""mFilterFlags : GM_LidarFilterFlags_t32""")
    mElevMaxValidM = property(_globalmapper.GM_LidarQueryFilter_t_mElevMaxValidM_get, _globalmapper.GM_LidarQueryFilter_t_mElevMaxValidM_set, doc=r"""mElevMaxValidM : float""")
    mElevMinValidM = property(_globalmapper.GM_LidarQueryFilter_t_mElevMinValidM_get, _globalmapper.GM_LidarQueryFilter_t_mElevMinValidM_set, doc=r"""mElevMinValidM : float""")
    mHeightMaxValidM = property(_globalmapper.GM_LidarQueryFilter_t_mHeightMaxValidM_get, _globalmapper.GM_LidarQueryFilter_t_mHeightMaxValidM_set, doc=r"""mHeightMaxValidM : float""")
    mHeightMinValidM = property(_globalmapper.GM_LidarQueryFilter_t_mHeightMinValidM_get, _globalmapper.GM_LidarQueryFilter_t_mHeightMinValidM_set, doc=r"""mHeightMinValidM : float""")
    mIntensityMin = property(_globalmapper.GM_LidarQueryFilter_t_mIntensityMin_get, _globalmapper.GM_LidarQueryFilter_t_mIntensityMin_set, doc=r"""mIntensityMin : uint16""")
    mIntensityMax = property(_globalmapper.GM_LidarQueryFilter_t_mIntensityMax_get, _globalmapper.GM_LidarQueryFilter_t_mIntensityMax_set, doc=r"""mIntensityMax : uint16""")
    mKeepFirstRetIfNoDelta = property(_globalmapper.GM_LidarQueryFilter_t_mKeepFirstRetIfNoDelta_get, _globalmapper.GM_LidarQueryFilter_t_mKeepFirstRetIfNoDelta_set, doc=r"""mKeepFirstRetIfNoDelta : boolean""")
    mNdviMaxValid = property(_globalmapper.GM_LidarQueryFilter_t_mNdviMaxValid_get, _globalmapper.GM_LidarQueryFilter_t_mNdviMaxValid_set, doc=r"""mNdviMaxValid : float""")
    mNdviMinValid = property(_globalmapper.GM_LidarQueryFilter_t_mNdviMinValid_get, _globalmapper.GM_LidarQueryFilter_t_mNdviMinValid_set, doc=r"""mNdviMinValid : float""")
    mNdviRangeValid = property(_globalmapper.GM_LidarQueryFilter_t_mNdviRangeValid_get, _globalmapper.GM_LidarQueryFilter_t_mNdviRangeValid_set, doc=r"""mNdviRangeValid : boolean""")
    mNdwiMaxValid = property(_globalmapper.GM_LidarQueryFilter_t_mNdwiMaxValid_get, _globalmapper.GM_LidarQueryFilter_t_mNdwiMaxValid_set, doc=r"""mNdwiMaxValid : float""")
    mNdwiMinValid = property(_globalmapper.GM_LidarQueryFilter_t_mNdwiMinValid_get, _globalmapper.GM_LidarQueryFilter_t_mNdwiMinValid_set, doc=r"""mNdwiMinValid : float""")
    mNdwiRangeValid = property(_globalmapper.GM_LidarQueryFilter_t_mNdwiRangeValid_get, _globalmapper.GM_LidarQueryFilter_t_mNdwiRangeValid_set, doc=r"""mNdwiRangeValid : boolean""")
    mPointSourceIdList = property(_globalmapper.GM_LidarQueryFilter_t_mPointSourceIdList_get, _globalmapper.GM_LidarQueryFilter_t_mPointSourceIdList_set, doc=r"""mPointSourceIdList : p.q(const).uint32""")
    mPointSourceIdListCount = property(_globalmapper.GM_LidarQueryFilter_t_mPointSourceIdListCount_get, _globalmapper.GM_LidarQueryFilter_t_mPointSourceIdListCount_set, doc=r"""mPointSourceIdListCount : uint32""")
    mReturnHeightMaxAngle = property(_globalmapper.GM_LidarQueryFilter_t_mReturnHeightMaxAngle_get, _globalmapper.GM_LidarQueryFilter_t_mReturnHeightMaxAngle_set, doc=r"""mReturnHeightMaxAngle : uint8""")
    mReturnHeightMaxValidM = property(_globalmapper.GM_LidarQueryFilter_t_mReturnHeightMaxValidM_get, _globalmapper.GM_LidarQueryFilter_t_mReturnHeightMaxValidM_set, doc=r"""mReturnHeightMaxValidM : float""")
    mReturnHeightMinValidM = property(_globalmapper.GM_LidarQueryFilter_t_mReturnHeightMinValidM_get, _globalmapper.GM_LidarQueryFilter_t_mReturnHeightMinValidM_set, doc=r"""mReturnHeightMinValidM : float""")
    mReturnHeightMinKeepAllReturnCount = property(_globalmapper.GM_LidarQueryFilter_t_mReturnHeightMinKeepAllReturnCount_get, _globalmapper.GM_LidarQueryFilter_t_mReturnHeightMinKeepAllReturnCount_set, doc=r"""mReturnHeightMinKeepAllReturnCount : uint32""")
    mReturnMask = property(_globalmapper.GM_LidarQueryFilter_t_mReturnMask_get, _globalmapper.GM_LidarQueryFilter_t_mReturnMask_set, doc=r"""mReturnMask : GM_LidarReturnMask_t32""")
    mScanAngleMax = property(_globalmapper.GM_LidarQueryFilter_t_mScanAngleMax_get, _globalmapper.GM_LidarQueryFilter_t_mScanAngleMax_set, doc=r"""mScanAngleMax : double""")
    mScanAngleMin = property(_globalmapper.GM_LidarQueryFilter_t_mScanAngleMin_get, _globalmapper.GM_LidarQueryFilter_t_mScanAngleMin_set, doc=r"""mScanAngleMin : double""")
    mScanAngleValid = property(_globalmapper.GM_LidarQueryFilter_t_mScanAngleValid_get, _globalmapper.GM_LidarQueryFilter_t_mScanAngleValid_set, doc=r"""mScanAngleValid : boolean""")
    mDensityMax = property(_globalmapper.GM_LidarQueryFilter_t_mDensityMax_get, _globalmapper.GM_LidarQueryFilter_t_mDensityMax_set, doc=r"""mDensityMax : float""")
    mDensityMin = property(_globalmapper.GM_LidarQueryFilter_t_mDensityMin_get, _globalmapper.GM_LidarQueryFilter_t_mDensityMin_set, doc=r"""mDensityMin : float""")
    mDensityRangeValid = property(_globalmapper.GM_LidarQueryFilter_t_mDensityRangeValid_get, _globalmapper.GM_LidarQueryFilter_t_mDensityRangeValid_set, doc=r"""mDensityRangeValid : boolean""")
    mInvert = property(_globalmapper.GM_LidarQueryFilter_t_mInvert_get, _globalmapper.GM_LidarQueryFilter_t_mInvert_set, doc=r"""mInvert : boolean""")
    mSegmentIdList = property(_globalmapper.GM_LidarQueryFilter_t_mSegmentIdList_get, _globalmapper.GM_LidarQueryFilter_t_mSegmentIdList_set, doc=r"""mSegmentIdList : p.q(const).GM_LidarSegmentId_t""")
    mSegmentIdCount = property(_globalmapper.GM_LidarQueryFilter_t_mSegmentIdCount_get, _globalmapper.GM_LidarQueryFilter_t_mSegmentIdCount_set, doc=r"""mSegmentIdCount : uint32""")

    def __repr__( self ) :
        return str( gmobject_to_map( self ) )

    __swig_destroy__ = _globalmapper.delete_GM_LidarQueryFilter_t


# Register GM_LidarQueryFilter_t in _globalmapper:
_globalmapper.GM_LidarQueryFilter_t_swigregister(GM_LidarQueryFilter_t)

[docs]
class GM_LidarQueryInfo_t(object):
    r"""Proxy of C++ GM_LidarQueryInfo_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    mNumPoints = property(_globalmapper.GM_LidarQueryInfo_t_mNumPoints_get, _globalmapper.GM_LidarQueryInfo_t_mNumPoints_set, doc=r"""mNumPoints : uint64""")
    mLayerList = property(_globalmapper.GM_LidarQueryInfo_t_mLayerList_get, _globalmapper.GM_LidarQueryInfo_t_mLayerList_set, doc=r"""mLayerList : p.GM_LayerHandle_t32""")
    mLayerCount = property(_globalmapper.GM_LidarQueryInfo_t_mLayerCount_get, _globalmapper.GM_LidarQueryInfo_t_mLayerCount_set, doc=r"""mLayerCount : uint32""")

    def __init__(self, *args):
        r"""
        __init__(GM_LidarQueryInfo_t self) -> GM_LidarQueryInfo_t
        __init__(GM_LidarQueryInfo_t self, uint64 mNumPoints, GM_LayerHandle_t32 * mLayerList, uint32 mLayerCount) -> GM_LidarQueryInfo_t

        Parameters
        ----------
        mNumPoints: uint64
        mLayerList: GM_LayerHandle_t32 *
        mLayerCount: uint32

        """
        _globalmapper.GM_LidarQueryInfo_t_swiginit(self, _globalmapper.new_GM_LidarQueryInfo_t(*args))

    def __repr__( self ) :
        return str( gmobject_to_map( self ) )

    __swig_destroy__ = _globalmapper.delete_GM_LidarQueryInfo_t


# Register GM_LidarQueryInfo_t in _globalmapper:
_globalmapper.GM_LidarQueryInfo_t_swigregister(GM_LidarQueryInfo_t)

GM_LidarField_Class = _globalmapper.GM_LidarField_Class

GM_LidarField_Color = _globalmapper.GM_LidarField_Color

GM_LidarField_XY = _globalmapper.GM_LidarField_XY

GM_LidarField_Z = _globalmapper.GM_LidarField_Z

GM_LidarField_Intensity = _globalmapper.GM_LidarField_Intensity

GM_LidarField_KeyPoint = _globalmapper.GM_LidarField_KeyPoint

GM_LidarField_Overlap = _globalmapper.GM_LidarField_Overlap

GM_LidarField_Synthetic = _globalmapper.GM_LidarField_Synthetic

GM_LidarField_Withheld = _globalmapper.GM_LidarField_Withheld

GM_LidarField_Deleted = _globalmapper.GM_LidarField_Deleted

GM_LidarField_GroundHeight = _globalmapper.GM_LidarField_GroundHeight

GM_LidarField_ReturnHeight = _globalmapper.GM_LidarField_ReturnHeight

GM_LidarField_NIR = _globalmapper.GM_LidarField_NIR

GM_LidarField_ReturnNum = _globalmapper.GM_LidarField_ReturnNum

GM_LidarField_ReturnCount = _globalmapper.GM_LidarField_ReturnCount

GM_LidarField_ScanAngle = _globalmapper.GM_LidarField_ScanAngle

GM_LidarField_ScannerChannel = _globalmapper.GM_LidarField_ScannerChannel

GM_LidarField_SourceID = _globalmapper.GM_LidarField_SourceID

GM_LidarField_UserData = _globalmapper.GM_LidarField_UserData

GM_LidarField_EdgeFlightLine = _globalmapper.GM_LidarField_EdgeFlightLine

GM_LidarField_SegmentID = _globalmapper.GM_LidarField_SegmentID

GM_LidarField_ScanDirection = _globalmapper.GM_LidarField_ScanDirection

GM_LidarField_Generic = _globalmapper.GM_LidarField_Generic

GM_LidarField_GenericUncertainty = _globalmapper.GM_LidarField_GenericUncertainty

GM_LidarFieldMask_All = _globalmapper.GM_LidarFieldMask_All

GM_LidarFieldMask_NonStats = _globalmapper.GM_LidarFieldMask_NonStats

GM_LidarFieldMask_Stats = _globalmapper.GM_LidarFieldMask_Stats

GM_LidarResMult_Spacings = _globalmapper.GM_LidarResMult_Spacings

GM_LidarResMult_Meters = _globalmapper.GM_LidarResMult_Meters

GM_LidarResMult_Feet = _globalmapper.GM_LidarResMult_Feet

GM_LidarResMult_NumTypes = _globalmapper.GM_LidarResMult_NumTypes

GM_Classify_Ground = _globalmapper.GM_Classify_Ground

GM_Classify_Buildings = _globalmapper.GM_Classify_Buildings

GM_Classify_HighVeg = _globalmapper.GM_Classify_HighVeg

GM_Classify_Powerline = _globalmapper.GM_Classify_Powerline

GM_Classify_HighNoise = _globalmapper.GM_Classify_HighNoise

GM_Classify_LowNoise = _globalmapper.GM_Classify_LowNoise

GM_Classify_Pole = _globalmapper.GM_Classify_Pole

GM_Classify_Noise = _globalmapper.GM_Classify_Noise

GM_Classify_NonGround = _globalmapper.GM_Classify_NonGround

GM_Classify_NonGroundDialog = _globalmapper.GM_Classify_NonGroundDialog

GM_Classify_PoleDialog = _globalmapper.GM_Classify_PoleDialog

GM_ClassifyGround_ResetGroundPoints = _globalmapper.GM_ClassifyGround_ResetGroundPoints

GM_ClassifyGround_KeepNonGroundPoints = _globalmapper.GM_ClassifyGround_KeepNonGroundPoints

GM_ClassifyGround_CreateDebugLayers = _globalmapper.GM_ClassifyGround_CreateDebugLayers

GM_ClassifyGround_RemoveNearNonGround = _globalmapper.GM_ClassifyGround_RemoveNearNonGround

GM_ClassifyGround_HideProgress = _globalmapper.GM_ClassifyGround_HideProgress

GM_LIDAR_CLASSIFY_GROUND_DFLT_SPACING_M = _globalmapper.GM_LIDAR_CLASSIFY_GROUND_DFLT_SPACING_M

GM_LIDAR_CLASSIFY_GROUND_DFLT_MIN_HEIGHT_DELTA_M = _globalmapper.GM_LIDAR_CLASSIFY_GROUND_DFLT_MIN_HEIGHT_DELTA_M

GM_LIDAR_CLASSIFY_GROUND_DFLT_MAX_HEIGHT_DELTA_M = _globalmapper.GM_LIDAR_CLASSIFY_GROUND_DFLT_MAX_HEIGHT_DELTA_M

GM_LIDAR_CLASSIFY_NON_GROUND_DFLT_SPACING_M = _globalmapper.GM_LIDAR_CLASSIFY_NON_GROUND_DFLT_SPACING_M

GM_LIDAR_CLASSIFY_NOISE_DFLT_SPACING_M = _globalmapper.GM_LIDAR_CLASSIFY_NOISE_DFLT_SPACING_M

GM_LIDAR_CLASSIFY_POWERLINE_DFLT_SPACING_M = _globalmapper.GM_LIDAR_CLASSIFY_POWERLINE_DFLT_SPACING_M

GM_LIDAR_CLASSIFY_POWERLINE_DFLT_HIGH_RES_SPACING_M = _globalmapper.GM_LIDAR_CLASSIFY_POWERLINE_DFLT_HIGH_RES_SPACING_M

GM_LIDAR_CLASSIFY_POWERLINE_HIGH_RES_DENSITY = _globalmapper.GM_LIDAR_CLASSIFY_POWERLINE_HIGH_RES_DENSITY

GM_LIDAR_CLASSIFY_POWERLINE_LOW_RES_DENSITY = _globalmapper.GM_LIDAR_CLASSIFY_POWERLINE_LOW_RES_DENSITY

GM_LIDAR_CLASSIFY_POLELIKEOBJECT_DFLT_SPACING_M = _globalmapper.GM_LIDAR_CLASSIFY_POLELIKEOBJECT_DFLT_SPACING_M

GM_LIDAR_CLASSIFY_POLE_SMOOTHING_DIST_MIN_M = _globalmapper.GM_LIDAR_CLASSIFY_POLE_SMOOTHING_DIST_MIN_M

GM_LIDAR_CLASSIFY_POLE_SMOOTHING_DIST_MAX_M = _globalmapper.GM_LIDAR_CLASSIFY_POLE_SMOOTHING_DIST_MAX_M

[docs]
class GM_ClassifyGroundSetup_t(object):
    r"""Proxy of C++ GM_ClassifyGroundSetup_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(GM_ClassifyGroundSetup_t self) -> GM_ClassifyGroundSetup_t"""
        _globalmapper.GM_ClassifyGroundSetup_t_swiginit(self, _globalmapper.new_GM_ClassifyGroundSetup_t())
    mFlags = property(_globalmapper.GM_ClassifyGroundSetup_t_mFlags_get, _globalmapper.GM_ClassifyGroundSetup_t_mFlags_set, doc=r"""mFlags : GM_ClassifyGroundFlags_t32""")
    mResMult = property(_globalmapper.GM_ClassifyGroundSetup_t_mResMult_get, _globalmapper.GM_ClassifyGroundSetup_t_mResMult_set, doc=r"""mResMult : double""")
    mConvergencePercent = property(_globalmapper.GM_ClassifyGroundSetup_t_mConvergencePercent_get, _globalmapper.GM_ClassifyGroundSetup_t_mConvergencePercent_set, doc=r"""mConvergencePercent : double""")
    mCurvature = property(_globalmapper.GM_ClassifyGroundSetup_t_mCurvature_get, _globalmapper.GM_ClassifyGroundSetup_t_mCurvature_set, doc=r"""mCurvature : double""")
    mBaseWindowSizePix = property(_globalmapper.GM_ClassifyGroundSetup_t_mBaseWindowSizePix_get, _globalmapper.GM_ClassifyGroundSetup_t_mBaseWindowSizePix_set, doc=r"""mBaseWindowSizePix : sint32""")
    mDeltaHeightMaxM = property(_globalmapper.GM_ClassifyGroundSetup_t_mDeltaHeightMaxM_get, _globalmapper.GM_ClassifyGroundSetup_t_mDeltaHeightMaxM_set, doc=r"""mDeltaHeightMaxM : double""")
    mDeltaHeightMinM = property(_globalmapper.GM_ClassifyGroundSetup_t_mDeltaHeightMinM_get, _globalmapper.GM_ClassifyGroundSetup_t_mDeltaHeightMinM_set, doc=r"""mDeltaHeightMinM : double""")
    mMaxWindowSizeM = property(_globalmapper.GM_ClassifyGroundSetup_t_mMaxWindowSizeM_get, _globalmapper.GM_ClassifyGroundSetup_t_mMaxWindowSizeM_set, doc=r"""mMaxWindowSizeM : double""")
    mSlopeDeg = property(_globalmapper.GM_ClassifyGroundSetup_t_mSlopeDeg_get, _globalmapper.GM_ClassifyGroundSetup_t_mSlopeDeg_set, doc=r"""mSlopeDeg : double""")

    def __repr__( self ) :
        return str(gmobject_to_map(self))

    __swig_destroy__ = _globalmapper.delete_GM_ClassifyGroundSetup_t


# Register GM_ClassifyGroundSetup_t in _globalmapper:
_globalmapper.GM_ClassifyGroundSetup_t_swigregister(GM_ClassifyGroundSetup_t)

GM_ClassifyNoise_UnclassifiedOnly = _globalmapper.GM_ClassifyNoise_UnclassifiedOnly

GM_ClassifyNoise_NoHighNoise = _globalmapper.GM_ClassifyNoise_NoHighNoise

GM_ClassifyNoise_NoLowNoise = _globalmapper.GM_ClassifyNoise_NoLowNoise

GM_ClassifyNoise_CreateDebugLayers = _globalmapper.GM_ClassifyNoise_CreateDebugLayers

GM_ClassifyNoise_ChangeClass = _globalmapper.GM_ClassifyNoise_ChangeClass

GM_ClassifyNoise_MarkWithheld = _globalmapper.GM_ClassifyNoise_MarkWithheld

GM_ClassifyNoise_MarkDeleted = _globalmapper.GM_ClassifyNoise_MarkDeleted

GM_ClassifyNoise_ResetNoisePoints = _globalmapper.GM_ClassifyNoise_ResetNoisePoints

GM_ClassifyNoise_CheckHeightRange = _globalmapper.GM_ClassifyNoise_CheckHeightRange

GM_ClassifyNoise_HideProgress = _globalmapper.GM_ClassifyNoise_HideProgress

GM_ClassifyNoise_Defaults = _globalmapper.GM_ClassifyNoise_Defaults

[docs]
class GM_ClassifyNoiseSetup_t(object):
    r"""Proxy of C++ GM_ClassifyNoiseSetup_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(GM_ClassifyNoiseSetup_t self) -> GM_ClassifyNoiseSetup_t"""
        _globalmapper.GM_ClassifyNoiseSetup_t_swiginit(self, _globalmapper.new_GM_ClassifyNoiseSetup_t())
    mFlags = property(_globalmapper.GM_ClassifyNoiseSetup_t_mFlags_get, _globalmapper.GM_ClassifyNoiseSetup_t_mFlags_set, doc=r"""mFlags : GM_ClassifyNoiseFlags_t32""")
    mMeanGridBinMult = property(_globalmapper.GM_ClassifyNoiseSetup_t_mMeanGridBinMult_get, _globalmapper.GM_ClassifyNoiseSetup_t_mMeanGridBinMult_set, doc=r"""mMeanGridBinMult : double""")
    mMovingWindowSize = property(_globalmapper.GM_ClassifyNoiseSetup_t_mMovingWindowSize_get, _globalmapper.GM_ClassifyNoiseSetup_t_mMovingWindowSize_set, doc=r"""mMovingWindowSize : sint32""")
    mMinNoiseStdDev = property(_globalmapper.GM_ClassifyNoiseSetup_t_mMinNoiseStdDev_get, _globalmapper.GM_ClassifyNoiseSetup_t_mMinNoiseStdDev_set, doc=r"""mMinNoiseStdDev : double""")
    mMinHighNoiseOffsetM = property(_globalmapper.GM_ClassifyNoiseSetup_t_mMinHighNoiseOffsetM_get, _globalmapper.GM_ClassifyNoiseSetup_t_mMinHighNoiseOffsetM_set, doc=r"""mMinHighNoiseOffsetM : float""")
    mMinLowNoiseOffsetM = property(_globalmapper.GM_ClassifyNoiseSetup_t_mMinLowNoiseOffsetM_get, _globalmapper.GM_ClassifyNoiseSetup_t_mMinLowNoiseOffsetM_set, doc=r"""mMinLowNoiseOffsetM : float""")
    mMinValidElevM = property(_globalmapper.GM_ClassifyNoiseSetup_t_mMinValidElevM_get, _globalmapper.GM_ClassifyNoiseSetup_t_mMinValidElevM_set, doc=r"""mMinValidElevM : float""")
    mMaxValidElevM = property(_globalmapper.GM_ClassifyNoiseSetup_t_mMaxValidElevM_get, _globalmapper.GM_ClassifyNoiseSetup_t_mMaxValidElevM_set, doc=r"""mMaxValidElevM : float""")
    mMinValidHeightM = property(_globalmapper.GM_ClassifyNoiseSetup_t_mMinValidHeightM_get, _globalmapper.GM_ClassifyNoiseSetup_t_mMinValidHeightM_set, doc=r"""mMinValidHeightM : float""")
    mMaxValidHeightM = property(_globalmapper.GM_ClassifyNoiseSetup_t_mMaxValidHeightM_get, _globalmapper.GM_ClassifyNoiseSetup_t_mMaxValidHeightM_set, doc=r"""mMaxValidHeightM : float""")

    def __repr__( self ) :
        return str(gmobject_to_map(self))

    __swig_destroy__ = _globalmapper.delete_GM_ClassifyNoiseSetup_t


# Register GM_ClassifyNoiseSetup_t in _globalmapper:
_globalmapper.GM_ClassifyNoiseSetup_t_swigregister(GM_ClassifyNoiseSetup_t)

GM_Classify_ResetPoints = _globalmapper.GM_Classify_ResetPoints

GM_Classify_CreateDebugLayers = _globalmapper.GM_Classify_CreateDebugLayers

GM_Classify_SinglePassBestFit = _globalmapper.GM_Classify_SinglePassBestFit

GM_Classify_IgnoreNDVI = _globalmapper.GM_Classify_IgnoreNDVI

GM_Classify_IgnoreNDWI = _globalmapper.GM_Classify_IgnoreNDWI

GM_Classify_HideProgress = _globalmapper.GM_Classify_HideProgress

[docs]
class GM_ClassifyBuildingVegSetup_t(object):
    r"""Proxy of C++ GM_ClassifyBuildingVegSetup_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(GM_ClassifyBuildingVegSetup_t self) -> GM_ClassifyBuildingVegSetup_t"""
        _globalmapper.GM_ClassifyBuildingVegSetup_t_swiginit(self, _globalmapper.new_GM_ClassifyBuildingVegSetup_t())
    mMeanGridBinMult = property(_globalmapper.GM_ClassifyBuildingVegSetup_t_mMeanGridBinMult_get, _globalmapper.GM_ClassifyBuildingVegSetup_t_mMeanGridBinMult_set, doc=r"""mMeanGridBinMult : float""")
    mGridBinSizeUnits = property(_globalmapper.GM_ClassifyBuildingVegSetup_t_mGridBinSizeUnits_get, _globalmapper.GM_ClassifyBuildingVegSetup_t_mGridBinSizeUnits_set, doc=r"""mGridBinSizeUnits : GM_LidarResMult_t""")
    mMinHeightAboveGround = property(_globalmapper.GM_ClassifyBuildingVegSetup_t_mMinHeightAboveGround_get, _globalmapper.GM_ClassifyBuildingVegSetup_t_mMinHeightAboveGround_set, doc=r"""mMinHeightAboveGround : float""")
    mPlanarThresholdM = property(_globalmapper.GM_ClassifyBuildingVegSetup_t_mPlanarThresholdM_get, _globalmapper.GM_ClassifyBuildingVegSetup_t_mPlanarThresholdM_set, doc=r"""mPlanarThresholdM : float""")
    mTreeThresholdM = property(_globalmapper.GM_ClassifyBuildingVegSetup_t_mTreeThresholdM_get, _globalmapper.GM_ClassifyBuildingVegSetup_t_mTreeThresholdM_set, doc=r"""mTreeThresholdM : float""")
    mRoofInvalidMinAngle = property(_globalmapper.GM_ClassifyBuildingVegSetup_t_mRoofInvalidMinAngle_get, _globalmapper.GM_ClassifyBuildingVegSetup_t_mRoofInvalidMinAngle_set, doc=r"""mRoofInvalidMinAngle : float""")
    mRoofInvalidMaxAngle = property(_globalmapper.GM_ClassifyBuildingVegSetup_t_mRoofInvalidMaxAngle_get, _globalmapper.GM_ClassifyBuildingVegSetup_t_mRoofInvalidMaxAngle_set, doc=r"""mRoofInvalidMaxAngle : float""")
    mPlanarAngleMaxDiff = property(_globalmapper.GM_ClassifyBuildingVegSetup_t_mPlanarAngleMaxDiff_get, _globalmapper.GM_ClassifyBuildingVegSetup_t_mPlanarAngleMaxDiff_set, doc=r"""mPlanarAngleMaxDiff : float""")

    def __repr__( self ) :
        return str(gmobject_to_map(self))

    __swig_destroy__ = _globalmapper.delete_GM_ClassifyBuildingVegSetup_t


# Register GM_ClassifyBuildingVegSetup_t in _globalmapper:
_globalmapper.GM_ClassifyBuildingVegSetup_t_swigregister(GM_ClassifyBuildingVegSetup_t)

[docs]
class GM_ClassifyNonGroundSetup_t(object):
    r"""Proxy of C++ GM_ClassifyNonGroundSetup_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(GM_ClassifyNonGroundSetup_t self) -> GM_ClassifyNonGroundSetup_t"""
        _globalmapper.GM_ClassifyNonGroundSetup_t_swiginit(self, _globalmapper.new_GM_ClassifyNonGroundSetup_t())
    mTypes = property(_globalmapper.GM_ClassifyNonGroundSetup_t_mTypes_get, _globalmapper.GM_ClassifyNonGroundSetup_t_mTypes_set, doc=r"""mTypes : GM_LidarClassifyTypes_t32""")
    mFlags = property(_globalmapper.GM_ClassifyNonGroundSetup_t_mFlags_get, _globalmapper.GM_ClassifyNonGroundSetup_t_mFlags_set, doc=r"""mFlags : GM_ClassifyNonGroundFlags_t32""")
    mBuildingVegOpts = property(_globalmapper.GM_ClassifyNonGroundSetup_t_mBuildingVegOpts_get, _globalmapper.GM_ClassifyNonGroundSetup_t_mBuildingVegOpts_set, doc=r"""mBuildingVegOpts : GM_ClassifyBuildingVegSetup_t""")

    def __repr__( self ) :
        return str(gmobject_to_map(self))

    __swig_destroy__ = _globalmapper.delete_GM_ClassifyNonGroundSetup_t


# Register GM_ClassifyNonGroundSetup_t in _globalmapper:
_globalmapper.GM_ClassifyNonGroundSetup_t_swigregister(GM_ClassifyNonGroundSetup_t)

[docs]
class GM_ClassifyPowerlineSetup_t(object):
    r"""Proxy of C++ GM_ClassifyPowerlineSetup_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(GM_ClassifyPowerlineSetup_t self) -> GM_ClassifyPowerlineSetup_t"""
        _globalmapper.GM_ClassifyPowerlineSetup_t_swiginit(self, _globalmapper.new_GM_ClassifyPowerlineSetup_t())
    mPowerlineClass = property(_globalmapper.GM_ClassifyPowerlineSetup_t_mPowerlineClass_get, _globalmapper.GM_ClassifyPowerlineSetup_t_mPowerlineClass_set, doc=r"""mPowerlineClass : GM_LidarClass_t8""")
    mBinSizeM = property(_globalmapper.GM_ClassifyPowerlineSetup_t_mBinSizeM_get, _globalmapper.GM_ClassifyPowerlineSetup_t_mBinSizeM_set, doc=r"""mBinSizeM : double""")
    mMinHeightAboveGround = property(_globalmapper.GM_ClassifyPowerlineSetup_t_mMinHeightAboveGround_get, _globalmapper.GM_ClassifyPowerlineSetup_t_mMinHeightAboveGround_set, doc=r"""mMinHeightAboveGround : float""")
    mMaxHeightAboveGround = property(_globalmapper.GM_ClassifyPowerlineSetup_t_mMaxHeightAboveGround_get, _globalmapper.GM_ClassifyPowerlineSetup_t_mMaxHeightAboveGround_set, doc=r"""mMaxHeightAboveGround : float""")
    mMaxGroundPtHeight = property(_globalmapper.GM_ClassifyPowerlineSetup_t_mMaxGroundPtHeight_get, _globalmapper.GM_ClassifyPowerlineSetup_t_mMaxGroundPtHeight_set, doc=r"""mMaxGroundPtHeight : float""")
    mMaxVertDiffPerM = property(_globalmapper.GM_ClassifyPowerlineSetup_t_mMaxVertDiffPerM_get, _globalmapper.GM_ClassifyPowerlineSetup_t_mMaxVertDiffPerM_set, doc=r"""mMaxVertDiffPerM : float""")
    mMinLineVertDiff = property(_globalmapper.GM_ClassifyPowerlineSetup_t_mMinLineVertDiff_get, _globalmapper.GM_ClassifyPowerlineSetup_t_mMinLineVertDiff_set, doc=r"""mMinLineVertDiff : float""")
    mMaxDistFromLine = property(_globalmapper.GM_ClassifyPowerlineSetup_t_mMaxDistFromLine_get, _globalmapper.GM_ClassifyPowerlineSetup_t_mMaxDistFromLine_set, doc=r"""mMaxDistFromLine : float""")
    mMinAreaSqM = property(_globalmapper.GM_ClassifyPowerlineSetup_t_mMinAreaSqM_get, _globalmapper.GM_ClassifyPowerlineSetup_t_mMinAreaSqM_set, doc=r"""mMinAreaSqM : double""")

    def __repr__( self ) :
        return str(gmobject_to_map(self))

    __swig_destroy__ = _globalmapper.delete_GM_ClassifyPowerlineSetup_t


# Register GM_ClassifyPowerlineSetup_t in _globalmapper:
_globalmapper.GM_ClassifyPowerlineSetup_t_swigregister(GM_ClassifyPowerlineSetup_t)

[docs]
class GM_ClassifyPoleLikeObjectSetup_t(object):
    r"""Proxy of C++ GM_ClassifyPoleLikeObjectSetup_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(GM_ClassifyPoleLikeObjectSetup_t self) -> GM_ClassifyPoleLikeObjectSetup_t"""
        _globalmapper.GM_ClassifyPoleLikeObjectSetup_t_swiginit(self, _globalmapper.new_GM_ClassifyPoleLikeObjectSetup_t())
    mPoleLikeObjectClass = property(_globalmapper.GM_ClassifyPoleLikeObjectSetup_t_mPoleLikeObjectClass_get, _globalmapper.GM_ClassifyPoleLikeObjectSetup_t_mPoleLikeObjectClass_set, doc=r"""mPoleLikeObjectClass : GM_LidarClass_t8""")
    mBinSizeM = property(_globalmapper.GM_ClassifyPoleLikeObjectSetup_t_mBinSizeM_get, _globalmapper.GM_ClassifyPoleLikeObjectSetup_t_mBinSizeM_set, doc=r"""mBinSizeM : double""")
    mSmoothingDistance = property(_globalmapper.GM_ClassifyPoleLikeObjectSetup_t_mSmoothingDistance_get, _globalmapper.GM_ClassifyPoleLikeObjectSetup_t_mSmoothingDistance_set, doc=r"""mSmoothingDistance : float""")
    mSmoothingVal = property(_globalmapper.GM_ClassifyPoleLikeObjectSetup_t_mSmoothingVal_get, _globalmapper.GM_ClassifyPoleLikeObjectSetup_t_mSmoothingVal_set, doc=r"""mSmoothingVal : int""")
    mMinSegmentCount = property(_globalmapper.GM_ClassifyPoleLikeObjectSetup_t_mMinSegmentCount_get, _globalmapper.GM_ClassifyPoleLikeObjectSetup_t_mMinSegmentCount_set, doc=r"""mMinSegmentCount : int""")
    mMinHeightAboveGround = property(_globalmapper.GM_ClassifyPoleLikeObjectSetup_t_mMinHeightAboveGround_get, _globalmapper.GM_ClassifyPoleLikeObjectSetup_t_mMinHeightAboveGround_set, doc=r"""mMinHeightAboveGround : float""")
    mMaxHeightAboveGround = property(_globalmapper.GM_ClassifyPoleLikeObjectSetup_t_mMaxHeightAboveGround_get, _globalmapper.GM_ClassifyPoleLikeObjectSetup_t_mMaxHeightAboveGround_set, doc=r"""mMaxHeightAboveGround : float""")
    mMinHeightOfPole = property(_globalmapper.GM_ClassifyPoleLikeObjectSetup_t_mMinHeightOfPole_get, _globalmapper.GM_ClassifyPoleLikeObjectSetup_t_mMinHeightOfPole_set, doc=r"""mMinHeightOfPole : float""")
    mMinDegreeOfPole = property(_globalmapper.GM_ClassifyPoleLikeObjectSetup_t_mMinDegreeOfPole_get, _globalmapper.GM_ClassifyPoleLikeObjectSetup_t_mMinDegreeOfPole_set, doc=r"""mMinDegreeOfPole : float""")
    mMaxXDisOfGroup = property(_globalmapper.GM_ClassifyPoleLikeObjectSetup_t_mMaxXDisOfGroup_get, _globalmapper.GM_ClassifyPoleLikeObjectSetup_t_mMaxXDisOfGroup_set, doc=r"""mMaxXDisOfGroup : float""")
    mTruePointSpacing = property(_globalmapper.GM_ClassifyPoleLikeObjectSetup_t_mTruePointSpacing_get, _globalmapper.GM_ClassifyPoleLikeObjectSetup_t_mTruePointSpacing_set, doc=r"""mTruePointSpacing : double""")
    mGroundBase = property(_globalmapper.GM_ClassifyPoleLikeObjectSetup_t_mGroundBase_get, _globalmapper.GM_ClassifyPoleLikeObjectSetup_t_mGroundBase_set, doc=r"""mGroundBase : bool""")

    def __repr__( self ) :
        return str(gmobject_to_map(self))

    __swig_destroy__ = _globalmapper.delete_GM_ClassifyPoleLikeObjectSetup_t


# Register GM_ClassifyPoleLikeObjectSetup_t in _globalmapper:
_globalmapper.GM_ClassifyPoleLikeObjectSetup_t_swigregister(GM_ClassifyPoleLikeObjectSetup_t)

[docs]
class GM_ClassifyPolePowerSetup_t(object):
    r"""Proxy of C++ GM_ClassifyPolePowerSetup_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(GM_ClassifyPolePowerSetup_t self) -> GM_ClassifyPolePowerSetup_t"""
        _globalmapper.GM_ClassifyPolePowerSetup_t_swiginit(self, _globalmapper.new_GM_ClassifyPolePowerSetup_t())
    mTypes = property(_globalmapper.GM_ClassifyPolePowerSetup_t_mTypes_get, _globalmapper.GM_ClassifyPolePowerSetup_t_mTypes_set, doc=r"""mTypes : GM_LidarClassifyTypes_t32""")
    mFlags = property(_globalmapper.GM_ClassifyPolePowerSetup_t_mFlags_get, _globalmapper.GM_ClassifyPolePowerSetup_t_mFlags_set, doc=r"""mFlags : GM_ClassifyNonGroundFlags_t32""")
    mPowerlineOpts = property(_globalmapper.GM_ClassifyPolePowerSetup_t_mPowerlineOpts_get, _globalmapper.GM_ClassifyPolePowerSetup_t_mPowerlineOpts_set, doc=r"""mPowerlineOpts : GM_ClassifyPowerlineSetup_t""")
    mPoleLikeObjectsOpts = property(_globalmapper.GM_ClassifyPolePowerSetup_t_mPoleLikeObjectsOpts_get, _globalmapper.GM_ClassifyPolePowerSetup_t_mPoleLikeObjectsOpts_set, doc=r"""mPoleLikeObjectsOpts : GM_ClassifyPoleLikeObjectSetup_t""")

    def __repr__( self ) :
        return str(gmobject_to_map(self))

    __swig_destroy__ = _globalmapper.delete_GM_ClassifyPolePowerSetup_t


# Register GM_ClassifyPolePowerSetup_t in _globalmapper:
_globalmapper.GM_ClassifyPolePowerSetup_t_swigregister(GM_ClassifyPolePowerSetup_t)

[docs]
class GM_SegmentationSetup_t(object):
    r"""Proxy of C++ GM_SegmentationSetup_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(GM_SegmentationSetup_t self) -> GM_SegmentationSetup_t"""
        _globalmapper.GM_SegmentationSetup_t_swiginit(self, _globalmapper.new_GM_SegmentationSetup_t())
    mMaxMahalanobisDistance = property(_globalmapper.GM_SegmentationSetup_t_mMaxMahalanobisDistance_get, _globalmapper.GM_SegmentationSetup_t_mMaxMahalanobisDistance_set, doc=r"""mMaxMahalanobisDistance : float""")
    mMinClusterSize = property(_globalmapper.GM_SegmentationSetup_t_mMinClusterSize_get, _globalmapper.GM_SegmentationSetup_t_mMinClusterSize_set, doc=r"""mMinClusterSize : int""")

    def __repr__( self ) :
        return str(gmobject_to_map(self))

    __swig_destroy__ = _globalmapper.delete_GM_SegmentationSetup_t


# Register GM_SegmentationSetup_t in _globalmapper:
_globalmapper.GM_SegmentationSetup_t_swigregister(GM_SegmentationSetup_t)

[docs]
class GM_ClassifyGraphSetup_t(object):
    r"""Proxy of C++ GM_ClassifyGraphSetup_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(GM_ClassifyGraphSetup_t self) -> GM_ClassifyGraphSetup_t"""
        _globalmapper.GM_ClassifyGraphSetup_t_swiginit(self, _globalmapper.new_GM_ClassifyGraphSetup_t())
    mTypes = property(_globalmapper.GM_ClassifyGraphSetup_t_mTypes_get, _globalmapper.GM_ClassifyGraphSetup_t_mTypes_set, doc=r"""mTypes : GM_LidarClassifyTypes_t32""")
    mFlags = property(_globalmapper.GM_ClassifyGraphSetup_t_mFlags_get, _globalmapper.GM_ClassifyGraphSetup_t_mFlags_set, doc=r"""mFlags : GM_ClassifyNonGroundFlags_t32""")
    mSegmentationOpts = property(_globalmapper.GM_ClassifyGraphSetup_t_mSegmentationOpts_get, _globalmapper.GM_ClassifyGraphSetup_t_mSegmentationOpts_set, doc=r"""mSegmentationOpts : GM_SegmentationSetup_t""")
    mBuildingVegOpts = property(_globalmapper.GM_ClassifyGraphSetup_t_mBuildingVegOpts_get, _globalmapper.GM_ClassifyGraphSetup_t_mBuildingVegOpts_set, doc=r"""mBuildingVegOpts : GM_ClassifyBuildingVegSetup_t""")
    mMinHeightAboveGroundUnits = property(_globalmapper.GM_ClassifyGraphSetup_t_mMinHeightAboveGroundUnits_get, _globalmapper.GM_ClassifyGraphSetup_t_mMinHeightAboveGroundUnits_set, doc=r"""mMinHeightAboveGroundUnits : GM_LidarResMult_t""")
    mbClassifyVegByHeight = property(_globalmapper.GM_ClassifyGraphSetup_t_mbClassifyVegByHeight_get, _globalmapper.GM_ClassifyGraphSetup_t_mbClassifyVegByHeight_set, doc=r"""mbClassifyVegByHeight : bool""")
    mVegLow = property(_globalmapper.GM_ClassifyGraphSetup_t_mVegLow_get, _globalmapper.GM_ClassifyGraphSetup_t_mVegLow_set, doc=r"""mVegLow : float""")
    mVegMed = property(_globalmapper.GM_ClassifyGraphSetup_t_mVegMed_get, _globalmapper.GM_ClassifyGraphSetup_t_mVegMed_set, doc=r"""mVegMed : float""")
    mVegHigh = property(_globalmapper.GM_ClassifyGraphSetup_t_mVegHigh_get, _globalmapper.GM_ClassifyGraphSetup_t_mVegHigh_set, doc=r"""mVegHigh : float""")
    mVegWidthUnits = property(_globalmapper.GM_ClassifyGraphSetup_t_mVegWidthUnits_get, _globalmapper.GM_ClassifyGraphSetup_t_mVegWidthUnits_set, doc=r"""mVegWidthUnits : GM_LidarResMult_t""")
    mVegMaxWidth = property(_globalmapper.GM_ClassifyGraphSetup_t_mVegMaxWidth_get, _globalmapper.GM_ClassifyGraphSetup_t_mVegMaxWidth_set, doc=r"""mVegMaxWidth : float""")
    mVegHeightUnits = property(_globalmapper.GM_ClassifyGraphSetup_t_mVegHeightUnits_get, _globalmapper.GM_ClassifyGraphSetup_t_mVegHeightUnits_set, doc=r"""mVegHeightUnits : GM_LidarResMult_t""")
    mPoleMinDiameter = property(_globalmapper.GM_ClassifyGraphSetup_t_mPoleMinDiameter_get, _globalmapper.GM_ClassifyGraphSetup_t_mPoleMinDiameter_set, doc=r"""mPoleMinDiameter : float""")
    mPoleMaxDiameter = property(_globalmapper.GM_ClassifyGraphSetup_t_mPoleMaxDiameter_get, _globalmapper.GM_ClassifyGraphSetup_t_mPoleMaxDiameter_set, doc=r"""mPoleMaxDiameter : float""")
    mPoleDiameterUnits = property(_globalmapper.GM_ClassifyGraphSetup_t_mPoleDiameterUnits_get, _globalmapper.GM_ClassifyGraphSetup_t_mPoleDiameterUnits_set, doc=r"""mPoleDiameterUnits : GM_LidarResMult_t""")

    def __repr__( self ) :
        return str(gmobject_to_map(self))


    def __repr__( self ) :
        return str(gmobject_to_map(self))

    __swig_destroy__ = _globalmapper.delete_GM_ClassifyGraphSetup_t


# Register GM_ClassifyGraphSetup_t in _globalmapper:
_globalmapper.GM_ClassifyGraphSetup_t_swigregister(GM_ClassifyGraphSetup_t)

GM_LidarExtract_Buildings = _globalmapper.GM_LidarExtract_Buildings

GM_LidarExtract_Trees = _globalmapper.GM_LidarExtract_Trees

GM_LidarExtract_Powerlines = _globalmapper.GM_LidarExtract_Powerlines

GM_LidarExtract_Poles = _globalmapper.GM_LidarExtract_Poles

GM_LidarExtract_CreateSideWalls = _globalmapper.GM_LidarExtract_CreateSideWalls

GM_LidarExtract_SaveDebugInfo = _globalmapper.GM_LidarExtract_SaveDebugInfo

GM_LidarExtract_CreateSeparateRoofPieces = _globalmapper.GM_LidarExtract_CreateSeparateRoofPieces

GM_LidarExtract_CreateTreePolygons = _globalmapper.GM_LidarExtract_CreateTreePolygons

GM_LidarExtract_SmoothTreePolygons = _globalmapper.GM_LidarExtract_SmoothTreePolygons

GM_LidarExtract_BestFitPlaneForRoofPieces = _globalmapper.GM_LidarExtract_BestFitPlaneForRoofPieces

GM_LidarExtract_CreateBuildingAsMesh = _globalmapper.GM_LidarExtract_CreateBuildingAsMesh

GM_LidarExtract_CreateFootprints = _globalmapper.GM_LidarExtract_CreateFootprints

GM_LidarExtract_HideProgress = _globalmapper.GM_LidarExtract_HideProgress

[docs]
class GM_LidarExtractSetup_t(object):
    r"""Proxy of C++ GM_LidarExtractSetup_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(GM_LidarExtractSetup_t self) -> GM_LidarExtractSetup_t"""
        _globalmapper.GM_LidarExtractSetup_t_swiginit(self, _globalmapper.new_GM_LidarExtractSetup_t())
    mTypes = property(_globalmapper.GM_LidarExtractSetup_t_mTypes_get, _globalmapper.GM_LidarExtractSetup_t_mTypes_set, doc=r"""mTypes : GM_LidarExtractType_t32""")
    mFlags = property(_globalmapper.GM_LidarExtractSetup_t_mFlags_get, _globalmapper.GM_LidarExtractSetup_t_mFlags_set, doc=r"""mFlags : GM_LidarExtractFlags_t32""")
    mGridBinMultBuildings = property(_globalmapper.GM_LidarExtractSetup_t_mGridBinMultBuildings_get, _globalmapper.GM_LidarExtractSetup_t_mGridBinMultBuildings_set, doc=r"""mGridBinMultBuildings : float""")
    mGridBinMultBuildingsUnits = property(_globalmapper.GM_LidarExtractSetup_t_mGridBinMultBuildingsUnits_get, _globalmapper.GM_LidarExtractSetup_t_mGridBinMultBuildingsUnits_set, doc=r"""mGridBinMultBuildingsUnits : GM_LidarResMult_t""")
    mGridBinMultTrees = property(_globalmapper.GM_LidarExtractSetup_t_mGridBinMultTrees_get, _globalmapper.GM_LidarExtractSetup_t_mGridBinMultTrees_set, doc=r"""mGridBinMultTrees : float""")
    mGridBinMultTreesUnits = property(_globalmapper.GM_LidarExtractSetup_t_mGridBinMultTreesUnits_get, _globalmapper.GM_LidarExtractSetup_t_mGridBinMultTreesUnits_set, doc=r"""mGridBinMultTreesUnits : GM_LidarResMult_t""")
    mBuildingFloorType = property(_globalmapper.GM_LidarExtractSetup_t_mBuildingFloorType_get, _globalmapper.GM_LidarExtractSetup_t_mBuildingFloorType_set, doc=r"""mBuildingFloorType : AreaFeatureClass_t16""")
    mBuildingRoofType = property(_globalmapper.GM_LidarExtractSetup_t_mBuildingRoofType_get, _globalmapper.GM_LidarExtractSetup_t_mBuildingRoofType_set, doc=r"""mBuildingRoofType : AreaFeatureClass_t16""")
    mBuildingWallType = property(_globalmapper.GM_LidarExtractSetup_t_mBuildingWallType_get, _globalmapper.GM_LidarExtractSetup_t_mBuildingWallType_set, doc=r"""mBuildingWallType : AreaFeatureClass_t16""")
    mBuildingMinAreaSqM = property(_globalmapper.GM_LidarExtractSetup_t_mBuildingMinAreaSqM_get, _globalmapper.GM_LidarExtractSetup_t_mBuildingMinAreaSqM_set, doc=r"""mBuildingMinAreaSqM : float""")
    mSimplifyFootprints = property(_globalmapper.GM_LidarExtractSetup_t_mSimplifyFootprints_get, _globalmapper.GM_LidarExtractSetup_t_mSimplifyFootprints_set, doc=r"""mSimplifyFootprints : bool""")
    mBuildingSimpEps = property(_globalmapper.GM_LidarExtractSetup_t_mBuildingSimpEps_get, _globalmapper.GM_LidarExtractSetup_t_mBuildingSimpEps_set, doc=r"""mBuildingSimpEps : float""")
    mBuildingSimpEpsUnits = property(_globalmapper.GM_LidarExtractSetup_t_mBuildingSimpEpsUnits_get, _globalmapper.GM_LidarExtractSetup_t_mBuildingSimpEpsUnits_set, doc=r"""mBuildingSimpEpsUnits : GM_LidarResMult_t""")
    mRegularizeFootprints = property(_globalmapper.GM_LidarExtractSetup_t_mRegularizeFootprints_get, _globalmapper.GM_LidarExtractSetup_t_mRegularizeFootprints_set, doc=r"""mRegularizeFootprints : bool""")
    mMinPointsInPlane = property(_globalmapper.GM_LidarExtractSetup_t_mMinPointsInPlane_get, _globalmapper.GM_LidarExtractSetup_t_mMinPointsInPlane_set, doc=r"""mMinPointsInPlane : int""")
    mMinPointsInTree = property(_globalmapper.GM_LidarExtractSetup_t_mMinPointsInTree_get, _globalmapper.GM_LidarExtractSetup_t_mMinPointsInTree_set, doc=r"""mMinPointsInTree : int""")
    mMaxDistanceToPlane = property(_globalmapper.GM_LidarExtractSetup_t_mMaxDistanceToPlane_get, _globalmapper.GM_LidarExtractSetup_t_mMaxDistanceToPlane_set, doc=r"""mMaxDistanceToPlane : float""")
    mCreateGroundFootprints = property(_globalmapper.GM_LidarExtractSetup_t_mCreateGroundFootprints_get, _globalmapper.GM_LidarExtractSetup_t_mCreateGroundFootprints_set, doc=r"""mCreateGroundFootprints : bool""")
    mPinFootprintsToHeight = property(_globalmapper.GM_LidarExtractSetup_t_mPinFootprintsToHeight_get, _globalmapper.GM_LidarExtractSetup_t_mPinFootprintsToHeight_set, doc=r"""mPinFootprintsToHeight : bool""")
    mFootprintHeight = property(_globalmapper.GM_LidarExtractSetup_t_mFootprintHeight_get, _globalmapper.GM_LidarExtractSetup_t_mFootprintHeight_set, doc=r"""mFootprintHeight : float""")
    mMinFootprintAreaSqM = property(_globalmapper.GM_LidarExtractSetup_t_mMinFootprintAreaSqM_get, _globalmapper.GM_LidarExtractSetup_t_mMinFootprintAreaSqM_set, doc=r"""mMinFootprintAreaSqM : float""")
    mPseudoMeasurementsAtPlanarIntersections = property(_globalmapper.GM_LidarExtractSetup_t_mPseudoMeasurementsAtPlanarIntersections_get, _globalmapper.GM_LidarExtractSetup_t_mPseudoMeasurementsAtPlanarIntersections_set, doc=r"""mPseudoMeasurementsAtPlanarIntersections : bool""")
    mCreateSideWalls = property(_globalmapper.GM_LidarExtractSetup_t_mCreateSideWalls_get, _globalmapper.GM_LidarExtractSetup_t_mCreateSideWalls_set, doc=r"""mCreateSideWalls : bool""")
    mColorVertices = property(_globalmapper.GM_LidarExtractSetup_t_mColorVertices_get, _globalmapper.GM_LidarExtractSetup_t_mColorVertices_set, doc=r"""mColorVertices : bool""")
    mIsMeshReconstructed = property(_globalmapper.GM_LidarExtractSetup_t_mIsMeshReconstructed_get, _globalmapper.GM_LidarExtractSetup_t_mIsMeshReconstructed_set, doc=r"""mIsMeshReconstructed : bool""")
    mReconstructionRate = property(_globalmapper.GM_LidarExtractSetup_t_mReconstructionRate_get, _globalmapper.GM_LidarExtractSetup_t_mReconstructionRate_set, doc=r"""mReconstructionRate : float""")
    mNormalWeight = property(_globalmapper.GM_LidarExtractSetup_t_mNormalWeight_get, _globalmapper.GM_LidarExtractSetup_t_mNormalWeight_set, doc=r"""mNormalWeight : float""")
    mMaxIterations = property(_globalmapper.GM_LidarExtractSetup_t_mMaxIterations_get, _globalmapper.GM_LidarExtractSetup_t_mMaxIterations_set, doc=r"""mMaxIterations : int""")
    mTreeMinWidthM = property(_globalmapper.GM_LidarExtractSetup_t_mTreeMinWidthM_get, _globalmapper.GM_LidarExtractSetup_t_mTreeMinWidthM_set, doc=r"""mTreeMinWidthM : float""")
    mTreeMaxWidthM = property(_globalmapper.GM_LidarExtractSetup_t_mTreeMaxWidthM_get, _globalmapper.GM_LidarExtractSetup_t_mTreeMaxWidthM_set, doc=r"""mTreeMaxWidthM : float""")
    mTreeMinHeightM = property(_globalmapper.GM_LidarExtractSetup_t_mTreeMinHeightM_get, _globalmapper.GM_LidarExtractSetup_t_mTreeMinHeightM_set, doc=r"""mTreeMinHeightM : float""")
    mTreeModelName = property(_globalmapper.GM_LidarExtractSetup_t_mTreeModelName_get, _globalmapper.GM_LidarExtractSetup_t_mTreeModelName_set, doc=r"""mTreeModelName : p.q(const).char""")
    mTreeType = property(_globalmapper.GM_LidarExtractSetup_t_mTreeType_get, _globalmapper.GM_LidarExtractSetup_t_mTreeType_set, doc=r"""mTreeType : PointFeatureClass_t16""")
    mbReclassifyByHeight = property(_globalmapper.GM_LidarExtractSetup_t_mbReclassifyByHeight_get, _globalmapper.GM_LidarExtractSetup_t_mbReclassifyByHeight_set, doc=r"""mbReclassifyByHeight : bool""")
    mVegLow = property(_globalmapper.GM_LidarExtractSetup_t_mVegLow_get, _globalmapper.GM_LidarExtractSetup_t_mVegLow_set, doc=r"""mVegLow : float""")
    mVegMed = property(_globalmapper.GM_LidarExtractSetup_t_mVegMed_get, _globalmapper.GM_LidarExtractSetup_t_mVegMed_set, doc=r"""mVegMed : float""")
    mVegHigh = property(_globalmapper.GM_LidarExtractSetup_t_mVegHigh_get, _globalmapper.GM_LidarExtractSetup_t_mVegHigh_set, doc=r"""mVegHigh : float""")
    mVegHeightUnits = property(_globalmapper.GM_LidarExtractSetup_t_mVegHeightUnits_get, _globalmapper.GM_LidarExtractSetup_t_mVegHeightUnits_set, doc=r"""mVegHeightUnits : GM_LidarResMult_t""")
    mbVegCreateMesh = property(_globalmapper.GM_LidarExtractSetup_t_mbVegCreateMesh_get, _globalmapper.GM_LidarExtractSetup_t_mbVegCreateMesh_set, doc=r"""mbVegCreateMesh : bool""")
    mbVegSimplifyFootprints = property(_globalmapper.GM_LidarExtractSetup_t_mbVegSimplifyFootprints_get, _globalmapper.GM_LidarExtractSetup_t_mbVegSimplifyFootprints_set, doc=r"""mbVegSimplifyFootprints : bool""")
    mVegSimpEps = property(_globalmapper.GM_LidarExtractSetup_t_mVegSimpEps_get, _globalmapper.GM_LidarExtractSetup_t_mVegSimpEps_set, doc=r"""mVegSimpEps : float""")
    mVegSimpEpsUnits = property(_globalmapper.GM_LidarExtractSetup_t_mVegSimpEpsUnits_get, _globalmapper.GM_LidarExtractSetup_t_mVegSimpEpsUnits_set, doc=r"""mVegSimpEpsUnits : GM_LidarResMult_t""")
    mPowerlineBinSizeM = property(_globalmapper.GM_LidarExtractSetup_t_mPowerlineBinSizeM_get, _globalmapper.GM_LidarExtractSetup_t_mPowerlineBinSizeM_set, doc=r"""mPowerlineBinSizeM : double""")
    mPowerlineBinMult = property(_globalmapper.GM_LidarExtractSetup_t_mPowerlineBinMult_get, _globalmapper.GM_LidarExtractSetup_t_mPowerlineBinMult_set, doc=r"""mPowerlineBinMult : double""")
    mPowerlineClassGroupMask = property(_globalmapper.GM_LidarExtractSetup_t_mPowerlineClassGroupMask_get, _globalmapper.GM_LidarExtractSetup_t_mPowerlineClassGroupMask_set, doc=r"""mPowerlineClassGroupMask : GM_LidarClassGroup_t16""")
    mPowerlineMaxDistFromLineM = property(_globalmapper.GM_LidarExtractSetup_t_mPowerlineMaxDistFromLineM_get, _globalmapper.GM_LidarExtractSetup_t_mPowerlineMaxDistFromLineM_set, doc=r"""mPowerlineMaxDistFromLineM : float""")
    mPowerlineMaxVertDiffPerM = property(_globalmapper.GM_LidarExtractSetup_t_mPowerlineMaxVertDiffPerM_get, _globalmapper.GM_LidarExtractSetup_t_mPowerlineMaxVertDiffPerM_set, doc=r"""mPowerlineMaxVertDiffPerM : float""")
    mPowerlineMaxAngleDeltaDeg = property(_globalmapper.GM_LidarExtractSetup_t_mPowerlineMaxAngleDeltaDeg_get, _globalmapper.GM_LidarExtractSetup_t_mPowerlineMaxAngleDeltaDeg_set, doc=r"""mPowerlineMaxAngleDeltaDeg : float""")
    mPowerLineMaxGapLenM = property(_globalmapper.GM_LidarExtractSetup_t_mPowerLineMaxGapLenM_get, _globalmapper.GM_LidarExtractSetup_t_mPowerLineMaxGapLenM_set, doc=r"""mPowerLineMaxGapLenM : float""")
    mPowerlineMinLineLenM = property(_globalmapper.GM_LidarExtractSetup_t_mPowerlineMinLineLenM_get, _globalmapper.GM_LidarExtractSetup_t_mPowerlineMinLineLenM_set, doc=r"""mPowerlineMinLineLenM : float""")
    mPowerlineMinLineSegLenM = property(_globalmapper.GM_LidarExtractSetup_t_mPowerlineMinLineSegLenM_get, _globalmapper.GM_LidarExtractSetup_t_mPowerlineMinLineSegLenM_set, doc=r"""mPowerlineMinLineSegLenM : float""")
    mPoleBinSizeM = property(_globalmapper.GM_LidarExtractSetup_t_mPoleBinSizeM_get, _globalmapper.GM_LidarExtractSetup_t_mPoleBinSizeM_set, doc=r"""mPoleBinSizeM : double""")
    mPoleMinSegmentCount = property(_globalmapper.GM_LidarExtractSetup_t_mPoleMinSegmentCount_get, _globalmapper.GM_LidarExtractSetup_t_mPoleMinSegmentCount_set, doc=r"""mPoleMinSegmentCount : int""")
    mPoleMinHeightOfPole = property(_globalmapper.GM_LidarExtractSetup_t_mPoleMinHeightOfPole_get, _globalmapper.GM_LidarExtractSetup_t_mPoleMinHeightOfPole_set, doc=r"""mPoleMinHeightOfPole : float""")
    mPoleMaxXDisOfGroup = property(_globalmapper.GM_LidarExtractSetup_t_mPoleMaxXDisOfGroup_get, _globalmapper.GM_LidarExtractSetup_t_mPoleMaxXDisOfGroup_set, doc=r"""mPoleMaxXDisOfGroup : float""")
    mPoleHighPoint = property(_globalmapper.GM_LidarExtractSetup_t_mPoleHighPoint_get, _globalmapper.GM_LidarExtractSetup_t_mPoleHighPoint_set, doc=r"""mPoleHighPoint : bool""")
    mPoleType = property(_globalmapper.GM_LidarExtractSetup_t_mPoleType_get, _globalmapper.GM_LidarExtractSetup_t_mPoleType_set, doc=r"""mPoleType : PointFeatureClass_t16""")
    mbPoleCreateMesh = property(_globalmapper.GM_LidarExtractSetup_t_mbPoleCreateMesh_get, _globalmapper.GM_LidarExtractSetup_t_mbPoleCreateMesh_set, doc=r"""mbPoleCreateMesh : bool""")

    def __repr__( self ) :
        return str(gmobject_to_map(self))

    __swig_destroy__ = _globalmapper.delete_GM_LidarExtractSetup_t


# Register GM_LidarExtractSetup_t in _globalmapper:
_globalmapper.GM_LidarExtractSetup_t_swigregister(GM_LidarExtractSetup_t)

GM_LidarExtractLayer_BuildingHulls = _globalmapper.GM_LidarExtractLayer_BuildingHulls

GM_LidarExtractLayer_BuildingFootprints = _globalmapper.GM_LidarExtractLayer_BuildingFootprints

GM_LidarExtractLayer_BuildingWalls = _globalmapper.GM_LidarExtractLayer_BuildingWalls

GM_LidarExtractLayer_BuildingPlanes = _globalmapper.GM_LidarExtractLayer_BuildingPlanes

GM_LidarExtractLayer_Pole = _globalmapper.GM_LidarExtractLayer_Pole

GM_LidarExtractLayer_Powerline = _globalmapper.GM_LidarExtractLayer_Powerline

GM_LidarExtractLayer_Tree = _globalmapper.GM_LidarExtractLayer_Tree

GM_LidarExtractLayer_PoleHulls = _globalmapper.GM_LidarExtractLayer_PoleHulls

GM_LidarExtractLayer_TreeHulls = _globalmapper.GM_LidarExtractLayer_TreeHulls

GM_LidarExtractLayer_TreeFootprints = _globalmapper.GM_LidarExtractLayer_TreeFootprints

GM_LidarExtract_NumLayers = _globalmapper.GM_LidarExtract_NumLayers

[docs]
class GM_LidarExtractOutput_t(object):
    r"""Proxy of C++ GM_LidarExtractOutput_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(GM_LidarExtractOutput_t self) -> GM_LidarExtractOutput_t"""
        _globalmapper.GM_LidarExtractOutput_t_swiginit(self, _globalmapper.new_GM_LidarExtractOutput_t())
    mExtractedLayers = property(_globalmapper.GM_LidarExtractOutput_t_mExtractedLayers_get, _globalmapper.GM_LidarExtractOutput_t_mExtractedLayers_set, doc=r"""mExtractedLayers : a(GM_LidarExtract_NumLayers).GM_LayerHandle_t32""")

    def __repr__( self ) :
        attr_map = gmobject_to_map( self )
        attr_map["mExtractedLayers"] = carray_to_list( GM_LayerHandle_array_frompointer( self.mExtractedLayers ), GM_LidarExtract_NumLayers )
        return str( attr_map )

    __swig_destroy__ = _globalmapper.delete_GM_LidarExtractOutput_t


# Register GM_LidarExtractOutput_t in _globalmapper:
_globalmapper.GM_LidarExtractOutput_t_swigregister(GM_LidarExtractOutput_t)

GM_CameraModel_Pinhole = _globalmapper.GM_CameraModel_Pinhole

GM_CameraModel_PinholeRadial1 = _globalmapper.GM_CameraModel_PinholeRadial1

GM_CameraModel_PinholeRadial3 = _globalmapper.GM_CameraModel_PinholeRadial3

GM_CameraModel_PinholeBrown2 = _globalmapper.GM_CameraModel_PinholeBrown2

GM_CameraModel_PinholeSimpleFisheye = _globalmapper.GM_CameraModel_PinholeSimpleFisheye

GM_CameraModel_FirstGap = _globalmapper.GM_CameraModel_FirstGap

GM_CameraModel_Spherical = _globalmapper.GM_CameraModel_Spherical

GM_CameraModel_Default = _globalmapper.GM_CameraModel_Default

GM_CameraModel_Unknown = _globalmapper.GM_CameraModel_Unknown

GM_SfmMethod_Incremental = _globalmapper.GM_SfmMethod_Incremental

GM_SfmMethod_Global = _globalmapper.GM_SfmMethod_Global

GM_SfmMethod_GlobalThenInc = _globalmapper.GM_SfmMethod_GlobalThenInc

GM_SfmMethod_IncrementalOrig = _globalmapper.GM_SfmMethod_IncrementalOrig

GM_SfmMethod_IncrementalOld = _globalmapper.GM_SfmMethod_IncrementalOld

GM_SfmMethod_NumTypes = _globalmapper.GM_SfmMethod_NumTypes

GM_SfmMethod_Default = _globalmapper.GM_SfmMethod_Default

GM_SfmQuality_Normal = _globalmapper.GM_SfmQuality_Normal

GM_SfmQuality_High = _globalmapper.GM_SfmQuality_High

GM_SfmQuality_Ultra = _globalmapper.GM_SfmQuality_Ultra

GM_SfmQuality_NumTypes = _globalmapper.GM_SfmQuality_NumTypes

GM_SfmQuality_Default = _globalmapper.GM_SfmQuality_Default

GM_Describer_SIFT = _globalmapper.GM_Describer_SIFT

GM_Describer_AkazeFloat = _globalmapper.GM_Describer_AkazeFloat

GM_Describer_AkazeMldb = _globalmapper.GM_Describer_AkazeMldb

GM_Describer_NumTypes = _globalmapper.GM_Describer_NumTypes

GM_Describer_Default = _globalmapper.GM_Describer_Default

GM_SfmInit_ExistingPose = _globalmapper.GM_SfmInit_ExistingPose

GM_SfmInit_MaxPair = _globalmapper.GM_SfmInit_MaxPair

GM_SfmInit_AutoPair = _globalmapper.GM_SfmInit_AutoPair

GM_SfmInit_Stellar = _globalmapper.GM_SfmInit_Stellar

GM_SfmInit_NumTypes = _globalmapper.GM_SfmInit_NumTypes

GM_SfmInit_Default = _globalmapper.GM_SfmInit_Default

GM_SfmInit_UseDefault = _globalmapper.GM_SfmInit_UseDefault

GM_SfmTriMethod_DirectLinearTransform = _globalmapper.GM_SfmTriMethod_DirectLinearTransform

GM_SfmTriMethod_L1Angular = _globalmapper.GM_SfmTriMethod_L1Angular

GM_SfmTriMethod_LInfinityAngular = _globalmapper.GM_SfmTriMethod_LInfinityAngular

GM_SfmTriMethod_InverseDepthWeightedMidpoint = _globalmapper.GM_SfmTriMethod_InverseDepthWeightedMidpoint

GM_SfmTriMethod_NumTypes = _globalmapper.GM_SfmTriMethod_NumTypes

GM_SfmTriMethod_Default = _globalmapper.GM_SfmTriMethod_Default

GM_SfmTriMethod_UseDefault = _globalmapper.GM_SfmTriMethod_UseDefault

GM_SfmResection_DirectLinearTransform = _globalmapper.GM_SfmResection_DirectLinearTransform

GM_SfmResection_P3P_KE_CVPR17 = _globalmapper.GM_SfmResection_P3P_KE_CVPR17

GM_SfmResection_P3P_KNEIP_CVPR11 = _globalmapper.GM_SfmResection_P3P_KNEIP_CVPR11

GM_SfmResection_P3P_NORDBERG_ECCV18 = _globalmapper.GM_SfmResection_P3P_NORDBERG_ECCV18

GM_SfmResection_UP2P_KUKELOVA_ACCV10 = _globalmapper.GM_SfmResection_UP2P_KUKELOVA_ACCV10

GM_SfmResection_NumTypes = _globalmapper.GM_SfmResection_NumTypes

GM_SfmResection_Default = _globalmapper.GM_SfmResection_Default

GM_SfmResection_UseDefault = _globalmapper.GM_SfmResection_UseDefault

GM_GeoRegistration_GCPsBeforeSfM = _globalmapper.GM_GeoRegistration_GCPsBeforeSfM

GM_GeoRegistration_NoExifIfGCPs = _globalmapper.GM_GeoRegistration_NoExifIfGCPs

GM_GeoRegistration_GCPsBeforeExif = _globalmapper.GM_GeoRegistration_GCPsBeforeExif

GM_GeoRegistration_UseRobustReg = _globalmapper.GM_GeoRegistration_UseRobustReg

GM_GeoRegistration_DefaultFlags = _globalmapper.GM_GeoRegistration_DefaultFlags

[docs]
class GM_GpsFitError_t(object):
    r"""Proxy of C++ GM_GpsFitError_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(GM_GpsFitError_t self) -> GM_GpsFitError_t"""
        _globalmapper.GM_GpsFitError_t_swiginit(self, _globalmapper.new_GM_GpsFitError_t())
    mValid = property(_globalmapper.GM_GpsFitError_t_mValid_get, _globalmapper.GM_GpsFitError_t_mValid_set, doc=r"""mValid : boolean""")
    mMin = property(_globalmapper.GM_GpsFitError_t_mMin_get, _globalmapper.GM_GpsFitError_t_mMin_set, doc=r"""mMin : double""")
    mMean = property(_globalmapper.GM_GpsFitError_t_mMean_get, _globalmapper.GM_GpsFitError_t_mMean_set, doc=r"""mMean : double""")
    mMedian = property(_globalmapper.GM_GpsFitError_t_mMedian_get, _globalmapper.GM_GpsFitError_t_mMedian_set, doc=r"""mMedian : double""")
    mMax = property(_globalmapper.GM_GpsFitError_t_mMax_get, _globalmapper.GM_GpsFitError_t_mMax_set, doc=r"""mMax : double""")

    def __repr__( self ) :
        return str(gmobject_to_map(self))

    __swig_destroy__ = _globalmapper.delete_GM_GpsFitError_t


# Register GM_GpsFitError_t in _globalmapper:
_globalmapper.GM_GpsFitError_t_swigregister(GM_GpsFitError_t)

[docs]
class GM_P2PImagePixel_t(object):
    r"""Proxy of C++ GM_P2PImagePixel_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(GM_P2PImagePixel_t self) -> GM_P2PImagePixel_t"""
        _globalmapper.GM_P2PImagePixel_t_swiginit(self, _globalmapper.new_GM_P2PImagePixel_t())
    mPixelPos = property(_globalmapper.GM_P2PImagePixel_t_mPixelPos_get, _globalmapper.GM_P2PImagePixel_t_mPixelPos_set, doc=r"""mPixelPos : GM_Point_t""")
    mImageFilename = property(_globalmapper.GM_P2PImagePixel_t_mImageFilename_get, _globalmapper.GM_P2PImagePixel_t_mImageFilename_set, doc=r"""mImageFilename : p.q(const).char""")

    def __repr__( self ) :
        return str(gmobject_to_map(self))

    __swig_destroy__ = _globalmapper.delete_GM_P2PImagePixel_t


# Register GM_P2PImagePixel_t in _globalmapper:
_globalmapper.GM_P2PImagePixel_t_swigregister(GM_P2PImagePixel_t)

[docs]
class GM_P2PControlPoint_t(object):
    r"""Proxy of C++ GM_P2PControlPoint_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(GM_P2PControlPoint_t self) -> GM_P2PControlPoint_t"""
        _globalmapper.GM_P2PControlPoint_t_swiginit(self, _globalmapper.new_GM_P2PControlPoint_t())
    mName = property(_globalmapper.GM_P2PControlPoint_t_mName_get, _globalmapper.GM_P2PControlPoint_t_mName_set, doc=r"""mName : p.q(const).char""")
    mLatLonPos = property(_globalmapper.GM_P2PControlPoint_t_mLatLonPos_get, _globalmapper.GM_P2PControlPoint_t_mLatLonPos_set, doc=r"""mLatLonPos : GM_Point3D_t""")
    mImagePixelList = property(_globalmapper.GM_P2PControlPoint_t_mImagePixelList_get, _globalmapper.GM_P2PControlPoint_t_mImagePixelList_set, doc=r"""mImagePixelList : p.GM_P2PImagePixel_t""")
    mImagePixelCount = property(_globalmapper.GM_P2PControlPoint_t_mImagePixelCount_get, _globalmapper.GM_P2PControlPoint_t_mImagePixelCount_set, doc=r"""mImagePixelCount : uint32""")

    def __repr__( self ) :
        attribs = gmobject_to_map( self )
        attribs['mImagePixelList'] = carray_to_list(GM_P2PImagePixel_frompointer( self.mImagePixelList ), self.mImagePixelCount)

        return str( attribs )


    def __repr__( self ) :
        return str(gmobject_to_map(self))

    __swig_destroy__ = _globalmapper.delete_GM_P2PControlPoint_t


# Register GM_P2PControlPoint_t in _globalmapper:
_globalmapper.GM_P2PControlPoint_t_swigregister(GM_P2PControlPoint_t)

GM_P2P_AdjustZUsingControlPoints = _globalmapper.GM_P2P_AdjustZUsingControlPoints

GM_P2P_DeleteWorkFiles = _globalmapper.GM_P2P_DeleteWorkFiles

GM_P2P_KeepWorkFilesOnSuccess = _globalmapper.GM_P2P_KeepWorkFilesOnSuccess

GM_P2P_IgnoreExif = _globalmapper.GM_P2P_IgnoreExif

GM_P2P_UseRelativeAltitudes = _globalmapper.GM_P2P_UseRelativeAltitudes

GM_P2P_UseColorHarmonization = _globalmapper.GM_P2P_UseColorHarmonization

GM_P2P_CloudCreateFromMesh = _globalmapper.GM_P2P_CloudCreateFromMesh

GM_P2P_AddCloudLayer = _globalmapper.GM_P2P_AddCloudLayer

GM_P2P_LoadSparseCloud = _globalmapper.GM_P2P_LoadSparseCloud

GM_P2P_UseSceneClustering = _globalmapper.GM_P2P_UseSceneClustering

GM_P2P_ImageCreateFromMesh = _globalmapper.GM_P2P_ImageCreateFromMesh

GM_P2P_ImageCreateSeparate = _globalmapper.GM_P2P_ImageCreateSeparate

GM_P2P_DensifyUseSemiGlobal = _globalmapper.GM_P2P_DensifyUseSemiGlobal

GM_P2P_HideProgress = _globalmapper.GM_P2P_HideProgress

GM_P2P_RecursiveImageSearch = _globalmapper.GM_P2P_RecursiveImageSearch

GM_P2P_DontUseGPU = _globalmapper.GM_P2P_DontUseGPU

GM_P2P_Default = _globalmapper.GM_P2P_Default

[docs]
class GM_P2PSetup_t(object):
    r"""Proxy of C++ GM_P2PSetup_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(GM_P2PSetup_t self) -> GM_P2PSetup_t"""
        _globalmapper.GM_P2PSetup_t_swiginit(self, _globalmapper.new_GM_P2PSetup_t())
    mWorkspaceFilename = property(_globalmapper.GM_P2PSetup_t_mWorkspaceFilename_get, _globalmapper.GM_P2PSetup_t_mWorkspaceFilename_set, doc=r"""mWorkspaceFilename : p.q(const).char""")
    mImageListFilename = property(_globalmapper.GM_P2PSetup_t_mImageListFilename_get, _globalmapper.GM_P2PSetup_t_mImageListFilename_set, doc=r"""mImageListFilename : p.q(const).char""")
    mImageFolder = property(_globalmapper.GM_P2PSetup_t_mImageFolder_get, _globalmapper.GM_P2PSetup_t_mImageFolder_set, doc=r"""mImageFolder : p.q(const).char""")
    mImageFilenameMask = property(_globalmapper.GM_P2PSetup_t_mImageFilenameMask_get, _globalmapper.GM_P2PSetup_t_mImageFilenameMask_set, doc=r"""mImageFilenameMask : p.q(const).char""")
    mFlags = property(_globalmapper.GM_P2PSetup_t_mFlags_get, _globalmapper.GM_P2PSetup_t_mFlags_set, doc=r"""mFlags : GM_P2PFlags_t32""")
    mGeoRegOrderFlags = property(_globalmapper.GM_P2PSetup_t_mGeoRegOrderFlags_get, _globalmapper.GM_P2PSetup_t_mGeoRegOrderFlags_set, doc=r"""mGeoRegOrderFlags : GM_GeoRegistrationOrderFlags_t8""")
    mImageReduceFactor = property(_globalmapper.GM_P2PSetup_t_mImageReduceFactor_get, _globalmapper.GM_P2PSetup_t_mImageReduceFactor_set, doc=r"""mImageReduceFactor : double""")
    mLogFileFolder = property(_globalmapper.GM_P2PSetup_t_mLogFileFolder_get, _globalmapper.GM_P2PSetup_t_mLogFileFolder_set, doc=r"""mLogFileFolder : p.q(const).char""")
    mProjectName = property(_globalmapper.GM_P2PSetup_t_mProjectName_get, _globalmapper.GM_P2PSetup_t_mProjectName_set, doc=r"""mProjectName : p.q(const).char""")
    mRelativeAltBaseM = property(_globalmapper.GM_P2PSetup_t_mRelativeAltBaseM_get, _globalmapper.GM_P2PSetup_t_mRelativeAltBaseM_set, doc=r"""mRelativeAltBaseM : float""")
    mControlPointList = property(_globalmapper.GM_P2PSetup_t_mControlPointList_get, _globalmapper.GM_P2PSetup_t_mControlPointList_set, doc=r"""mControlPointList : p.q(const).GM_P2PControlPoint_t""")
    mControlPointCount = property(_globalmapper.GM_P2PSetup_t_mControlPointCount_get, _globalmapper.GM_P2PSetup_t_mControlPointCount_set, doc=r"""mControlPointCount : uint32""")
    mCloudLayerDesc = property(_globalmapper.GM_P2PSetup_t_mCloudLayerDesc_get, _globalmapper.GM_P2PSetup_t_mCloudLayerDesc_set, doc=r"""mCloudLayerDesc : p.q(const).char""")
    mCloudLayerFilename = property(_globalmapper.GM_P2PSetup_t_mCloudLayerFilename_get, _globalmapper.GM_P2PSetup_t_mCloudLayerFilename_set, doc=r"""mCloudLayerFilename : p.q(const).char""")
    mImageLayerDesc = property(_globalmapper.GM_P2PSetup_t_mImageLayerDesc_get, _globalmapper.GM_P2PSetup_t_mImageLayerDesc_set, doc=r"""mImageLayerDesc : p.q(const).char""")
    mImageLayerFilename = property(_globalmapper.GM_P2PSetup_t_mImageLayerFilename_get, _globalmapper.GM_P2PSetup_t_mImageLayerFilename_set, doc=r"""mImageLayerFilename : p.q(const).char""")
    mMeshLayerDesc = property(_globalmapper.GM_P2PSetup_t_mMeshLayerDesc_get, _globalmapper.GM_P2PSetup_t_mMeshLayerDesc_set, doc=r"""mMeshLayerDesc : p.q(const).char""")
    mMeshLayerFilename = property(_globalmapper.GM_P2PSetup_t_mMeshLayerFilename_get, _globalmapper.GM_P2PSetup_t_mMeshLayerFilename_set, doc=r"""mMeshLayerFilename : p.q(const).char""")
    mCloudLayerHandle = property(_globalmapper.GM_P2PSetup_t_mCloudLayerHandle_get, _globalmapper.GM_P2PSetup_t_mCloudLayerHandle_set, doc=r"""mCloudLayerHandle : GM_LayerHandle_t32""")
    mImageLayerHandle = property(_globalmapper.GM_P2PSetup_t_mImageLayerHandle_get, _globalmapper.GM_P2PSetup_t_mImageLayerHandle_set, doc=r"""mImageLayerHandle : GM_LayerHandle_t32""")
    mMeshLayerHandle = property(_globalmapper.GM_P2PSetup_t_mMeshLayerHandle_get, _globalmapper.GM_P2PSetup_t_mMeshLayerHandle_set, doc=r"""mMeshLayerHandle : GM_LayerHandle_t32""")
    mErrorStr = property(_globalmapper.GM_P2PSetup_t_mErrorStr_get, _globalmapper.GM_P2PSetup_t_mErrorStr_set, doc=r"""mErrorStr : p.q(const).char""")
    mGpsFitError = property(_globalmapper.GM_P2PSetup_t_mGpsFitError_get, _globalmapper.GM_P2PSetup_t_mGpsFitError_set, doc=r"""mGpsFitError : GM_GpsFitError_t""")
    mReportFilename = property(_globalmapper.GM_P2PSetup_t_mReportFilename_get, _globalmapper.GM_P2PSetup_t_mReportFilename_set, doc=r"""mReportFilename : p.q(const).char""")
    mResultsStr = property(_globalmapper.GM_P2PSetup_t_mResultsStr_get, _globalmapper.GM_P2PSetup_t_mResultsStr_set, doc=r"""mResultsStr : p.q(const).char""")
    mColorHarmonizationRefFilename = property(_globalmapper.GM_P2PSetup_t_mColorHarmonizationRefFilename_get, _globalmapper.GM_P2PSetup_t_mColorHarmonizationRefFilename_set, doc=r"""mColorHarmonizationRefFilename : p.q(const).char""")
    mSceneClusterUpperBound = property(_globalmapper.GM_P2PSetup_t_mSceneClusterUpperBound_get, _globalmapper.GM_P2PSetup_t_mSceneClusterUpperBound_set, doc=r"""mSceneClusterUpperBound : int""")
    mSceneClusterLowerBound = property(_globalmapper.GM_P2PSetup_t_mSceneClusterLowerBound_get, _globalmapper.GM_P2PSetup_t_mSceneClusterLowerBound_set, doc=r"""mSceneClusterLowerBound : int""")
    mImageLayerResMult = property(_globalmapper.GM_P2PSetup_t_mImageLayerResMult_get, _globalmapper.GM_P2PSetup_t_mImageLayerResMult_set, doc=r"""mImageLayerResMult : double""")
    mImageLayerGapSize = property(_globalmapper.GM_P2PSetup_t_mImageLayerGapSize_get, _globalmapper.GM_P2PSetup_t_mImageLayerGapSize_set, doc=r"""mImageLayerGapSize : double""")
    mImageSamplingMethod = property(_globalmapper.GM_P2PSetup_t_mImageSamplingMethod_get, _globalmapper.GM_P2PSetup_t_mImageSamplingMethod_set, doc=r"""mImageSamplingMethod : GM_SamplingMethod_t8""")
    mMeshDecimateFactor = property(_globalmapper.GM_P2PSetup_t_mMeshDecimateFactor_get, _globalmapper.GM_P2PSetup_t_mMeshDecimateFactor_set, doc=r"""mMeshDecimateFactor : float""")
    mSfmMethod = property(_globalmapper.GM_P2PSetup_t_mSfmMethod_get, _globalmapper.GM_P2PSetup_t_mSfmMethod_set, doc=r"""mSfmMethod : GM_SfmMethod_t8""")
    mSfmQuality = property(_globalmapper.GM_P2PSetup_t_mSfmQuality_get, _globalmapper.GM_P2PSetup_t_mSfmQuality_set, doc=r"""mSfmQuality : GM_SfmQuality_t8""")
    mSfmInitializer = property(_globalmapper.GM_P2PSetup_t_mSfmInitializer_get, _globalmapper.GM_P2PSetup_t_mSfmInitializer_set, doc=r"""mSfmInitializer : GM_SfmInitializer_t8""")
    mSfmTriMethod = property(_globalmapper.GM_P2PSetup_t_mSfmTriMethod_get, _globalmapper.GM_P2PSetup_t_mSfmTriMethod_set, doc=r"""mSfmTriMethod : GM_SfmTriMethod_t8""")
    mSfmResection = property(_globalmapper.GM_P2PSetup_t_mSfmResection_get, _globalmapper.GM_P2PSetup_t_mSfmResection_set, doc=r"""mSfmResection : GM_SfmResection_t8""")
    mCameraModel = property(_globalmapper.GM_P2PSetup_t_mCameraModel_get, _globalmapper.GM_P2PSetup_t_mCameraModel_set, doc=r"""mCameraModel : GM_CameraModel_t8""")
    mDescriberMethod = property(_globalmapper.GM_P2PSetup_t_mDescriberMethod_get, _globalmapper.GM_P2PSetup_t_mDescriberMethod_set, doc=r"""mDescriberMethod : GM_SfmImageDescriberMethod_t8""")
    mDensifyReducePower = property(_globalmapper.GM_P2PSetup_t_mDensifyReducePower_get, _globalmapper.GM_P2PSetup_t_mDensifyReducePower_set, doc=r"""mDensifyReducePower : sint32""")
    mDensifyNumViews = property(_globalmapper.GM_P2PSetup_t_mDensifyNumViews_get, _globalmapper.GM_P2PSetup_t_mDensifyNumViews_set, doc=r"""mDensifyNumViews : sint32""")
    mDensifyNumViewsFuse = property(_globalmapper.GM_P2PSetup_t_mDensifyNumViewsFuse_get, _globalmapper.GM_P2PSetup_t_mDensifyNumViewsFuse_set, doc=r"""mDensifyNumViewsFuse : uint32""")

    def __repr__( self ) :
        attribs = gmobject_to_map( self )
        attribs['mControlPointList'] = carray_to_list(GM_P2PControlPoint_frompointer( self.mControlPointList ), self.mControlPointCount)

        return str( attribs )


    def __repr__( self ) :
        return str(gmobject_to_map(self))

    __swig_destroy__ = _globalmapper.delete_GM_P2PSetup_t


# Register GM_P2PSetup_t in _globalmapper:
_globalmapper.GM_P2PSetup_t_swigregister(GM_P2PSetup_t)

GM_ThinAlg_Min = _globalmapper.GM_ThinAlg_Min

GM_ThinAlg_Max = _globalmapper.GM_ThinAlg_Max

GM_ThinAlg_Med = _globalmapper.GM_ThinAlg_Med

GM_ThinAlg_3D = _globalmapper.GM_ThinAlg_3D

GM_ThinAlg_KeepNth = _globalmapper.GM_ThinAlg_KeepNth

GM_ThinAlg_SkipNth = _globalmapper.GM_ThinAlg_SkipNth

GM_ThinAlg_NumTypes = _globalmapper.GM_ThinAlg_NumTypes

[docs]
class GM_LidarSpatialThinSetup_t(object):
    r"""Proxy of C++ GM_LidarSpatialThinSetup_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(GM_LidarSpatialThinSetup_t self) -> GM_LidarSpatialThinSetup_t"""
        _globalmapper.GM_LidarSpatialThinSetup_t_swiginit(self, _globalmapper.new_GM_LidarSpatialThinSetup_t())
    mLayerDesc = property(_globalmapper.GM_LidarSpatialThinSetup_t_mLayerDesc_get, _globalmapper.GM_LidarSpatialThinSetup_t_mLayerDesc_set, doc=r"""mLayerDesc : p.q(const).char""")
    mMedianPercentile = property(_globalmapper.GM_LidarSpatialThinSetup_t_mMedianPercentile_get, _globalmapper.GM_LidarSpatialThinSetup_t_mMedianPercentile_set, doc=r"""mMedianPercentile : uint32""")
    mNthCount = property(_globalmapper.GM_LidarSpatialThinSetup_t_mNthCount_get, _globalmapper.GM_LidarSpatialThinSetup_t_mNthCount_set, doc=r"""mNthCount : uint32""")
    mResMult = property(_globalmapper.GM_LidarSpatialThinSetup_t_mResMult_get, _globalmapper.GM_LidarSpatialThinSetup_t_mResMult_set, doc=r"""mResMult : double""")
    mElevResMult = property(_globalmapper.GM_LidarSpatialThinSetup_t_mElevResMult_get, _globalmapper.GM_LidarSpatialThinSetup_t_mElevResMult_set, doc=r"""mElevResMult : float""")
    mKeepAllReturns = property(_globalmapper.GM_LidarSpatialThinSetup_t_mKeepAllReturns_get, _globalmapper.GM_LidarSpatialThinSetup_t_mKeepAllReturns_set, doc=r"""mKeepAllReturns : bool""")
    mCreateNewCloud = property(_globalmapper.GM_LidarSpatialThinSetup_t_mCreateNewCloud_get, _globalmapper.GM_LidarSpatialThinSetup_t_mCreateNewCloud_set, doc=r"""mCreateNewCloud : bool""")
    mThinAlg = property(_globalmapper.GM_LidarSpatialThinSetup_t_mThinAlg_get, _globalmapper.GM_LidarSpatialThinSetup_t_mThinAlg_set, doc=r"""mThinAlg : GM_SpatialThinAlg_t8""")
    mHideProgress = property(_globalmapper.GM_LidarSpatialThinSetup_t_mHideProgress_get, _globalmapper.GM_LidarSpatialThinSetup_t_mHideProgress_set, doc=r"""mHideProgress : bool""")
    mThinnedLayer = property(_globalmapper.GM_LidarSpatialThinSetup_t_mThinnedLayer_get, _globalmapper.GM_LidarSpatialThinSetup_t_mThinnedLayer_set, doc=r"""mThinnedLayer : GM_LayerHandle_t32""")
    mDeletedCount = property(_globalmapper.GM_LidarSpatialThinSetup_t_mDeletedCount_get, _globalmapper.GM_LidarSpatialThinSetup_t_mDeletedCount_set, doc=r"""mDeletedCount : uint64""")

    def __repr__( self ) :
        return str( gmobject_to_map( self ) )

    __swig_destroy__ = _globalmapper.delete_GM_LidarSpatialThinSetup_t


# Register GM_LidarSpatialThinSetup_t in _globalmapper:
_globalmapper.GM_LidarSpatialThinSetup_t_swigregister(GM_LidarSpatialThinSetup_t)

GM_LidarCompare_CheckOutsideBounds = _globalmapper.GM_LidarCompare_CheckOutsideBounds

GM_LidarCompare_CompareBothDirs = _globalmapper.GM_LidarCompare_CompareBothDirs

GM_LidarCompare_DelNewPoints = _globalmapper.GM_LidarCompare_DelNewPoints

GM_LidarCompare_CreateNewLayers = _globalmapper.GM_LidarCompare_CreateNewLayers

GM_LidarCompare_CreateNewQueries = _globalmapper.GM_LidarCompare_CreateNewQueries

GM_LidarCompare_HideProgress = _globalmapper.GM_LidarCompare_HideProgress

GM_LidarCompare_SaveDistInGeneric = _globalmapper.GM_LidarCompare_SaveDistInGeneric

GM_LidarCompare_DifferenceReportWindows = _globalmapper.GM_LidarCompare_DifferenceReportWindows

GM_LidarCompare_DifferenceReportText = _globalmapper.GM_LidarCompare_DifferenceReportText

GM_LidarCompare_Default = _globalmapper.GM_LidarCompare_Default

[docs]
class GM_LidarCompareSetup_t(object):
    r"""Proxy of C++ GM_LidarCompareSetup_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(GM_LidarCompareSetup_t self) -> GM_LidarCompareSetup_t"""
        _globalmapper.GM_LidarCompareSetup_t_swiginit(self, _globalmapper.new_GM_LidarCompareSetup_t())
    mFlags = property(_globalmapper.GM_LidarCompareSetup_t_mFlags_get, _globalmapper.GM_LidarCompareSetup_t_mFlags_set, doc=r"""mFlags : GM_LidarCompareFlags_t32""")
    mBoundsGlobal = property(_globalmapper.GM_LidarCompareSetup_t_mBoundsGlobal_get, _globalmapper.GM_LidarCompareSetup_t_mBoundsGlobal_set, doc=r"""mBoundsGlobal : GM_Rectangle_t""")
    mMaxDistResMult = property(_globalmapper.GM_LidarCompareSetup_t_mMaxDistResMult_get, _globalmapper.GM_LidarCompareSetup_t_mMaxDistResMult_set, doc=r"""mMaxDistResMult : float""")
    mMinNearbyNewCount = property(_globalmapper.GM_LidarCompareSetup_t_mMinNearbyNewCount_get, _globalmapper.GM_LidarCompareSetup_t_mMinNearbyNewCount_set, doc=r"""mMinNearbyNewCount : uint32""")
    mNewLayerDesc = property(_globalmapper.GM_LidarCompareSetup_t_mNewLayerDesc_get, _globalmapper.GM_LidarCompareSetup_t_mNewLayerDesc_set, doc=r"""mNewLayerDesc : p.q(const).char""")
    mQueryNewComparePoints = property(_globalmapper.GM_LidarCompareSetup_t_mQueryNewComparePoints_get, _globalmapper.GM_LidarCompareSetup_t_mQueryNewComparePoints_set, doc=r"""mQueryNewComparePoints : GM_LidarQueryHandle_t""")
    mQueryNewCompareToPoints = property(_globalmapper.GM_LidarCompareSetup_t_mQueryNewCompareToPoints_get, _globalmapper.GM_LidarCompareSetup_t_mQueryNewCompareToPoints_set, doc=r"""mQueryNewCompareToPoints : GM_LidarQueryHandle_t""")
    mNewComparePointsLayer = property(_globalmapper.GM_LidarCompareSetup_t_mNewComparePointsLayer_get, _globalmapper.GM_LidarCompareSetup_t_mNewComparePointsLayer_set, doc=r"""mNewComparePointsLayer : GM_LayerHandle_t32""")
    mNewCompareToPointsLayer = property(_globalmapper.GM_LidarCompareSetup_t_mNewCompareToPointsLayer_get, _globalmapper.GM_LidarCompareSetup_t_mNewCompareToPointsLayer_set, doc=r"""mNewCompareToPointsLayer : GM_LayerHandle_t32""")

    def __repr__( self ) :
        return str( gmobject_to_map( self ) )

    __swig_destroy__ = _globalmapper.delete_GM_LidarCompareSetup_t


# Register GM_LidarCompareSetup_t in _globalmapper:
_globalmapper.GM_LidarCompareSetup_t_swigregister(GM_LidarCompareSetup_t)

GM_LidarColorize_RGB = _globalmapper.GM_LidarColorize_RGB

GM_LidarColorize_RGBI = _globalmapper.GM_LidarColorize_RGBI

GM_LidarColorize_Inten = _globalmapper.GM_LidarColorize_Inten

GM_LidarColorize_NumFields = _globalmapper.GM_LidarColorize_NumFields

GM_LidarColorize_OverwriteExisting = _globalmapper.GM_LidarColorize_OverwriteExisting

GM_LidarColorize_Keep8BitValues = _globalmapper.GM_LidarColorize_Keep8BitValues

GM_LidarColorize_HideProgress = _globalmapper.GM_LidarColorize_HideProgress

GM_LidarColorize_UseAdjustedColors = _globalmapper.GM_LidarColorize_UseAdjustedColors

GM_LidarColorize_DefaultFlags = _globalmapper.GM_LidarColorize_DefaultFlags

GM_LidarColorizeInten_Gray = _globalmapper.GM_LidarColorizeInten_Gray

GM_LidarColorizeInten_Red = _globalmapper.GM_LidarColorizeInten_Red

GM_LidarColorizeInten_Green = _globalmapper.GM_LidarColorizeInten_Green

GM_LidarColorizeInten_Blue = _globalmapper.GM_LidarColorizeInten_Blue

GM_LidarColorizeInten_NumTypes = _globalmapper.GM_LidarColorizeInten_NumTypes

GM_LidarColorizeInten_Default = _globalmapper.GM_LidarColorizeInten_Default

[docs]
class GM_LidarColorizeSetup_t(object):
    r"""Proxy of C++ GM_LidarColorizeSetup_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(GM_LidarColorizeSetup_t self) -> GM_LidarColorizeSetup_t"""
        _globalmapper.GM_LidarColorizeSetup_t_swiginit(self, _globalmapper.new_GM_LidarColorizeSetup_t())
    mFields = property(_globalmapper.GM_LidarColorizeSetup_t_mFields_get, _globalmapper.GM_LidarColorizeSetup_t_mFields_set, doc=r"""mFields : GM_LidarColorizeFields_t8""")
    mFlags = property(_globalmapper.GM_LidarColorizeSetup_t_mFlags_get, _globalmapper.GM_LidarColorizeSetup_t_mFlags_set, doc=r"""mFlags : GM_LidarColorizeFlags_t8""")
    mIntensityMethod = property(_globalmapper.GM_LidarColorizeSetup_t_mIntensityMethod_get, _globalmapper.GM_LidarColorizeSetup_t_mIntensityMethod_set, doc=r"""mIntensityMethod : GM_LidarColorizeIntensity_t8""")
    mNumModifiedPoints = property(_globalmapper.GM_LidarColorizeSetup_t_mNumModifiedPoints_get, _globalmapper.GM_LidarColorizeSetup_t_mNumModifiedPoints_set, doc=r"""mNumModifiedPoints : uint64""")

    def __repr__( self ) :
        return str( gmobject_to_map( self ) )

    __swig_destroy__ = _globalmapper.delete_GM_LidarColorizeSetup_t


# Register GM_LidarColorizeSetup_t in _globalmapper:
_globalmapper.GM_LidarColorizeSetup_t_swigregister(GM_LidarColorizeSetup_t)

GM_SSI_UseLayerForFlightLine = _globalmapper.GM_SSI_UseLayerForFlightLine

GM_SSI_HideProgress = _globalmapper.GM_SSI_HideProgress

GM_SSI_SaveDebugLayers = _globalmapper.GM_SSI_SaveDebugLayers

GM_SSI_SaveWorldFile = _globalmapper.GM_SSI_SaveWorldFile

GM_SSI_SavePRJFile = _globalmapper.GM_SSI_SavePRJFile

GM_SSI_LoadGeneratedImage = _globalmapper.GM_SSI_LoadGeneratedImage

GM_SSI_DefaultFlags = _globalmapper.GM_SSI_DefaultFlags

[docs]
class GM_SwathSeparationImageSetup_t(object):
    r"""Proxy of C++ GM_SwathSeparationImageSetup_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(GM_SwathSeparationImageSetup_t self) -> GM_SwathSeparationImageSetup_t"""
        _globalmapper.GM_SwathSeparationImageSetup_t_swiginit(self, _globalmapper.new_GM_SwathSeparationImageSetup_t())
    mFlags = property(_globalmapper.GM_SwathSeparationImageSetup_t_mFlags_get, _globalmapper.GM_SwathSeparationImageSetup_t_mFlags_set, doc=r"""mFlags : GM_SwathSeparationImageFlags_t32""")
    mPointCloudLayerList = property(_globalmapper.GM_SwathSeparationImageSetup_t_mPointCloudLayerList_get, _globalmapper.GM_SwathSeparationImageSetup_t_mPointCloudLayerList_set, doc=r"""mPointCloudLayerList : p.GM_LayerHandle_t32""")
    mPointCloudLayerListCount = property(_globalmapper.GM_SwathSeparationImageSetup_t_mPointCloudLayerListCount_get, _globalmapper.GM_SwathSeparationImageSetup_t_mPointCloudLayerListCount_set, doc=r"""mPointCloudLayerListCount : uint32""")
    mBounds = property(_globalmapper.GM_SwathSeparationImageSetup_t_mBounds_get, _globalmapper.GM_SwathSeparationImageSetup_t_mBounds_set, doc=r"""mBounds : p.q(const).GM_Rectangle_t""")
    mClassFilter = property(_globalmapper.GM_SwathSeparationImageSetup_t_mClassFilter_get, _globalmapper.GM_SwathSeparationImageSetup_t_mClassFilter_set, doc=r"""mClassFilter : GM_LidarClassFilter_t""")
    mReturnMask = property(_globalmapper.GM_SwathSeparationImageSetup_t_mReturnMask_get, _globalmapper.GM_SwathSeparationImageSetup_t_mReturnMask_set, doc=r"""mReturnMask : GM_LidarReturnMask_t32""")
    mGridAlg = property(_globalmapper.GM_SwathSeparationImageSetup_t_mGridAlg_get, _globalmapper.GM_SwathSeparationImageSetup_t_mGridAlg_set, doc=r"""mGridAlg : GM_GridAlg_t8""")
    mGridBinMult = property(_globalmapper.GM_SwathSeparationImageSetup_t_mGridBinMult_get, _globalmapper.GM_SwathSeparationImageSetup_t_mGridBinMult_set, doc=r"""mGridBinMult : double""")
    mShaderName = property(_globalmapper.GM_SwathSeparationImageSetup_t_mShaderName_get, _globalmapper.GM_SwathSeparationImageSetup_t_mShaderName_set, doc=r"""mShaderName : p.q(const).char""")
    __swig_destroy__ = _globalmapper.delete_GM_SwathSeparationImageSetup_t


# Register GM_SwathSeparationImageSetup_t in _globalmapper:
_globalmapper.GM_SwathSeparationImageSetup_t_swigregister(GM_SwathSeparationImageSetup_t)

[docs]
class GM_LidarSmoothSetup_t(object):
    r"""Proxy of C++ GM_LidarSmoothSetup_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(GM_LidarSmoothSetup_t self) -> GM_LidarSmoothSetup_t"""
        _globalmapper.GM_LidarSmoothSetup_t_swiginit(self, _globalmapper.new_GM_LidarSmoothSetup_t())
    mShowErrors = property(_globalmapper.GM_LidarSmoothSetup_t_mShowErrors_get, _globalmapper.GM_LidarSmoothSetup_t_mShowErrors_set, doc=r"""mShowErrors : bool""")
    mHideProgress = property(_globalmapper.GM_LidarSmoothSetup_t_mHideProgress_get, _globalmapper.GM_LidarSmoothSetup_t_mHideProgress_set, doc=r"""mHideProgress : bool""")
    mSearchDistM = property(_globalmapper.GM_LidarSmoothSetup_t_mSearchDistM_get, _globalmapper.GM_LidarSmoothSetup_t_mSearchDistM_set, doc=r"""mSearchDistM : double""")
    mAdjustPercent = property(_globalmapper.GM_LidarSmoothSetup_t_mAdjustPercent_get, _globalmapper.GM_LidarSmoothSetup_t_mAdjustPercent_set, doc=r"""mAdjustPercent : sint32""")
    mAdjustXY = property(_globalmapper.GM_LidarSmoothSetup_t_mAdjustXY_get, _globalmapper.GM_LidarSmoothSetup_t_mAdjustXY_set, doc=r"""mAdjustXY : bool""")
    mOnlyAdjustZLower = property(_globalmapper.GM_LidarSmoothSetup_t_mOnlyAdjustZLower_get, _globalmapper.GM_LidarSmoothSetup_t_mOnlyAdjustZLower_set, doc=r"""mOnlyAdjustZLower : bool""")
    mOnlySameClass = property(_globalmapper.GM_LidarSmoothSetup_t_mOnlySameClass_get, _globalmapper.GM_LidarSmoothSetup_t_mOnlySameClass_set, doc=r"""mOnlySameClass : bool""")
    mModCount = property(_globalmapper.GM_LidarSmoothSetup_t_mModCount_get, _globalmapper.GM_LidarSmoothSetup_t_mModCount_set, doc=r"""mModCount : uint64""")
    __swig_destroy__ = _globalmapper.delete_GM_LidarSmoothSetup_t


# Register GM_LidarSmoothSetup_t in _globalmapper:
_globalmapper.GM_LidarSmoothSetup_t_swigregister(GM_LidarSmoothSetup_t)

GM_SpatialOps_Intersection = _globalmapper.GM_SpatialOps_Intersection

GM_SpatialOps_Union = _globalmapper.GM_SpatialOps_Union

GM_SpatialOps_Difference = _globalmapper.GM_SpatialOps_Difference

GM_SpatialOps_SymmetricDifference = _globalmapper.GM_SpatialOps_SymmetricDifference

GM_SpatialPredicates_None = _globalmapper.GM_SpatialPredicates_None

GM_SpatialPredicates_Intersects = _globalmapper.GM_SpatialPredicates_Intersects

GM_SpatialPredicates_Overlaps = _globalmapper.GM_SpatialPredicates_Overlaps

GM_SpatialPredicates_Touches = _globalmapper.GM_SpatialPredicates_Touches

GM_SpatialPredicates_Contains = _globalmapper.GM_SpatialPredicates_Contains

GM_SpatialPredicates_IsEqual = _globalmapper.GM_SpatialPredicates_IsEqual

GM_SpatialPredicates_IsWithin = _globalmapper.GM_SpatialPredicates_IsWithin

GM_SpatialPredicates_IsDisjoint = _globalmapper.GM_SpatialPredicates_IsDisjoint

GM_SpatialPredicates_Crosses = _globalmapper.GM_SpatialPredicates_Crosses

GM_SpatialPredicates_Covers = _globalmapper.GM_SpatialPredicates_Covers

GM_SpatialPredicates_IsCoveredBy = _globalmapper.GM_SpatialPredicates_IsCoveredBy

GM_SpatialPredicates_Relate = _globalmapper.GM_SpatialPredicates_Relate

GM_SpatialTransform_MBR = _globalmapper.GM_SpatialTransform_MBR

GM_SpatialTransform_Center = _globalmapper.GM_SpatialTransform_Center

GM_SpatialTransform_ConvexHull = _globalmapper.GM_SpatialTransform_ConvexHull

GM_SpatialTransform_ConcaveHull = _globalmapper.GM_SpatialTransform_ConcaveHull

GM_SpatialTransform_Buffer = _globalmapper.GM_SpatialTransform_Buffer

GM_SpatialTransform_Centroid = _globalmapper.GM_SpatialTransform_Centroid

GM_SpatialTransform_Circle = _globalmapper.GM_SpatialTransform_Circle

GM_FilterIncludeAreas = _globalmapper.GM_FilterIncludeAreas

GM_FilterIncludeLines = _globalmapper.GM_FilterIncludeLines

GM_FilterIncludePoints = _globalmapper.GM_FilterIncludePoints

GM_FilterIncludeAll = _globalmapper.GM_FilterIncludeAll

GM_FilterIncludeOnlySelected = _globalmapper.GM_FilterIncludeOnlySelected

GM_PredicateResult_CreateNewSelection = _globalmapper.GM_PredicateResult_CreateNewSelection

GM_PredicateResult_AddToSelection = _globalmapper.GM_PredicateResult_AddToSelection

GM_PredicateResult_RemoveFromSelection = _globalmapper.GM_PredicateResult_RemoveFromSelection

GM_PredicateResult_CreateNewLayer = _globalmapper.GM_PredicateResult_CreateNewLayer

GM_PredicateResult_ReturnFeatures = _globalmapper.GM_PredicateResult_ReturnFeatures

GM_PredicateResult_InvertSelection = _globalmapper.GM_PredicateResult_InvertSelection

GM_SpatialOps_OnErrorHalt = _globalmapper.GM_SpatialOps_OnErrorHalt

GM_SpatialOps_OnErrorSkip = _globalmapper.GM_SpatialOps_OnErrorSkip

GM_SpatialOps_OnErrorIgnore = _globalmapper.GM_SpatialOps_OnErrorIgnore

GM_GroupingNone = _globalmapper.GM_GroupingNone

GM_GroupingPartition = _globalmapper.GM_GroupingPartition

GM_GroupingAll = _globalmapper.GM_GroupingAll

GM_PredicateMatchAll = _globalmapper.GM_PredicateMatchAll

GM_PredicateMatchAny = _globalmapper.GM_PredicateMatchAny

[docs]
class GM_Distance_t(object):
    r"""Proxy of C++ GM_Distance_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(GM_Distance_t self) -> GM_Distance_t"""
        _globalmapper.GM_Distance_t_swiginit(self, _globalmapper.new_GM_Distance_t())
    mDistance = property(_globalmapper.GM_Distance_t_mDistance_get, _globalmapper.GM_Distance_t_mDistance_set, doc=r"""mDistance : double""")
    mUnits = property(_globalmapper.GM_Distance_t_mUnits_get, _globalmapper.GM_Distance_t_mUnits_set, doc=r"""mUnits : UNIT""")
    __swig_destroy__ = _globalmapper.delete_GM_Distance_t


# Register GM_Distance_t in _globalmapper:
_globalmapper.GM_Distance_t_swigregister(GM_Distance_t)

[docs]
class GM_SpatialOps_Params_t(object):
    r"""Proxy of C++ GM_SpatialOps_Params_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(GM_SpatialOps_Params_t self) -> GM_SpatialOps_Params_t"""
        _globalmapper.GM_SpatialOps_Params_t_swiginit(self, _globalmapper.new_GM_SpatialOps_Params_t())
    mFeatureTypes1 = property(_globalmapper.GM_SpatialOps_Params_t_mFeatureTypes1_get, _globalmapper.GM_SpatialOps_Params_t_mFeatureTypes1_set, doc=r"""mFeatureTypes1 : GM_FeatureFilters_t8""")
    mFeatureTypes2 = property(_globalmapper.GM_SpatialOps_Params_t_mFeatureTypes2_get, _globalmapper.GM_SpatialOps_Params_t_mFeatureTypes2_set, doc=r"""mFeatureTypes2 : GM_FeatureFilters_t8""")
    mPredicateResultTarget = property(_globalmapper.GM_SpatialOps_Params_t_mPredicateResultTarget_get, _globalmapper.GM_SpatialOps_Params_t_mPredicateResultTarget_set, doc=r"""mPredicateResultTarget : GM_PredicateResultTargets_t8""")
    mResultLayerName = property(_globalmapper.GM_SpatialOps_Params_t_mResultLayerName_get, _globalmapper.GM_SpatialOps_Params_t_mResultLayerName_set, doc=r"""mResultLayerName : p.q(const).char""")
    mResultFeatures = property(_globalmapper.GM_SpatialOps_Params_t_mResultFeatures_get, _globalmapper.GM_SpatialOps_Params_t_mResultFeatures_set, doc=r"""mResultFeatures : GM_FoundFeatureResults_t""")
    mResultLayer = property(_globalmapper.GM_SpatialOps_Params_t_mResultLayer_get, _globalmapper.GM_SpatialOps_Params_t_mResultLayer_set, doc=r"""mResultLayer : GM_LayerHandle_t32""")
    mResultFeatureTypes = property(_globalmapper.GM_SpatialOps_Params_t_mResultFeatureTypes_get, _globalmapper.GM_SpatialOps_Params_t_mResultFeatureTypes_set, doc=r"""mResultFeatureTypes : GM_FeatureFilters_t8""")
    mResultLayerIsTemp = property(_globalmapper.GM_SpatialOps_Params_t_mResultLayerIsTemp_get, _globalmapper.GM_SpatialOps_Params_t_mResultLayerIsTemp_set, doc=r"""mResultLayerIsTemp : bool""")
    mErrorHandling = property(_globalmapper.GM_SpatialOps_Params_t_mErrorHandling_get, _globalmapper.GM_SpatialOps_Params_t_mErrorHandling_set, doc=r"""mErrorHandling : GM_SpatialOps_Errorhandling_t8""")
    mAttemptRepair = property(_globalmapper.GM_SpatialOps_Params_t_mAttemptRepair_get, _globalmapper.GM_SpatialOps_Params_t_mAttemptRepair_set, doc=r"""mAttemptRepair : bool""")
    mLogCallback = property(_globalmapper.GM_SpatialOps_Params_t_mLogCallback_get, _globalmapper.GM_SpatialOps_Params_t_mLogCallback_set, doc=r"""mLogCallback : GM_MessageCallbackFunc""")

    def __repr__( self ) :
        return str( gmobject_to_map( self ) )

    __swig_destroy__ = _globalmapper.delete_GM_SpatialOps_Params_t


# Register GM_SpatialOps_Params_t in _globalmapper:
_globalmapper.GM_SpatialOps_Params_t_swigregister(GM_SpatialOps_Params_t)

[docs]
class PyGMException(object):
    r"""Proxy of C++ PyGMException class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    code = property(_globalmapper.PyGMException_code_get, _globalmapper.PyGMException_code_set, doc=r"""code : GM_Error_t32""")
    message = property(_globalmapper.PyGMException_message_get, _globalmapper.PyGMException_message_set, doc=r"""message : p.char""")

    def __init__(self):
        r"""__init__(PyGMException self) -> PyGMException"""
        _globalmapper.PyGMException_swiginit(self, _globalmapper.new_PyGMException())
    __swig_destroy__ = _globalmapper.delete_PyGMException


# Register PyGMException in _globalmapper:
_globalmapper.PyGMException_swigregister(PyGMException)


[docs]
def LoadGenericAsciiTextLayer(aFilename: "char const *", aLoadFlags: "GM_LoadFlags_t32", aFormatInfo: "GM_AsciiFormatInfo_t", aProj: "GM_Projection_t") -> "GM_LayerHandle_t32 *":
    r"""
    LoadGenericAsciiTextLayer(str aFilename, GM_LoadFlags_t32 aLoadFlags, GM_AsciiFormatInfo_t aFormatInfo, GM_Projection_t aProj) -> GM_Error_t32, GM_LayerHandle_t32

    	Parameters
    	----------
    	aFilename: str
    	aLoadFlags: GM_LoadFlags_t32
    	aFormatInfo: GM_AsciiFormatInfo_t
    	aProj: GM_Projection_t


    """
    return _globalmapper.LoadGenericAsciiTextLayer(aFilename, aLoadFlags, aFormatInfo, aProj)


[docs]
def CloseLayer(aLayer: "GM_LayerHandle_t32") -> "GM_Error_t32":
    r"""
    CloseLayer(GM_LayerHandle_t32 aLayer) -> GM_Error_t32

    	Parameters
    	----------
    	aLayer: GM_LayerHandle_t32


    """
    return _globalmapper.CloseLayer(aLayer)


[docs]
def ClosePackage(aPackage: "GM_PackageHandle_t32") -> "GM_Error_t32":
    r"""
    ClosePackage(GM_PackageHandle_t32 aPackage) -> GM_Error_t32

    	Parameters
    	----------
    	aPackage: GM_PackageHandle_t32


    """
    return _globalmapper.ClosePackage(aPackage)


[docs]
def FlushLayerCache(aLayer: "GM_LayerHandle_t32") -> "GM_Error_t32":
    r"""
    FlushLayerCache(GM_LayerHandle_t32 aLayer) -> GM_Error_t32

    	Parameters
    	----------
    	aLayer: GM_LayerHandle_t32


    """
    return _globalmapper.FlushLayerCache(aLayer)


[docs]
def GetAvailableOnlineSourceList() -> "unsigned long *":
    r"""GetAvailableOnlineSourceList() -> GM_OnlineSourceInfo_t, uint32"""
    return _globalmapper.GetAvailableOnlineSourceList()


[docs]
def GetOnlineLayerLocationMetadata(*args) -> "char *":
    r"""
    GetOnlineLayerLocationMetadata(GM_LayerHandle_t32 aLayer, float aXCoord, float aYCoord, uint32 aReserved=0) -> GM_Error_t32, str

    	Parameters
    	----------
    	aLayer: GM_LayerHandle_t32
    	aXCoord: float
    	aYCoord: float
    	aReserved: uint32


    """
    return _globalmapper.GetOnlineLayerLocationMetadata(*args)


[docs]
def GetLayerInfo(aLayer: "GM_LayerHandle_t32") -> "GM_LayerInfo_t const *":
    r"""
    GetLayerInfo(GM_LayerHandle_t32 aLayer) -> GM_LayerInfo_t

    	Parameters
    	----------
    	aLayer: GM_LayerHandle_t32


    """
    return _globalmapper.GetLayerInfo(aLayer)


[docs]
def GetLoadedLayerList() -> "unsigned long *":
    r"""GetLoadedLayerList() -> GM_LayerHandle_t32, int"""
    return _globalmapper.GetLoadedLayerList()


[docs]
def FindLoadedLayer(aFilename: "char const *") -> "GM_LayerHandle_t32":
    r"""
    FindLoadedLayer(char const * aFilename) -> GM_LayerHandle_t32

    Parameters
    ----------
    aFilename: char const *

    """
    return _globalmapper.FindLoadedLayer(aFilename)


[docs]
def GetOnlineSourceInfo(*args) -> "GM_OnlineSourceInfo_t *":
    r"""
    GetOnlineSourceInfo(str aSourceName, uint32 aReserved=0) -> GM_Error_t32, GM_OnlineSourceInfo_t

    	Parameters
    	----------
    	aSourceName: str
    	aReserved: uint32


    """
    return _globalmapper.GetOnlineSourceInfo(*args)


[docs]
def GetPackageLayerList(aPackage: "GM_PackageHandle_t32") -> "unsigned long *":
    r"""
    GetPackageLayerList(GM_PackageHandle_t32 aPackage) -> GM_LayerHandle_t32

    	Parameters
    	----------
    	aPackage: GM_PackageHandle_t32


    """
    return _globalmapper.GetPackageLayerList(aPackage)


[docs]
def LoadLayer(aFilename: "char const *", aLoadFlags: "GM_LoadFlags_t32") -> "GM_LayerHandle_t32 *":
    r"""
    LoadLayer(str aFilename, GM_LoadFlags_t32 aLoadFlags) -> GM_Error_t32, GM_LayerHandle_t

    	Parameters
    	----------
    	aFilename: str
    	aLoadFlags: GM_LoadFlags_t32


    """
    return _globalmapper.LoadLayer(aFilename, aLoadFlags)


[docs]
def LoadLayerList(aFilename: "char const *", aLoadFlags: "GM_LoadFlags_t32") -> "uint32 *":
    r"""
    LoadLayerList(str aFilename, GM_LoadFlags_t32 aLoadFlags) -> GM_Error_t32, GM_LayerHandle_t32, unint32

    	Parameters
    	----------
    	aFilename: str
    	aLoadFlags: GM_LoadFlags_t32


    """
    return _globalmapper.LoadLayerList(aFilename, aLoadFlags)


[docs]
def LoadLayerListEx(aFilename: "char const *", aLoadFlags: "GM_LoadFlags_t32", aExtraLoadOptions: "char const *") -> "uint32 *":
    r"""
    LoadLayerListEx(str aFilename, GM_LoadFlags_t32 aLoadFlags, str aExtraLoadOptions) -> GM_Error_t32, GM_LayerHandle_t32, uint32

    	Parameters
    	----------
    	aFilename: str
    	aLoadFlags: GM_LoadFlags_t32
    	aExtraLoadOptions: str


    """
    return _globalmapper.LoadLayerListEx(aFilename, aLoadFlags, aExtraLoadOptions)


[docs]
def LoadOnlineLayer(aSourceName: "char const *", aLatLonRect: "GM_Rectangle_t", aExtraLoadOptions: "char const *") -> "GM_LayerHandle_t32 *":
    r"""
    LoadOnlineLayer(str aSourceName, GM_Rectangle_t aLatLonRect, str aExtraLoadOptions) -> GM_Error_t32, GM_LayerHandle_t32

    	Parameters
    	----------
    	aSourceName: str
    	aLatLonRect: GM_Rectangle_t
    	aExtraLoadOptions: str


    """
    return _globalmapper.LoadOnlineLayer(aSourceName, aLatLonRect, aExtraLoadOptions)


[docs]
def LoadPackage(aFilename: "char const *", aLoadFlags: "GM_LoadFlags_t32") -> "GM_PackageHandle_t32 *":
    r"""
    LoadPackage(str aFilename, GM_LoadFlags_t32 aLoadFlags) -> GM_Error_t32, GM_PackageHandle_t32

    	Parameters
    	----------
    	aFilename: str
    	aLoadFlags: GM_LoadFlags_t32


    """
    return _globalmapper.LoadPackage(aFilename, aLoadFlags)


[docs]
def LoadRectifiedLayer(aFilename: "char const *", aLoadFlags: "GM_LoadFlags_t32", aGCPList: "GM_GroundControlPoint_t", aNumGCPs: "uint32", aProj: "GM_Projection_t") -> "GM_LayerHandle_t32 *":
    r"""
    LoadRectifiedLayer(str aFilename, GM_LoadFlags_t32 aLoadFlags, GM_GroundControlPoint_t aGCPList, uint32 aNumGCPs, GM_Projection_t aProj) -> GM_Error_t32, GM_LayerHandle_t32

    	Parameters
    	----------
    	aFilename: str
    	aLoadFlags: GM_LoadFlags_t32
    	aGCPList: GM_GroundControlPoint_t
    	aNumGCPs: uint32
    	aProj: GM_Projection_t


    """
    return _globalmapper.LoadRectifiedLayer(aFilename, aLoadFlags, aGCPList, aNumGCPs, aProj)


def LoadTerraServerLayer(aThemeName: "char const *", aLatLonRect: "GM_Rectangle_t") -> "GM_LayerHandle_t32 *":
    r"""
    LoadTerraServerLayer(char const * aThemeName, GM_Rectangle_t aLatLonRect) -> GM_Error_t32

    Parameters
    ----------
    aThemeName: char const *
    aLatLonRect: GM_Rectangle_t const *

    """
    return _globalmapper.LoadTerraServerLayer(aThemeName, aLatLonRect)

[docs]
def RepositionLayer(aLayer: "GM_LayerHandle_t32", aGCPList: "GM_GroundControlPoint_t", aNumGCPs: "uint32", aProj: "GM_Projection_t") -> "GM_Error_t32":
    r"""
    RepositionLayer(GM_LayerHandle_t32 aLayer, GM_GroundControlPoint_t aGCPList, uint32 aNumGCPs, GM_Projection_t aProj) -> GM_Error_t32

    	Parameters
    	----------
    	aLayer: GM_LayerHandle_t32
    	aGCPList: GM_GroundControlPoint_t
    	aNumGCPs: uint32
    	aProj: GM_Projection_t


    """
    return _globalmapper.RepositionLayer(aLayer, aGCPList, aNumGCPs, aProj)


[docs]
def RestoreDefaultSettings() -> "void":
    r"""RestoreDefaultSettings() -> None"""
    return _globalmapper.RestoreDefaultSettings()


[docs]
def RunScript(*args) -> "uint32 *":
    r"""
    RunScript(str aFilenameOrText, GM_LoadFlags_t32 aLoadFlags, uint32 aReserved=0) -> GM_Error_t32, GM_LayerHandle_t32, uint32

    	Parameters
    	----------
    	aFilenameOrText: str
    	aLoadFlags: GM_LoadFlags_t32
    	aReserved: uint32


    """
    return _globalmapper.RunScript(*args)


[docs]
def SaveWorkspace(*args) -> "GM_Error_t32":
    r"""
    SaveWorkspace(str aFilename, uint32 aReserved=0) -> GM_Error_t32

    	Parameters
    	----------
    	aFilename: str
    	aReserved: uint32


    """
    return _globalmapper.SaveWorkspace(*args)


[docs]
def SaveWorkspaceEx(*args) -> "GM_Error_t32":
    r"""
    SaveWorkspaceEx(str aFilename, [GM_LayerHandle_t32] aLayerList, uint32 aReserved=0) -> GM_Error_t32

    	Parameters
    	----------
    	aFilename: str
    	aLayerList: [GM_LayerHandle_t32]
    	aReserved: uint32


    """
    return _globalmapper.SaveWorkspaceEx(*args)


[docs]
def SetChildLayerOpCallback(aCallbackFunc: "GM_ChildLayerOpCallbackFunc") -> "void":
    r"""
    SetChildLayerOpCallback((function aCallbackFunc, object aUserData)) -> None

    	Parameters
    	----------
    	aCallbackFunc: function
    	aUserData : object


    """
    return _globalmapper.SetChildLayerOpCallback(aCallbackFunc)


[docs]
def AddCustomShader(aShader: "GM_CustomShader_t", aReserved: "uint32") -> "GM_Error_t32":
    r"""
    AddCustomShader(GM_CustomShader_t aShader, uint32 aReserved=0) -> GM_Error_t32

    	Parameters
    	----------
    	aShader: GM_CustomShader_t
    	aReserved : uint32


    """
    return _globalmapper.AddCustomShader(aShader, aReserved)


[docs]
def CropLayerCollar(aLayer: "GM_LayerHandle_t32", aCropCollar: "boolean") -> "GM_Error_t32":
    r"""
    CropLayerCollar(GM_LayerHandle_t32 aLayer, boolean aCropCollar) -> GM_Error_t32

    	Parameters
    	----------
    	aLayer: GM_LayerHandle_t32
    	aCropCollar : boolean


    """
    return _globalmapper.CropLayerCollar(aLayer, aCropCollar)


[docs]
def GetBackgroundColor() -> "COLORREF":
    r"""GetBackgroundColor() -> COLORREF"""
    return _globalmapper.GetBackgroundColor()


[docs]
def DrawGridLines(aDC: "HDC", aLatLonGrid: "boolean", aGridSpacing: "double", aWorldBounds: "GM_Rectangle_t", aLeftPixel: "sint32", aTopPixel: "sint32", aPixelWidth: "sint32", aPixelHeight: "sint32") -> "GM_Error_t32":
    r"""
    DrawGridLines(HDC aDC, boolean aLatLonGrid, float aGridSpacing, GM_Rectangle_t aWorldBounds, sint32 aLeftPixel, sint32 aTopPixel, sint32 aPixelWidth, sint32 aPixelHeight) -> GM_Error_t32

    	Parameters
    	----------
    	aDC: HDC
    	aLatLonGrid : boolean
    	aGridSpacing : float
    	aWorldBounds : GM_Rectangle_t
    	aLeftPixel : sint32
    	aTopPixel : sint32
    	aPixelWidth : sint32
    	aPixelHeight : sint32


    """
    return _globalmapper.DrawGridLines(aDC, aLatLonGrid, aGridSpacing, aWorldBounds, aLeftPixel, aTopPixel, aPixelWidth, aPixelHeight)


[docs]
def DrawGridLinesEx(aDC: "HDC", aLatLonGrid: "boolean", aGridSpacing: "double", aWorldBounds: "GM_Rectangle_t", aLeftPixel: "sint32", aTopPixel: "sint32", aPixelWidth: "sint32", aPixelHeight: "sint32", aMaxGridBounds: "GM_Rectangle_t") -> "GM_Error_t32":
    r"""
    DrawGridLinesEx(HDC aDC, boolean aLatLonGrid, float aGridSpacing, GM_Rectangle_t aWorldBounds, sint32 aLeftPixel, sint32 aTopPixel, sint32 aPixelWidth, sint32 aPixelHeight, GM_Rectangle_t aMaxGridBounds) -> GM_Error_t32

    	Parameters
    	----------
    	aDC: HDC
    	aLatLonGrid : boolean
    	aGridSpacing : float
    	aWorldBounds : GM_Rectangle_t
    	aLeftPixel : sint32
    	aTopPixel : sint32
    	aPixelWidth : sint32
    	aPixelHeight : sint32
    	aMaxGridBounds : GM_Rectangle_t


    """
    return _globalmapper.DrawGridLinesEx(aDC, aLatLonGrid, aGridSpacing, aWorldBounds, aLeftPixel, aTopPixel, aPixelWidth, aPixelHeight, aMaxGridBounds)


[docs]
def DrawLayer(aDC: "HDC", aLayer: "GM_LayerHandle_t32", aWorldBounds: "GM_Rectangle_t", aLeftPixel: "sint32", aTopPixel: "sint32", aPixelWidth: "sint32", aPixelHeight: "sint32") -> "GM_Error_t32":
    r"""
    DrawLayer(HDC aDC, GM_LayerHandle_t32 aLayer, GM_Rectangle_t aWorldBounds, sint32 aLeftPixel, sint32 aTopPixel, sint32 aPixelWidth, sint32 aPixelHeight) -> GM_Error_t32

    	Parameters
    	----------
    	aDC: HDC
    	aLayer : GM_LayerHandle_t32
    	aWorldBounds : GM_Rectangle_t
    	aLeftPixel : sint32
    	aTopPixel : sint32
    	aPixelWidth : sint32
    	aPixelHeight : sint32


    """
    return _globalmapper.DrawLayer(aDC, aLayer, aWorldBounds, aLeftPixel, aTopPixel, aPixelWidth, aPixelHeight)


[docs]
def DrawLayerList(aDC: "HDC", aLayerList: "GM_LayerHandle_t32 *", aDrawFlags: "GM_DrawFlags_t32", aWorldBounds: "GM_Rectangle_t", aLeftPixel: "sint32", aTopPixel: "sint32", aPixelWidth: "sint32", aPixelHeight: "sint32") -> "GM_Error_t32":
    r"""
    DrawLayerList(HDC aDC, [GM_LayerHandle_t32] aLayerList, GM_DrawFlags_t32 aDrawFlags, GM_Rectangle_t aWorldBounds, sint32 aLeftPixel, sint32 aTopPixel, sint32 aPixelWidth, sint32 aPixelHeight) -> GM_Error_t32

    	Parameters
    	----------
    	aDC: HDC
    	aLayerList : [GM_LayerHandle_t32]
    	aDrawFlags : GM_DrawFlags_t32
    	aWorldBounds : GM_Rectangle_t
    	aLeftPixel : sint32
    	aTopPixel : sint32
    	aPixelWidth : sint32
    	aPixelHeight : sint32


    """
    return _globalmapper.DrawLayerList(aDC, aLayerList, aDrawFlags, aWorldBounds, aLeftPixel, aTopPixel, aPixelWidth, aPixelHeight)


[docs]
def DrawLayerListEx(aDC: "HDC", aLayerList: "GM_LayerHandle_t32 *", aDrawFlags: "GM_DrawFlags_t32", aWorldBounds: "GM_Rectangle_t", aLeftPixel: "sint32", aTopPixel: "sint32", aPixelWidth: "sint32", aPixelHeight: "sint32", aExtraOpts: "char const *") -> "GM_Error_t32":
    r"""
    DrawLayerListEx(HDC aDC, [GM_LayerHandle_t32] aLayerList, GM_DrawFlags_t32 aDrawFlags, GM_Rectangle_t aWorldBounds, sint32 aLeftPixel, sint32 aTopPixel, sint32 aPixelWidth, sint32 aPixelHeight, str aExtraOpts) -> GM_Error_t32

    	Parameters
    	----------
    	aDC: HDC
    	aLayerList: [GM_LayerHandle_t32]
    	aDrawFlags: GM_DrawFlags_t32
    	aWorldBounds: GM_Rectangle_t
    	aLeftPixel: sint32
    	aTopPixel: sint32
    	aPixelWidth: sint32
    	aPixelHeight: sint32
    	aExtraOpts: str


    """
    return _globalmapper.DrawLayerListEx(aDC, aLayerList, aDrawFlags, aWorldBounds, aLeftPixel, aTopPixel, aPixelWidth, aPixelHeight, aExtraOpts)


[docs]
def DrawLayerListToMemory(aLayerList: "GM_LayerHandle_t32 *", aDrawFlags: "GM_DrawFlags_t32", aWorldBounds: "GM_Rectangle_t", aColorFormat: "GM_ColorFormat_t32", aPixelWidth: "sint32", aPixelHeight: "sint32", aDataBuf: "void *", aRowWidthBytes: "sint32") -> "GM_Error_t32":
    r"""
    DrawLayerListToMemory([GM_LayerHandle_t32] aLayerList, GM_DrawFlags_t32 aDrawFlags, GM_Rectangle_t aWorldBounds, GM_ColorFormat_t32 aColorFormat, sint32 aPixelWidth, sint32 aPixelHeight, int aDataBuf, sint32 aRowWidthBytes) -> GM_Error_t32

    	Parameters
    	----------
    	aLayerList: [GM_LayerHandle_t32]
    	aDrawFlags: GM_DrawFlags_t32
    	aWorldBounds: GM_Rectangle_t
    	aColorFormat: GM_ColorFormat_t32
    	aPixelWidth: sint32
    	aPixelHeight: sint32
    	aDataBuf: int
    	aRowWidthBytes: sint32


    """
    return _globalmapper.DrawLayerListToMemory(aLayerList, aDrawFlags, aWorldBounds, aColorFormat, aPixelWidth, aPixelHeight, aDataBuf, aRowWidthBytes)


[docs]
def DrawPackageList(aDC: "HDC", aPackageList: "GM_PackageHandle_t32 *", aDrawFlags: "GM_DrawFlags_t32", aWorldBounds: "GM_Rectangle_t", aLeftPixel: "sint32", aTopPixel: "sint32", aPixelWidth: "sint32", aPixelHeight: "sint32") -> "GM_Error_t32":
    r"""
    DrawPackageList(HDC aDC, GM_PackageHandle_t32 aPackageList, GM_DrawFlags_t32 aDrawFlags, GM_Rectangle_t aWorldBounds, sint32 aLeftPixel, sint32 aTopPixel, sint32 aPixelWidth, sint32 aPixelHeight) -> GM_Error_t32

    	Parameters
    	----------
    	aDC: HDC
    	aDrawFlags: GM_DrawFlags_t32
    	aPackageList: GM_PackageHandle_t32
    	aDrawFlags: GM_DrawFlags_t32
    	aWorldBounds: GM_Rectangle_t
    	aLeftPixel: sint32
    	aTopPixel: sint32
    	aPixelWidth: sint32
    	aPixelHeight: sint32


    """
    return _globalmapper.DrawPackageList(aDC, aPackageList, aDrawFlags, aWorldBounds, aLeftPixel, aTopPixel, aPixelWidth, aPixelHeight)


[docs]
def GetElevationOverrides(aLayer: "GM_LayerHandle_t32") -> "GM_ElevationOverrides_t *":
    r"""
    GetElevationOverrides(GM_LayerHandle_t32 aLayer) -> GM_Error_t32, GM_ElevationOverrides_t

    	Parameters
    	----------
    	aLayer: GM_LayerHandle_t32


    """
    return _globalmapper.GetElevationOverrides(aLayer)


[docs]
def GetElevationShaders(aCustomOnly: "boolean") -> "unsigned long *":
    r"""
    GetElevationShaders(boolean aCustomOnly) -> GM_CustomShader_t

    	Parameters
    	----------
    	aCustomOnly: boolean


    """
    return _globalmapper.GetElevationShaders(aCustomOnly)


[docs]
def GetLastDrawnScale(aDC: "HDC") -> "double":
    r"""
    GetLastDrawnScale(HDC aDC) -> float

    	Parameters
    	----------
    	aDC: HDC


    """
    return _globalmapper.GetLastDrawnScale(aDC)


[docs]
def GetLastDrawnMapBounds() -> "GM_Rectangle_t *, GM_PixelRect_t *":
    r"""GetLastDrawnMapBounds() -> GM_Error_t32, GM_Rectangle_t, GM_PixelRect_t"""
    return _globalmapper.GetLastDrawnMapBounds()


[docs]
def GetLastDrawnMapBoundsEx(*args) -> "GM_Rectangle_t *, GM_PixelRect_t *, GM_RotatedRect_t *":
    r"""
    GetLastDrawnMapBoundsEx(uint32 aReserved=0) -> GM_Error_t32, GM_Rectangle_t, GM_PixelRect_t

    	Parameters
    	----------
    	aReserved: uint32


    """
    return _globalmapper.GetLastDrawnMapBoundsEx(*args)


[docs]
def GetOnlineLayerZoomScale(*args) -> "unsigned long *":
    r"""
    GetOnlineLayerZoomScale(GM_LayerHandle_t32 aLayer, GM_Rectangle_t aWorldBounds, GM_PixelRect_t aPixelRect, boolean aForExport, str aExtraOpts, uint32 aReserved=0) -> GM_Error_t32, uint32

    	Parameters
    	----------
    	aLayer: GM_LayerHandle_t32
    	aWorldBounds: GM_Rectangle_t
    	aPixelRect: GM_PixelRect_t
    	aForExport: boolean
    	aExtraOpts: str
    	aReserved: uint32


    """
    return _globalmapper.GetOnlineLayerZoomScale(*args)


[docs]
def GetRasterDisplayOptions(aLayer: "GM_LayerHandle_t32") -> "GM_RasterDisplayOptions_t *":
    r"""
    GetRasterDisplayOptions(GM_LayerHandle_t32 aLayer) -> GM_Error_t32, GM_RasterDisplayOptions_t

    	Parameters
    	----------
    	aLayer: GM_LayerHandle_t32


    """
    return _globalmapper.GetRasterDisplayOptions(aLayer)


[docs]
def GetShaderDisplayOptions() -> "GM_ShaderOptions_t const *":
    r"""GetShaderDisplayOptions() -> GM_ShaderOptions_t"""
    return _globalmapper.GetShaderDisplayOptions()


[docs]
def GetVerticalDisplayOptions() -> "GM_VerticalDisplayOptions_t const *":
    r"""GetVerticalDisplayOptions() -> GM_VerticalDisplayOptions_t"""
    return _globalmapper.GetVerticalDisplayOptions()


[docs]
def LoadMapLayoutFile(*args) -> "GM_Error_t32":
    r"""
    LoadMapLayoutFile(str aFilename, uint32 aReserved=0) -> GM_Error_t32

    	Parameters
    	----------
    	aFilename: str
    	aReserved: uint32


    """
    return _globalmapper.LoadMapLayoutFile(*args)


[docs]
def RecenterMapDisplay(aCenterPoint: "GM_Point_t") -> "GM_Error_t32":
    r"""
    RecenterMapDisplay(GM_Point_t aCenterPoint) -> GM_Error_t32

    	Parameters
    	----------
    	aCenterPoint: GM_Point_t


    """
    return _globalmapper.RecenterMapDisplay(aCenterPoint)


[docs]
def RedrawMapDisplay(aNewExtents: "GM_Rectangle_t") -> "GM_Error_t32":
    r"""
    RedrawMapDisplay(GM_Rectangle_t aNewExtents) -> GM_Error_t32

    	Parameters
    	----------
    	aNewExtents: GM_Rectangle_t


    """
    return _globalmapper.RedrawMapDisplay(aNewExtents)


[docs]
def RefreshMapDisplay(aDrawFullExtent: "boolean") -> "GM_Error_t32":
    r"""
    RefreshMapDisplay(boolean aDrawFullExtent) -> GM_Error_t32

    	Parameters
    	----------
    	aDrawFullExtent: boolean


    """
    return _globalmapper.RefreshMapDisplay(aDrawFullExtent)


[docs]
def RemoveCustomShader(aShaderName: "char const *") -> "GM_Error_t32":
    r"""
    RemoveCustomShader(str aShaderName) -> GM_Error_t32

    	Parameters
    	----------
    	aShaderName: str


    """
    return _globalmapper.RemoveCustomShader(aShaderName)


[docs]
def SetBackgroundColor(aBgColor: "COLORREF") -> "COLORREF":
    r"""
    SetBackgroundColor(COLORREF aBgColor) -> COLORREF

    	Parameters
    	----------
    	aBgColor: COLORREF


    """
    return _globalmapper.SetBackgroundColor(aBgColor)


[docs]
def SetElevationOverrides(aLayer: "GM_LayerHandle_t32", aOptions: "GM_ElevationOverrides_t") -> "GM_Error_t32":
    r"""
    SetElevationOverrides(GM_LayerHandle_t32 aLayer, GM_ElevationOverrides_t aOptions) -> GM_Error_t32

    	Parameters
    	----------
    	aLayer: GM_LayerHandle_t32
    	aOptions: GM_ElevationOverrides_t


    """
    return _globalmapper.SetElevationOverrides(aLayer, aOptions)


[docs]
def SetLayerEnabled(aLayer: "GM_LayerHandle_t32", aEnable: "boolean") -> "GM_Error_t32":
    r"""
    SetLayerEnabled(GM_LayerHandle_t32 aLayer, boolean aEnable) -> GM_Error_t32

    	Parameters
    	----------
    	aLayer: GM_LayerHandle_t32
    	aEnable: boolean


    """
    return _globalmapper.SetLayerEnabled(aLayer, aEnable)


[docs]
def SetLayerPalette(*args) -> "GM_Error_t32":
    r"""
    SetLayerPalette(GM_LayerHandle_t32 aLayer, GM_PaletteEntry_t aNewPalette, uint32 aReserved=0) -> GM_Error_t32

    	Parameters
    	----------
    	aLayer: GM_LayerHandle_t32
    	aNewPalette: GM_PaletteEntry_t
    	aReserved: uint32


    """
    return _globalmapper.SetLayerPalette(*args)


[docs]
def SetOrientation(aOrientation: "double") -> "GM_Error_t32":
    r"""
    SetOrientation(float aOrientation) -> GM_Error_t32

    	Parameters
    	----------
    	aOrientation: float


    """
    return _globalmapper.SetOrientation(aOrientation)


[docs]
def GetOrientation() -> "double":
    r"""GetOrientation() -> float"""
    return _globalmapper.GetOrientation()


[docs]
def SetRasterDisplayOptions(aLayer: "GM_LayerHandle_t32", aOptions: "GM_RasterDisplayOptions_t") -> "GM_Error_t32":
    r"""
    SetRasterDisplayOptions(GM_LayerHandle_t32 aLayer, GM_RasterDisplayOptions_t aOptions) -> GM_Error_t32

    	Parameters
    	----------
    	aLayer: GM_LayerHandle_t32
    	aOptions: GM_RasterDisplayOptions_t


    """
    return _globalmapper.SetRasterDisplayOptions(aLayer, aOptions)


[docs]
def SetShaderDisplayOptions(aOptions: "GM_ShaderOptions_t") -> "GM_Error_t32":
    r"""
    SetShaderDisplayOptions(GM_ShaderOptions_t aOptions) -> GM_Error_t32

    	Parameters
    	----------
    	aOptions: GM_ShaderOptions_t


    """
    return _globalmapper.SetShaderDisplayOptions(aOptions)


[docs]
def SetVectorDrawScale(aDrawScale: "float") -> "float":
    r"""
    SetVectorDrawScale(float aDrawScale) -> float

    	Parameters
    	----------
    	aDrawScale: float


    """
    return _globalmapper.SetVectorDrawScale(aDrawScale)


[docs]
def SetVerticalDisplayOptions(aVertDispOpts: "GM_VerticalDisplayOptions_t") -> "GM_Error_t32":
    r"""
    SetVerticalDisplayOptions(GM_VerticalDisplayOptions_t aVertDispOpts) -> GM_Error_t32

    	Parameters
    	----------
    	aVertDispOpts: GM_VerticalDisplayOptions_t


    """
    return _globalmapper.SetVerticalDisplayOptions(aVertDispOpts)


[docs]
def ShowLayerOptionsDialog(aLayerList: "GM_LayerHandle_t32 *") -> "GM_Error_t32":
    r"""
    ShowLayerOptionsDialog([GM_LayerHandle_t32] aLayerList) -> GM_Error_t32

    	Parameters
    	----------
    	aLayerList: [GM_LayerHandle_t32]


    """
    return _globalmapper.ShowLayerOptionsDialog(aLayerList)


[docs]
def CalcBearing(aFromX: "double", aFromY: "double", aToX: "double", aToY: "double", aFlags: "GM_CalcBearingFlags_t8") -> "double *":
    r"""
    CalcBearing(float aFromX, float aFromY, float aToX, float aToY, GM_CalcBearingFlags_t8 aFlags) -> GM_Error_t32, float

    	Parameters
    	----------
    	aFromX: float
    	aFromY: float
    	aToX: float
    	aToY: float
    	aFlags: GM_CalcBearingFlags_t8


    """
    return _globalmapper.CalcBearing(aFromX, aFromY, aToX, aToY, aFlags)


[docs]
def CalcDistance(aFromX: "double", aFromY: "double", aToX: "double", aToY: "double", aLatLon: "boolean") -> "double *":
    r"""
    CalcDistance(float aFromX, float aFromY, float aToX, float aToY, boolean aLatLon) -> GM_Error_t32, float

    	Parameters
    	----------
    	aFromX: float
    	aFromY: float
    	aToX: float
    	aToY: float
    	aLatLon: boolean


    """
    return _globalmapper.CalcDistance(aFromX, aFromY, aToX, aToY, aLatLon)


[docs]
def CalcEnclosedArea(aPtList: "GM_Point_t", aNumPoints: "uint32", aProj: "GM_Projection_t") -> "double *":
    r"""
    CalcEnclosedArea(GM_Point_t_array aPtList, int aNumPoints, GM_Projection_t aProj) -> GM_Error_t32, double

    	Parameters
    	----------
    	aPtList: GM_Point_t_array
    	aNumPoints: int
    	aProj: GM_Projection_t


    """
    return _globalmapper.CalcEnclosedArea(aPtList, aNumPoints, aProj)


[docs]
def CalcProjectedLocation(aFromX: "double", aFromY: "double", aBearing: "double", aDist: "double", aLatLon: "boolean") -> "double *, double *":
    r"""
    CalcProjectedLocation(float aFromX, float aFromY, float aBearing, float aDist, boolean aLatLon) -> GM_Error_t32, float, float

    	Parameters
    	----------
    	aFromX: float
    	aFromY: float
    	aBearing: float
    	aDist: float
    	aLatLon: boolean


    """
    return _globalmapper.CalcProjectedLocation(aFromX, aFromY, aBearing, aDist, aLatLon)


[docs]
def CalcScaleRectangle(aCenterPoint: "GM_Point_t", aScale: "double", aDC: "HDC", aPixWidth: "sint32", aPixHeight: "sint32") -> "GM_Rectangle_t *":
    r"""
    CalcScaleRectangle(GM_Point_t aCenterPoint, float aScale, HDC aDC, sint32 aPixWidth, sint32 aPixHeight) -> GM_Error_t32, GM_Rectangle_t

    	Parameters
    	----------
    	aCenterPoint: GM_Point_t
    	aScale: float
    	aDC: HDC
    	aPixWidth: sint32
    	aPixHeight: sint32


    """
    return _globalmapper.CalcScaleRectangle(aCenterPoint, aScale, aDC, aPixWidth, aPixHeight)


[docs]
def CalcWorldRectSize(aWorldBounds: "GM_Rectangle_t") -> "double *, double *":
    r"""
    CalcWorldRectSize(GM_Rectangle_t aWorldBounds) -> GM_Error_t32, float, float

    	Parameters
    	----------
    	aWorldBounds: GM_Rectangle_t


    """
    return _globalmapper.CalcWorldRectSize(aWorldBounds)


[docs]
def ConvertCoordGroundToPixel(aGroundX: "double", aGroundY: "double", aWorldBounds: "GM_Rectangle_t", aPixelRect: "GM_PixelRect_t") -> "long *, sint32 *":
    r"""
    ConvertCoordGroundToPixel(float aGroundX, float aGroundY, GM_Rectangle_t aWorldBounds, GM_PixelRect_t aPixelRect) -> GM_Error_t32, sint32, sint32

    	Parameters
    	----------
    	aGroundX: float
    	aGroundY: float
    	aWorldBounds: GM_Rectangle_t
    	aPixelRect: GM_PixelRect_t


    """
    return _globalmapper.ConvertCoordGroundToPixel(aGroundX, aGroundY, aWorldBounds, aPixelRect)


[docs]
def ConvertCoordGroundToPixelDouble(aGroundX: "double", aGroundY: "double", aWorldBounds: "GM_Rectangle_t", aPixelRect: "GM_PixelRect_t") -> "double *, double *":
    r"""
    ConvertCoordGroundToPixelDouble(float aGroundX, float aGroundY, GM_Rectangle_t aWorldBounds, GM_PixelRect_t aPixelRect) -> GM_Error_t32, float, float

    	Parameters
    	----------
    	aGroundX: float
    	aGroundY: float
    	aWorldBounds: GM_Rectangle_t
    	aPixelRect: GM_PixelRect_t


    """
    return _globalmapper.ConvertCoordGroundToPixelDouble(aGroundX, aGroundY, aWorldBounds, aPixelRect)


[docs]
def ConvertCoordGroundToPixelWithOrientation(aGroundX: "double", aGroundY: "double", aWorldBounds: "GM_Rectangle_t", aPixelRect: "GM_PixelRect_t", aOrientation: "double") -> "long *, sint32 *":
    r"""
    ConvertCoordGroundToPixelWithOrientation(float aGroundX, float aGroundY, GM_Rectangle_t aWorldBounds, GM_PixelRect_t aPixelRect, float aOrientation) -> GM_Error_t32, sint32, sint32

    	Parameters
    	----------
    	aGroundX: float
    	aGroundY: float
    	aWorldBounds: GM_Rectangle_t
    	aPixelRect: GM_PixelRect_t
    	aOrientation: float


    """
    return _globalmapper.ConvertCoordGroundToPixelWithOrientation(aGroundX, aGroundY, aWorldBounds, aPixelRect, aOrientation)


[docs]
def ConvertCoordGroundToPixelWithOrientationDouble(aGroundX: "double", aGroundY: "double", aWorldBounds: "GM_Rectangle_t", aPixelRect: "GM_PixelRect_t", aOrientation: "double") -> "double *, double *":
    r"""
    ConvertCoordGroundToPixelWithOrientationDouble(float aGroundX, float aGroundY, GM_Rectangle_t aWorldBounds, GM_PixelRect_t aPixelRect, float aOrientation) -> GM_Error_t32, float, float

    	Parameters
    	----------
    	aGroundX: float
    	aGroundY: float
    	aWorldBounds: GM_Rectangle_t
    	aPixelRect: GM_PixelRect_t
    	aOrientation: float


    """
    return _globalmapper.ConvertCoordGroundToPixelWithOrientationDouble(aGroundX, aGroundY, aWorldBounds, aPixelRect, aOrientation)


[docs]
def ConvertCoordLayerGroundToPixel(aLayer: "GM_LayerHandle_t32", aGroundX: "double", aGroundY: "double") -> "double *, double *":
    r"""
    ConvertCoordLayerGroundToPixel(GM_LayerHandle_t32 aLayer, float aGroundX, float aGroundY) -> GM_Error_t32, float, float

    	Parameters
    	----------
    	aLayer: GM_LayerHandle_t32
    	aGroundX: float
    	aGroundY: float


    """
    return _globalmapper.ConvertCoordLayerGroundToPixel(aLayer, aGroundX, aGroundY)


[docs]
def ConvertCoordLayerPixelToGround(aLayer: "GM_LayerHandle_t32", aPixelX: "double", aPixelY: "double") -> "double *, double *":
    r"""
    ConvertCoordLayerPixelToGround(GM_LayerHandle_t32 aLayer, float aPixelX, float aPixelY) -> GM_Error_t32, float, float

    	Parameters
    	----------
    	aLayer: GM_LayerHandle_t32
    	aPixelX: float
    	aPixelY: float


    """
    return _globalmapper.ConvertCoordLayerPixelToGround(aLayer, aPixelX, aPixelY)


[docs]
def ConvertCoordPixelToGround(aPixelX: "sint32", aPixelY: "sint32", aWorldBounds: "GM_Rectangle_t", aPixelRect: "GM_PixelRect_t") -> "double *, double *":
    r"""
    ConvertCoordPixelToGround(sint32 aPixelX, sint32 aPixelY, GM_Rectangle_t aWorldBounds, GM_PixelRect_t aPixelRect) -> GM_Error_t32, float, float

    	Parameters
    	----------
    	aPixelX: sint32
    	aPixelY: sint32
    	aWorldBounds: GM_Rectangle_t
    	aPixelRect: GM_PixelRect_t


    """
    return _globalmapper.ConvertCoordPixelToGround(aPixelX, aPixelY, aWorldBounds, aPixelRect)


[docs]
def ConvertCoordPixelToGroundDouble(aPixelX: "double", aPixelY: "double", aWorldBounds: "GM_Rectangle_t", aPixelRect: "GM_PixelRect_t") -> "double *, double *":
    r"""
    ConvertCoordPixelToGroundDouble(float aPixelX, float aPixelY, GM_Rectangle_t aWorldBounds, GM_PixelRect_t aPixelRect) -> GM_Error_t32, float, float

    	Parameters
    	----------
    	aPixelX: float
    	aPixelY: float
    	aWorldBounds: GM_Rectangle_t
    	aPixelRect: GM_PixelRect_t


    """
    return _globalmapper.ConvertCoordPixelToGroundDouble(aPixelX, aPixelY, aWorldBounds, aPixelRect)


[docs]
def ConvertCoordPixelToGroundWithOrientation(aPixelX: "sint32", aPixelY: "sint32", aWorldBounds: "GM_Rectangle_t", aPixelRect: "GM_PixelRect_t", aOrientation: "double") -> "double *, double *":
    r"""
    ConvertCoordPixelToGroundWithOrientation(sint32 aPixelX, sint32 aPixelY, GM_Rectangle_t aWorldBounds, GM_PixelRect_t aPixelRect, float aOrientation) -> GM_Error_t32, float, float

    	Parameters
    	----------
    	aPixelX: sint32
    	aPixelY: sint32
    	aWorldBounds: GM_Rectangle_t
    	aPixelRect: GM_PixelRect_t
    	aOrientation: float


    """
    return _globalmapper.ConvertCoordPixelToGroundWithOrientation(aPixelX, aPixelY, aWorldBounds, aPixelRect, aOrientation)


[docs]
def ConvertCoordPixelToGroundWithOrientationDouble(aPixelX: "double", aPixelY: "double", aWorldBounds: "GM_Rectangle_t", aPixelRect: "GM_PixelRect_t", aOrientation: "double") -> "double *, double *":
    r"""
    ConvertCoordPixelToGroundWithOrientationDouble(float aPixelX, float aPixelY, GM_Rectangle_t aWorldBounds, GM_PixelRect_t aPixelRect, float aOrientation) -> GM_Error_t32, float, float

    	Parameters
    	----------
    	aPixelX: float
    	aPixelY: float
    	aWorldBounds: GM_Rectangle_t
    	aPixelRect: GM_PixelRect_t
    	aOrientation: float


    """
    return _globalmapper.ConvertCoordPixelToGroundWithOrientationDouble(aPixelX, aPixelY, aWorldBounds, aPixelRect, aOrientation)


[docs]
def AddCustomDatum(aDatumInfo: "GM_DatumInfo_t") -> "short *":
    r"""
    AddCustomDatum(GM_DatumInfo_t aDatumInfo) -> GM_Error_t32, DATUM

    	Parameters
    	----------
    	aDatumInfo: GM_DatumInfo_t


    """
    return _globalmapper.AddCustomDatum(aDatumInfo)


[docs]
def AddCustomEllipsoid(aEllipsoidName: "char const *", aSemiMajor: "double", aSemiMinor: "double") -> "GM_Error_t32":
    r"""
    AddCustomEllipsoid(str aEllipsoidName, float aSemiMajor, float aSemiMinor) -> GM_Error_t32

    	Parameters
    	----------
    	aEllipsoidName: str
    	aSemiMajor: float
    	aSemiMinor: float


    """
    return _globalmapper.AddCustomEllipsoid(aEllipsoidName, aSemiMajor, aSemiMinor)


[docs]
def AreProjectionsEquivalent(aProj1: "GM_Projection_t", aProj2: "GM_Projection_t") -> "unsigned char *":
    r"""
    AreProjectionsEquivalent(GM_Projection_t aProj1, GM_Projection_t aProj2) -> GM_Error_t32, boolean

    	Parameters
    	----------
    	aProj1: GM_Projection_t
    	aProj2: GM_Projection_t


    """
    return _globalmapper.AreProjectionsEquivalent(aProj1, aProj2)


[docs]
def DecodeMGRSCoordinates(aMgrsStr: "char const *", aLatLon: "boolean") -> "double *, double *":
    r"""
    DecodeMGRSCoordinates(str aMgrsStr, boolean aLatLon) -> GM_Error_t32, float, float

    	Parameters
    	----------
    	aMgrsStr: str
    	aLatLon: boolean


    """
    return _globalmapper.DecodeMGRSCoordinates(aMgrsStr, aLatLon)


[docs]
def GetAvailableProjectionList() -> "uint32 *":
    r"""GetAvailableProjectionList() -> [GM_ProjectionInfo_t]"""
    return _globalmapper.GetAvailableProjectionList()


[docs]
def GetDatumInfo(aDatumCode: "DATUM") -> "GM_DatumInfo_t *":
    r"""
    GetDatumInfo(DATUM aDatumCode) -> GM_Error_t32, GM_DatumInfo_t

    	Parameters
    	----------
    	aDatumCode: DATUM


    """
    return _globalmapper.GetDatumInfo(aDatumCode)


[docs]
def GetMGRSCoordinates(aX: "double", aY: "double", aLatLon: "boolean") -> "char *":
    r"""
    GetMGRSCoordinates(float aX, float aY, boolean aLatLon) -> GM_Error_t32, string

    	Parameters
    	----------
    	aX: float
    	aY: float
    	aLatLon: boolean


    """
    return _globalmapper.GetMGRSCoordinates(aX, aY, aLatLon)


[docs]
def GetProjection() -> "GM_Projection_t *":
    r"""GetProjection() -> GM_Error_t32, GM_Projection_t"""
    return _globalmapper.GetProjection()


[docs]
def LoadProjectionFile(aFilename: "char const *") -> "GM_Projection_t *":
    r"""
    LoadProjectionFile(str aFilename) -> GM_Error_t32, GM_Projection_t

    	Parameters
    	----------
    	aFilename: str


    """
    return _globalmapper.LoadProjectionFile(aFilename)


[docs]
def LoadProjectionFromEPSGCode(aEpsgCode: "uint32") -> "GM_Projection_t *":
    r"""
    LoadProjectionFromEPSGCode(uint32 aEpsgCode) -> GM_Error_t32, GM_Projection_t

    	Parameters
    	----------
    	aEpsgCode: uint32


    """
    return _globalmapper.LoadProjectionFromEPSGCode(aEpsgCode)


[docs]
def LoadProjectionFromWKTString(aStr: "char const *") -> "GM_Projection_t *":
    r"""
    LoadProjectionFromWKTString(str aStr) -> GM_Error_t32, GM_Projection_t

    	Parameters
    	----------
    	aStr: str


    """
    return _globalmapper.LoadProjectionFromWKTString(aStr)


[docs]
def ProjectionGetBase(aProjIn: "GM_Projection_t") -> "GM_Projection_t *":
    r"""
    ProjectionGetBase(GM_Projection_t aProjIn) -> GM_Error_t32, GM_Projection_t

    	Parameters
    	----------
    	aProjIn: GM_Projection_t


    """
    return _globalmapper.ProjectionGetBase(aProjIn)


[docs]
def ProjectPoint(aXIn: "double", aYIn: "double", aProjIn: "GM_Projection_t", aProjTo: "GM_Projection_t") -> "double *, double *":
    r"""
    ProjectPoint(float aXIn, float aYIn, GM_Projection_t aProjFrom, GM_Projection_t aProjTo) -> GM_Error_t32, float, float

    	Parameters
    	----------
    	aXIn: float
    	aYIn: float
    	aProjFrom: GM_Projection_t
    	aProjTo: GM_Projection_t


    """
    return _globalmapper.ProjectPoint(aXIn, aYIn, aProjIn, aProjTo)


[docs]
def ProjectPointAtElev(aXIn: "double", aYIn: "double", aProjIn: "GM_Projection_t", aProjTo: "GM_Projection_t", aElev: "double") -> "double *, double *":
    r"""
    ProjectPointAtElev(float aXIn, float aYIn, GM_Projection_t aProjIn, GM_Projection_t aProjOut, float aElev) -> GM_Error_t32, float, float

    	Parameters
    	----------
    	aXIn: float
    	aYIn: float
    	aProjIn: GM_Projection_t
    	aProjOut: GM_Projection_t
    	aElev: float


    """
    return _globalmapper.ProjectPointAtElev(aXIn, aYIn, aProjIn, aProjTo, aElev)


[docs]
def ProjectPointFromECEF(aX: "double", aY: "double", aZ: "double", aDatum: "DATUM", aProjTo: "GM_Projection_t") -> "double *, double *, double *":
    r"""
    ProjectPointFromECEF(float aX, float aY, float aZ, DATUM aDatum, GM_Projection_t aProjOut) -> GM_Error_t32, float, float, float

    	Parameters
    	----------
    	aX: float
    	aY: float
    	aZ: float
    	aDatum: DATUM
    	aProjOut: GM_Projection_t


    """
    return _globalmapper.ProjectPointFromECEF(aX, aY, aZ, aDatum, aProjTo)


[docs]
def ProjectPointList(INOUT: "GM_Point_t", IN_LIST: "float *", aProjIn: "GM_Projection_t", aProjTo: "GM_Projection_t") -> "uint32":
    r"""
    ProjectPointList([GM_Point_t] aPointList, [float] aElevationsList, GM_Projection_t aProjIn, GM_Projection_t aProjTo) -> GM_Error_t32

    	Parameters
    	----------
    	aPointList: [GM_Point_t]
    	aElevationsList: [float]
    	aProjIn: GM_Projection_t
    	aProjTo: GM_Projection_t


    """
    return _globalmapper.ProjectPointList(INOUT, IN_LIST, aProjIn, aProjTo)


[docs]
def ProjectPointListArr(aPointArray: "GM_Point_t", aPointArraySize: "uint32", aElevations: "float *", aProjIn: "GM_Projection_t", aProjTo: "GM_Projection_t") -> "GM_Error_t32":
    r"""
    ProjectPointListArr(GM_Point_t aPointArray, uint32 aPointArraySize, float aElevations, GM_Projection_t aProjIn, GM_Projection_t aProjOut) -> GM_Error_t32

    	Parameters
    	----------
    	aPointArray: GM_Point_t
    	aPointArraySize: uint32               
    	aElevations: float
    	aProjIn: GM_Projection_t
    	aProjOut: GM_Projection_t


    """
    return _globalmapper.ProjectPointListArr(aPointArray, aPointArraySize, aElevations, aProjIn, aProjTo)


[docs]
def ProjectPointToECEF(aXIn: "double", aYIn: "double", aZIn: "double", aDatum: "DATUM", aProjTo: "GM_Projection_t") -> "double *, double *, double *":
    r"""
    ProjectPointToECEF(float aXIn, float aYIn, float aZIn, DATUM aDatum, GM_Projection_t aProjIn) -> GM_Error_t32, float, float, float

    	Parameters
    	----------
    	aXIn: float
    	aYIn: float
    	aZIn: float
    	aDatum: DATUM
    	aProjIn: GM_Projection_t


    """
    return _globalmapper.ProjectPointToECEF(aXIn, aYIn, aZIn, aDatum, aProjTo)


[docs]
def ProjectRectangle(aRectIn: "GM_Rectangle_t", aProjIn: "GM_Projection_t", aProjTo: "GM_Projection_t") -> "GM_Rectangle_t *":
    r"""
    ProjectRectangle(GM_Rectangle_t aRectIn, GM_Projection_t aProjIn, GM_Projection_t aProjOut) -> GM_Error_t32, GM_Rectangle_t

    	Parameters
    	----------
    	aRectIn: GM_Rectangle_t
    	aProjIn: GM_Projection_t
    	aProjOut: GM_Projection_t


    """
    return _globalmapper.ProjectRectangle(aRectIn, aProjIn, aProjTo)


[docs]
def SaveProjectionToFile(aFilename: "char const *", aProj: "GM_Projection_t", aReserved: "uint32") -> "GM_Error_t32":
    r"""
    SaveProjectionToFile(str aFilename, GM_Projection_t aProj, uint32 aReserved=0) -> GM_Error_t32

    	Parameters
    	----------
    	aFilename: str
    	aProj: GM_Projection_t
    	aReserved: uint32


    """
    return _globalmapper.SaveProjectionToFile(aFilename, aProj, aReserved)


[docs]
def SaveProjectionToString(aProj: "GM_Projection_t", aBufferLen: "uint32", aReserved: "uint32") -> "char *":
    r"""
    SaveProjectionToString(GM_Projection_t aProj, uint32 aBufSize, uint32 aReserved=0) -> GM_Error_t32, str

    	Parameters
    	----------
    	aProj: GM_Projection_t
    	aBufSize: uint32
    	aReserved: uint32


    """
    return _globalmapper.SaveProjectionToString(aProj, aBufferLen, aReserved)


[docs]
def SelectProjection(aInitProj: "GM_Projection_t") -> "GM_Projection_t *":
    r"""
    SelectProjection(GM_Projection_t aInitProj) -> GM_Error_t32, GM_Projection_t

    	Parameters
    	----------
    	aInitProj: GM_Projection_t


    """
    return _globalmapper.SelectProjection(aInitProj)


[docs]
def SelectProjectionEx(*args) -> "GM_Projection_t *":
    r"""
    SelectProjectionEx(GM_Projection_t aInitProj, POINT aDlgPos, GM_SelectProjFlags_t32 aFlags, uint32 aReserved=0) -> GM_Error_t32, GM_Projection_t

    	Parameters
    	----------
    	aInitProj: GM_Projection_t
    	aDlgPos: POINT
    	aFlags: GM_SelectProjFlags_t32
    	aReserved: uint32


    """
    return _globalmapper.SelectProjectionEx(*args)


[docs]
def SetQueryProjectionCallback(aCallbackFunc: "GM_QueryProjectionCallbackFunc") -> "void":
    r"""
    SetQueryProjectionCallback(GM_QueryProjectionCallbackFunc aCallbackFunc) -> None

    	Parameters
    	----------
    	aCallbackFunc: GM_QueryProjectionCallbackFunc


    """
    return _globalmapper.SetQueryProjectionCallback(aCallbackFunc)


[docs]
def SetProjection(aProj: "GM_Projection_t") -> "GM_Error_t32":
    r"""
    SetProjection(GM_Projection_t aProj) -> GM_Error_t32

    	Parameters
    	----------
    	aProj: GM_Projection_t


    """
    return _globalmapper.SetProjection(aProj)


[docs]
def SetProjectionEx(*args) -> "GM_Error_t32":
    r"""
    SetProjectionEx(GM_Projection_t aProj, GM_Rectangle_t aLatLonRect, uint32 aReserved=0) -> GM_Error_t32

    	Parameters
    	----------
    	aProj: GM_Projection_t
    	aLatLonRect: GM_Rectangle_t
    	aReserved: uint32


    """
    return _globalmapper.SetProjectionEx(*args)


[docs]
def ExportElevation(aFilename: "char const *", aFormat: "GM_ElevationExportFormat_t32", aLayer: "GM_LayerHandle_t32", aWorldBounds: "GM_Rectangle_t", aPixelWidth: "sint32", aPixelHeight: "sint32", aFlags: "GM_RasterExportFlags_t32", aElevUnits: "GM_ElevUnits_t8") -> "GM_Error_t32":
    r"""
    ExportElevation(str aFilename, GM_ElevationExportFormat_t32 aFormat, GM_LayerHandle_t32 aLayer, GM_Rectangle_t aWorldBounds, sint32 aPixelWidth, sint32 aPixelHeight, GM_RasterExportFlags_t32 aFlags, GM_ElevUnits_t8 aElevUnits) -> GM_Error_t32

    	Parameters
    	----------
    	aFilename: str
    	aFormat: GM_ElevationExportFormat_t32
    	aLayer: GM_LayerHandle_t32
    	aWorldBounds: GM_Rectangle_t
    	aPixelWidth: sint32
    	aPixelHeight: sint32
    	aFlags: GM_RasterExportFlags_t32
    	aElevUnits: GM_ElevUnits_t8


    """
    return _globalmapper.ExportElevation(aFilename, aFormat, aLayer, aWorldBounds, aPixelWidth, aPixelHeight, aFlags, aElevUnits)


[docs]
def ExportElevationEx(aFilename: "char const *", aFormat: "GM_ElevationExportFormat_t32", aLayerList: "GM_LayerHandle_t32 *", aWorldBounds: "GM_Rectangle_t", aPixelWidth: "sint32", aPixelHeight: "sint32", aFlags: "GM_RasterExportFlags_t32", aElevUnits: "GM_ElevUnits_t8", aExtraFlags: "char const *") -> "GM_Error_t32":
    r"""
    ExportElevationEx(str aFilename, GM_ElevationExportFormat_t32 aFormat, [GM_LayerHandle_t32] aLayerList, GM_Rectangle_t aWorldBounds, sint32 aPixelWidth, sint32 aPixelHeight, GM_RasterExportFlags_t32 aFlags, GM_ElevUnits_t8 aElevUnits, str aExtraFlags) -> GM_Error_t32

    	Parameters
    	----------
    	aFilename: str
    	aFormat: GM_ElevationExportFormat_t32
    	aLayerList: [GM_LayerHandle_t32]
    	aWorldBounds: GM_Rectangle_t
    	aPixelWidth: sint32
    	aPixelHeight: sint32
    	aFlags: GM_RasterExportFlags_t32
    	aElevUnits: GM_ElevUnits_t8
    	aExtraFlags: str


    """
    return _globalmapper.ExportElevationEx(aFilename, aFormat, aLayerList, aWorldBounds, aPixelWidth, aPixelHeight, aFlags, aElevUnits, aExtraFlags)


[docs]
def ExportGeoPackage(aFilename: "char const *", aLayerList: "GM_LayerHandle_t32 *", aWorldBounds: "GM_Rectangle_t", aExportOpts: "GM_ExportOptsGeoPackage_t") -> "GM_Error_t32":
    r"""
    ExportGeoPackage(str aFilename, [GM_LayerHandle_t32] aLayerList, GM_Rectangle_t aWorldBounds, GM_ExportOptsGeoPackage_t aExportOpts) -> GM_Error_t32

    	Parameters
    	----------
    	aFilename: str
    	aLayerList: [GM_LayerHandle_t32]
    	aWorldBounds: GM_Rectangle_t
    	aExportOpts: GM_ExportOptsGeoPackage_t


    """
    return _globalmapper.ExportGeoPackage(aFilename, aLayerList, aWorldBounds, aExportOpts)


[docs]
def ExportMapLayoutComponent(*args) -> "GM_Error_t32":
    r"""
    ExportMapLayoutComponent(str aFilename, GM_MapLayoutPiece_t8 aPiece, GM_Rectangle_t aWorldBounds, sint32 aPixelWidth, sint32 aPixelHeight, uint32 aReserved=0) -> GM_Error_t32

    	Parameters
    	----------
    	aFilename: str
    	aPiece: GM_MapLayoutPiece_t8
    	aWorldBounds: GM_Rectangle_t
    	aPixelWidth: sint32
    	aPixelHeight: sint32
    	aReserved: uint32


    """
    return _globalmapper.ExportMapLayoutComponent(*args)


[docs]
def ExportPackage(aFilename: "char const *", aLayerList: "GM_LayerHandle_t32 *", aWorldBounds: "GM_Rectangle_t", aSimpThreshold: "double", aFlags: "GM_PackageExportFlags_t32") -> "GM_Error_t32":
    r"""
    ExportPackage(str aFilename, [GM_LayerHandle_t32] aLayerList, GM_Rectangle_t aWorldBounds, float aSimpThreshold, GM_PackageExportFlags_t32 aFlags) -> GM_Error_t32

    	Parameters
    	----------
    	aFilename: str
    	aLayerList: [GM_LayerHandle_t32]
    	aWorldBounds: GM_Rectangle_t
    	aSimpThreshold: float
    	aFlags: GM_PackageExportFlags_t32


    """
    return _globalmapper.ExportPackage(aFilename, aLayerList, aWorldBounds, aSimpThreshold, aFlags)


[docs]
def ExportPDF(aFilename: "char const *", aLayerList: "GM_LayerHandle_t32 *", aWorldBounds: "GM_Rectangle_t", aExportOpts: "GM_ExportOptsPDF_t") -> "GM_Error_t32":
    r"""
    ExportPDF(str aFilename, [GM_LayerHandle_t32] aLayerList, GM_Rectangle_t aWorldBounds, GM_ExportOptsPDF_t aExportOpts) -> GM_Error_t32

    	Parameters
    	----------
    	aFilename: str
    	aLayerList: [GM_LayerHandle_t32]
    	aWorldBounds: GM_Rectangle_t
    	aExportOpts: GM_ExportOptsPDF_t


    """
    return _globalmapper.ExportPDF(aFilename, aLayerList, aWorldBounds, aExportOpts)


[docs]
def ExportRaster(aFilename: "char const *", aFormat: "GM_RasterExportFormat_t32", aLayer: "GM_LayerHandle_t32", aWorldBounds: "GM_Rectangle_t", aPixelWidth: "sint32", aPixelHeight: "sint32", aFlags: "GM_RasterExportFlags_t32") -> "GM_Error_t32":
    r"""
    ExportRaster(str aFilename, GM_RasterExportFormat_t32 aFormat, GM_LayerHandle_t32 aLayer, GM_Rectangle_t aWorldBounds, sint32 aPixelWidth, sint32 aPixelHeight, GM_RasterExportFlags_t32 aFlags) -> GM_Error_t32

    	Parameters
    	----------
    	aFilename: str
    	aFormat: GM_RasterExportFormat_t32
    	aLayer: GM_LayerHandle_t32
    	aWorldBounds: GM_Rectangle_t
    	aPixelWidth: sint32
    	aPixelHeight: sint32
    	aFlags: GM_RasterExportFlags_t32


    """
    return _globalmapper.ExportRaster(aFilename, aFormat, aLayer, aWorldBounds, aPixelWidth, aPixelHeight, aFlags)


[docs]
def ExportRasterEx(aFilename: "char const *", aFormat: "GM_RasterExportFormat_t32", aLayerList: "GM_LayerHandle_t32 *", aWorldBounds: "GM_Rectangle_t", aPixelWidth: "sint32", aPixelHeight: "sint32", aFlags: "GM_RasterExportFlags_t32", aExtraFlags: "char const *") -> "GM_Error_t32":
    r"""
    ExportRasterEx(str aFilename, GM_RasterExportFormat_t32 aFormat, [GM_LayerHandle_t32] aLayerList, GM_Rectangle_t aWorldBounds, sint32 aPixelWidth, sint32 aPixelHeight, GM_RasterExportFlags_t32 aFlags, str aExtraFlags) -> GM_Error_t32

    	Parameters
    	----------
    	aFilename: str
    	aFormat: GM_RasterExportFormat_t32
    	aLayerList: [GM_LayerHandle_t32]
    	aWorldBounds: GM_Rectangle_t
    	aPixelWidth: sint32
    	aPixelHeight: sint32
    	aFlags: GM_RasterExportFlags_t32
    	aExtraFlags: str


    """
    return _globalmapper.ExportRasterEx(aFilename, aFormat, aLayerList, aWorldBounds, aPixelWidth, aPixelHeight, aFlags, aExtraFlags)


[docs]
def ExportRasterFromBitmap(aFilename: "char const *", aBitmap: "HBITMAP", aDC: "HDC", aFormat: "GM_RasterExportFormat_t32", aWorldBounds: "GM_Rectangle_t", aFlags: "GM_RasterExportFlags_t32") -> "GM_Error_t32":
    r"""
    ExportRasterFromBitmap(str aFilename, HBITMAP aBitmap, HDC aDC, GM_RasterExportFormat_t32 aFormat, GM_Rectangle_t aWorldBounds, GM_RasterExportFlags_t32 aFlags) -> GM_Error_t32

    	Parameters
    	----------
    	aFilename: str
    	aBitmap: HBITMAP
    	aDC: HDC
    	aFormat: GM_RasterExportFormat_t32
    	aWorldBounds: GM_Rectangle_t
    	aFlags: GM_RasterExportFlags_t32


    """
    return _globalmapper.ExportRasterFromBitmap(aFilename, aBitmap, aDC, aFormat, aWorldBounds, aFlags)


[docs]
def ExportVector(aFilename: "char const *", aFormat: "GM_VectorExportFormat_t32", aLayer: "GM_LayerHandle_t32", aWorldBounds: "GM_Rectangle_t", aFlags: "GM_VectorExportFlags_t32", aFormatOptions: "void *") -> "GM_Error_t32":
    r"""
    ExportVector(str aFilename, GM_VectorExportFormat_t32 aFormat, GM_LayerHandle_t32 aLayer, GM_Rectangle_t aWorldBounds, GM_VectorExportFlags_t32 aFlags, int aFormatOptions) -> GM_Error_t32

    	Parameters
    	----------
    	aFilename: str
    	aFormat: GM_VectorExportFormat_t32
    	aLayer: GM_LayerHandle_t32
    	aWorldBounds: GM_Rectangle_t
    	aFlags: GM_VectorExportFlags_t32
    	aFormatOptions: int


    """
    return _globalmapper.ExportVector(aFilename, aFormat, aLayer, aWorldBounds, aFlags, aFormatOptions)


[docs]
def ExportVectorEx(aFilename: "char const *", aFormat: "GM_VectorExportFormat_t32", aLayer: "GM_LayerHandle_t32", aWorldBounds: "GM_Rectangle_t", aFlags: "GM_VectorExportFlags_t32", aFormatOptions: "void *", aExtraFlags: "char const *") -> "GM_Error_t32":
    r"""
    ExportVectorEx(str aFilename, GM_VectorExportFormat_t32 aFormat, GM_LayerHandle_t32 aLayer, GM_Rectangle_t aWorldBounds, GM_VectorExportFlags_t32 aFlags, int aFormatOptions, str aExtraFlags) -> GM_Error_t32

    	Parameters
    	----------
    	aFilename: str
    	aFormat: GM_VectorExportFormat_t32
    	aLayer: GM_LayerHandle_t32
    	aWorldBounds: GM_Rectangle_t
    	aFlags: GM_VectorExportFlags_t32
    	aFormatOptions: int
    	aExtraFlags: str


    """
    return _globalmapper.ExportVectorEx(aFilename, aFormat, aLayer, aWorldBounds, aFlags, aFormatOptions, aExtraFlags)


[docs]
def ExportVectorList(*args) -> "GM_Error_t32":
    r"""
    ExportVectorList(str aFilename, GM_VectorExportFormat_t32 aFormat, [GM_LayerHandle_t32] aLayerList, GM_Rectangle_t aWorldBounds, GM_VectorExportFlags_t32 aFlags, int aFormatOptions, str aExtraFlags, uint32 aReserved=0) -> GM_Error_t32

    	Parameters
    	----------
    	aFilename: str
    	aFormat: GM_VectorExportFormat_t32
    	aLayerList: [GM_LayerHandle_t32]
    	aWorldBounds: GM_Rectangle_t
    	aFlags: GM_VectorExportFlags_t32
    	aFormatOptions: int
    	aExtraFlags: str
    	aReserved: uint32


    """
    return _globalmapper.ExportVectorList(*args)


[docs]
def ExportWebFormat(aFilename: "char const *", aWebFormat: "GM_WebExportFormat_t32", aLayerList: "GM_LayerHandle_t32 *", aWorldBounds: "GM_Rectangle_t", aExportOpts: "GM_WebFormatExportOpts_t", aExtraFlags: "char const *") -> "GM_Error_t32":
    r"""
    ExportWebFormat(str aFilename, GM_WebExportFormat_t32 aWebFormat, [GM_LayerHandle_t32] aLayerList, GM_Rectangle_t aWorldBounds, GM_WebFormatExportOpts_t aExportOpts, str aExtraFlags) -> GM_Error_t32

    	Parameters
    	----------
    	aFilename: str
    	aWebFormat: GM_WebExportFormat_t32
    	aLayerList: [GM_LayerHandle_t32]
    	aWorldBounds: GM_Rectangle_t
    	aExportOpts: GM_WebFormatExportOpts_t
    	aExtraFlags: str


    """
    return _globalmapper.ExportWebFormat(aFilename, aWebFormat, aLayerList, aWorldBounds, aExportOpts, aExtraFlags)


[docs]
def SetExportCropAreas(aAreaList: "GM_AreaFeature_t", aNumAreas: "uint32", aAreaProj: "GM_Projection_t") -> "GM_Error_t32":
    r"""
    SetExportCropAreas(GM_AreaFeature_t aAreaList, uint32 aNumAreas, GM_Projection_t aAreaProj) -> GM_Error_t32

    	Parameters
    	----------
    	aAreaList: GM_AreaFeature_t
    	aNumAreas: uint32
    	aAreaProj: GM_Projection_t


    """
    return _globalmapper.SetExportCropAreas(aAreaList, aNumAreas, aAreaProj)


[docs]
def GetLocationColor(aLayer: "GM_LayerHandle_t32", aXCoord: "double", aYCoord: "double") -> "GM_Color_t *":
    r"""
    GetLocationColor(GM_LayerHandle_t32 aLayer, float aXCoord, float aYCoord) -> GM_Error_t32, GM_Color_t

    	Parameters
    	----------
    	aLayer: GM_LayerHandle_t32
    	aXCoord: float
    	aYCoord: float


    """
    return _globalmapper.GetLocationColor(aLayer, aXCoord, aYCoord)


[docs]
def GetLocationElevation(aLayer: "GM_LayerHandle_t32", aXCoord: "double", aYCoord: "double") -> "float *":
    r"""
    GetLocationElevation(GM_LayerHandle_t32 aLayer, float aXCoord, float aYCoord) -> GM_Error_t32, float

    	Parameters
    	----------
    	aLayer: GM_LayerHandle_t32
    	aXCoord: float
    	aYCoord: float


    """
    return _globalmapper.GetLocationElevation(aLayer, aXCoord, aYCoord)


[docs]
def GetLocationElevationEx(aLayerList: "GM_LayerHandle_t32 *", aXCoord: "double", aYCoord: "double") -> "float *":
    r"""
    GetLocationElevationEx([GM_LayerHandle_t32] aLayerList, float aXCoord, float aYCoord) -> GM_Error_t32, float

    	Parameters
    	----------
    	aLayerList: [GM_LayerHandle_t32]
    	aXCoord: float
    	aYCoord: float


    """
    return _globalmapper.GetLocationElevationEx(aLayerList, aXCoord, aYCoord)


[docs]
def GetPixelBandValue(aLayer: "GM_LayerHandle_t32", aRow: "sint32", aCol: "sint32", aBand: "sint32") -> "long *":
    r"""
    GetPixelBandValue(GM_LayerHandle_t32 aLayer, sint32 aRow, sint32 aCol, sint32 aBand) -> GM_Error_t32, sint32

    	Parameters
    	----------
    	aLayer: GM_LayerHandle_t32
    	aRow: sint32
    	aCol: sint32
    	aBand: sint32


    """
    return _globalmapper.GetPixelBandValue(aLayer, aRow, aCol, aBand)


[docs]
def GetPixelColor(aLayer: "GM_LayerHandle_t32", aRow: "sint32", aCol: "sint32") -> "GM_Color_t *":
    r"""
    GetPixelColor(GM_LayerHandle_t32 aLayer, sint32 aRow, sint32 aCol) -> GM_Error_t32, GM_Color_t

    	Parameters
    	----------
    	aLayer: GM_LayerHandle_t32
    	aRow: sint32
    	aCol: sint32


    """
    return _globalmapper.GetPixelColor(aLayer, aRow, aCol)


[docs]
def GetPixelColorRow(aLayer: "GM_LayerHandle_t32", aRow: "sint32", aColorRow: "COLORREF *", aInvalidVal: "COLORREF") -> "GM_Error_t32":
    r"""
    GetPixelColorRow(GM_LayerHandle_t32 aLayer, sint32 aRow, COLORREF aInvalidVal) -> GM_Error_t32, COLORREF

    	Parameters
    	----------
    	aLayer: GM_LayerHandle_t32
    	aRow: sint32
    	aInvalidVal: COLORREF


    """
    return _globalmapper.GetPixelColorRow(aLayer, aRow, aColorRow, aInvalidVal)


[docs]
def GetPixelDataInRect(*args) -> "GM_Error_t32":
    r"""
    GetPixelDataInRect(GM_LayerHandle_t32 aLayer, GM_PixelRect_t aPixelRect, GM_RasterLayout_t aRasterLayout, int aDataBuf, uint32 aReserved=0) -> GM_Error_t32

    	Parameters
    	----------
    	aLayer: GM_LayerHandle_t32
    	aPixelRect: GM_PixelRect_t
    	aRasterLayout: GM_RasterLayout_t
    	aDataBuf: int
    	aReserved: uint32


    """
    return _globalmapper.GetPixelDataInRect(*args)


[docs]
def GetPixelElevation(aLayer: "GM_LayerHandle_t32", aRow: "sint32", aCol: "sint32") -> "float *":
    r"""
    GetPixelElevation(GM_LayerHandle_t32 aLayer, sint32 aRow, sint32 aCol) -> GM_Error_t32, float

    	Parameters
    	----------
    	aLayer: GM_LayerHandle_t32
    	aRow: sint32
    	aCol: sint32


    """
    return _globalmapper.GetPixelElevation(aLayer, aRow, aCol)


[docs]
def GetPixelElevationRow(aLayer: "GM_LayerHandle_t32", aRow: "sint32", aElevRow: "float *", aInvalidVal: "float") -> "GM_Error_t32":
    r"""
    GetPixelElevationRow(GM_LayerHandle_t32 aLayer, sint32 aRow, float_array aElevRow, float aInvalidVal) -> GM_Error_t32

    	Parameters
    	----------
    	aLayer: GM_LayerHandle_t32
    	aRow: sint32
    	aElevRow: float_array
    	aInvalidVal: float


    """
    return _globalmapper.GetPixelElevationRow(aLayer, aRow, aElevRow, aInvalidVal)


[docs]
def FindFeaturesInArea(*args) -> "GM_FoundFeatureResults_t *":
    r"""
    FindFeaturesInArea([GM_LayerHandle_t32] aLayerList, GM_FindFlags_t32 aFindFlags, GM_AreaFeature_t aAreaToSearch, GM_Projection_t aAreaProj, uint32 aReserved=0) -> GM_Error_t32, GM_FoundFeatureResults_t

    	Parameters
    	----------
    	aLayerList: [GM_LayerHandle_t32]
    	aFindFlags: GM_FindFlags_t32
    	aAreaToSearch: GM_AreaFeature_t
    	aAreaProj: GM_Projection_t
    	aReserved: uint32


    """
    return _globalmapper.FindFeaturesInArea(*args)


[docs]
def FindNearestAddress(*args) -> "uint32":
    r"""
    FindNearestAddress(GM_Point_t aSearchPt, [GM_LayerHandle_t32] aLayerList, float aMaxDistMeters, uint32 aReserved=0) -> GM_Error_t32, str

    	Parameters
    	----------
    	aSearchPt: GM_Point_t
    	aLayerList: [GM_LayerHandle_t32]
    	aMaxDistMeters: float
    	aReserved: uint32


    """
    return _globalmapper.FindNearestAddress(*args)


[docs]
def FindNearestFeatures(aPixelSearchPt: "GM_Point_t", aLayerList: "GM_LayerHandle_t32 *", aFindFlags: "GM_FindFlags_t32", aWorldBounds: "GM_Rectangle_t", aPixelRect: "GM_PixelRect_t", MAX_OUTPUT_LEN: "uint32", aMaxDistPixels: "uint32") -> "uint32 *":
    r"""
    FindNearestFeatures(GM_Point_t aPixelSearchPt, [GM_LayerHandle_t32] aLayerList, GM_FindFlags_t32 aFindFlags, GM_Rectangle_t aWorldBounds, GM_PixelRect_t aPixelRect, uint32 MAX_OUTPUT_LEN, uint32 aMaxDistPixels) -> GM_Error_t32, GM_FoundFeature_t, uint32

    	Parameters
    	----------
    	aPixelSearchPt: GM_Point_t
    	aLayerList: [GM_LayerHandle_t32]
    	aFindFlags: GM_FindFlags_t32
    	aWorldBounds: GM_Rectangle_t
    	aPixelRect: GM_PixelRect_t
    	MAX_OUTPUT_LEN: uint32
    	aMaxDistPixels: uint32


    """
    return _globalmapper.FindNearestFeatures(aPixelSearchPt, aLayerList, aFindFlags, aWorldBounds, aPixelRect, MAX_OUTPUT_LEN, aMaxDistPixels)


[docs]
def FreeAreaFeature(aAreaFeature: "GM_AreaFeature_t") -> "void":
    r"""
    FreeAreaFeature(GM_AreaFeature_t aAreaFeature) -> None

    	Parameters
    	----------
    	aAreaFeature: GM_AreaFeature_t


    """
    return _globalmapper.FreeAreaFeature(aAreaFeature)


[docs]
def FreeFeatureResultList(aResultList: "GM_FoundFeatureResults_t") -> "GM_Error_t32":
    r"""
    FreeFeatureResultList(GM_FoundFeatureResults_t aResultList) -> GM_Error_t32

    	Parameters
    	----------
    	aResultList: GM_FoundFeatureResults_t


    """
    return _globalmapper.FreeFeatureResultList(aResultList)


[docs]
def FreeLineFeature(aLineFeature: "GM_LineFeature_t") -> "void":
    r"""
    FreeLineFeature(GM_LineFeature_t aLineFeature) -> None

    	Parameters
    	----------
    	aLineFeature: GM_LineFeature_t


    """
    return _globalmapper.FreeLineFeature(aLineFeature)


[docs]
def FreePointFeature(aPointFeature: "GM_PointFeature_t") -> "void":
    r"""
    FreePointFeature(GM_PointFeature_t aPointFeature) -> None

    	Parameters
    	----------
    	aPointFeature: GM_PointFeature_t


    """
    return _globalmapper.FreePointFeature(aPointFeature)


[docs]
def GetAreaFeature(aLayer: "GM_LayerHandle_t32", aAreaIndex: "uint32") -> "GM_AreaFeature_t *":
    r"""
    GetAreaFeature(GM_LayerHandle_t32 aLayer, uint32 aAreaIndex) -> GM_AreaFeature_t

    	Parameters
    	----------
    	aLayer: GM_LayerHandle_t32
    	aAreaIndex: uint32


    """
    return _globalmapper.GetAreaFeature(aLayer, aAreaIndex)


[docs]
def GetAreaFeatureEx(*args) -> "GM_AreaFeature_t *":
    r"""
    GetAreaFeatureEx(GM_LayerHandle_t32 aLayer, uint32 aAreaIndex, GM_GetFeatureFlags_t32 aFlags, uint32 aReserved=0) -> GM_AreaFeature_t

    	Parameters
    	----------
    	aLayer: GM_LayerHandle_t32
    	aAreaIndex: uint32
    	aFlags: GM_GetFeatureFlags_t32
    	aReserved: uint32


    """
    return _globalmapper.GetAreaFeatureEx(*args)


[docs]
def GetFeatureElevation(aLayer: "GM_LayerHandle_t32", aFeatureClassType: "GM_FeatureClassType_t8", aFeatureIndex: "uint32") -> "float *":
    r"""
    GetFeatureElevation(GM_LayerHandle_t32 aLayer, GM_FeatureClassType_t8 aFeatureClassType, uint32 aFeatureIndex) -> GM_Error_t32, float

    	Parameters
    	----------
    	aLayer: GM_LayerHandle_t32
    	aFeatureClassType: GM_FeatureClassType_t8
    	aFeatureIndex: uint32


    """
    return _globalmapper.GetFeatureElevation(aLayer, aFeatureClassType, aFeatureIndex)


[docs]
def GetLineFeature(aLayer: "GM_LayerHandle_t32", aLineIndex: "uint32") -> "GM_LineFeature_t *":
    r"""
    GetLineFeature(GM_LayerHandle_t32 aLayer, uint32 aLineIndex) -> GM_LineFeature_t

    	Parameters
    	----------
    	aLayer: GM_LayerHandle_t32
    	aLineIndex: uint32


    """
    return _globalmapper.GetLineFeature(aLayer, aLineIndex)


[docs]
def GetLineFeatureEx(*args) -> "GM_LineFeature_t *":
    r"""
    GetLineFeatureEx(GM_LayerHandle_t32 aLayer, uint32 aLineIndex, GM_GetFeatureFlags_t32 aFlags, uint32 aReserved=0) -> GM_LineFeature_t

    	Parameters
    	----------
    	aLayer: GM_LayerHandle_t32
    	aLineIndex: uint32
    	aFlags: GM_GetFeatureFlags_t32
    	aReserved: uint32


    """
    return _globalmapper.GetLineFeatureEx(*args)


[docs]
def GetPointFeature(aLayer: "GM_LayerHandle_t32", aPointIndex: "uint32") -> "GM_PointFeature_t *":
    r"""
    GetPointFeature(GM_LayerHandle_t32 aLayer, uint32 aPointIndex) -> GM_PointFeature_t

    	Parameters
    	----------
    	aLayer: GM_LayerHandle_t32
    	aPointIndex: uint32


    """
    return _globalmapper.GetPointFeature(aLayer, aPointIndex)


[docs]
def GetPointFeatureEx(*args) -> "GM_PointFeature_t *":
    r"""
    GetPointFeatureEx(GM_LayerHandle_t32 aLayer, uint32 aPointIndex, GM_GetFeatureFlags_t32 aFlags, uint32 aReserved=0) -> GM_PointFeature_t

    	Parameters
    	----------
    	aLayer: GM_LayerHandle_t32
    	aLineIndex: uint32
    	aFlags: GM_GetFeatureFlags_t32
    	aReserved: uint32


    """
    return _globalmapper.GetPointFeatureEx(*args)


[docs]
def GetSelectedFeatures(*args) -> "GM_FoundFeatureResults_t *":
    r"""
    GetSelectedFeatures(GM_SelectFlags_t32 aFlags, uint32 aReserved=0) -> GM_Error_t32, GM_FoundFeatureResults_t

    	Parameters
    	----------
    	aFlags: GM_SelectFlags_t32
    	aReserved: uint32


    """
    return _globalmapper.GetSelectedFeatures(*args)


[docs]
def DeleteFeature(aLayer: "GM_LayerHandle_t32", aFeatureClassType: "GM_FeatureClassType_t8", aFeatureIndex: "uint32", aDelete: "boolean") -> "GM_Error_t32":
    r"""
    DeleteFeature(GM_LayerHandle_t32 aLayer, GM_FeatureClassType_t8 aFeatureClassType, uint32 aFeatureIndex, boolean aDelete) -> GM_Error_t32

    	Parameters
    	----------
    	aLayer: GM_LayerHandle_t32
    	aFeatureClassType: GM_FeatureClassType_t8
    	aFeatureIndex: uint32
    	aDelete: boolean


    """
    return _globalmapper.DeleteFeature(aLayer, aFeatureClassType, aFeatureIndex, aDelete)


[docs]
def DeleteHoleInArea(aLayer: "GM_LayerHandle_t32", aAreaIndex: "uint32", aHoleIndex: "uint32", aDelete: "boolean") -> "GM_Error_t32":
    r"""
    DeleteHoleInArea(GM_LayerHandle_t32 aLayer, uint32 aAreaIndex, uint32 aHoleIndex, boolean aDelete) -> GM_Error_t32

    	Parameters
    	----------
    	aLayer: GM_LayerHandle_t32
    	aAreaIndex: uint32
    	aHoleIndex: uint32
    	aDelete: boolean


    """
    return _globalmapper.DeleteHoleInArea(aLayer, aAreaIndex, aHoleIndex, aDelete)


[docs]
def IsFeatureDeleted(aLayer: "GM_LayerHandle_t32", aFeatureClassType: "GM_FeatureClassType_t8", aFeatureIndex: "uint32") -> "unsigned char *":
    r"""
    IsFeatureDeleted(GM_LayerHandle_t32 aLayer, GM_FeatureClassType_t8 aFeatureClassType, uint32 aFeatureIndex) -> GM_Error_t32, boolean

    	Parameters
    	----------
    	aLayer: GM_LayerHandle_t32
    	aFeatureClassType: GM_FeatureClassType_t8
    	aFeatureIndex: uint32


    """
    return _globalmapper.IsFeatureDeleted(aLayer, aFeatureClassType, aFeatureIndex)


[docs]
def IsHoleInAreaDeleted(aLayer: "GM_LayerHandle_t32", aAreaIndex: "uint32", aHoleIndex: "uint32") -> "unsigned char *":
    r"""
    IsHoleInAreaDeleted(GM_LayerHandle_t32 aLayer, uint32 aAreaIndex, uint32 aHoleIndex) -> GM_Error_t32, boolean

    	Parameters
    	----------
    	aLayer: GM_LayerHandle_t32
    	aAreaIndex: uint32
    	aHoleIndex: uint32


    """
    return _globalmapper.IsHoleInAreaDeleted(aLayer, aAreaIndex, aHoleIndex)


[docs]
def SetAreaFeaturePointList(aLayer: "GM_LayerHandle_t32", aAreaIndex: "uint32", aHoleIndex: "uint32", aPointList: "GM_Point_t", aPosInLayerCoords: "boolean") -> "GM_Error_t32":
    r"""
    SetAreaFeaturePointList(GM_LayerHandle_t32 aLayer, uint32 aAreaIndex, uint32 aHoleIndex, GM_Point_t aPointList, boolean aPosInLayerCoords) -> GM_Error_t32

    	Parameters
    	----------
    	aLayer: GM_LayerHandle_t32
    	aAreaIndex: uint32
    	aHoleIndex: uint32
    	aPointList: GM_Point_t
    	aPosInLayerCoords: boolean


    """
    return _globalmapper.SetAreaFeaturePointList(aLayer, aAreaIndex, aHoleIndex, aPointList, aPosInLayerCoords)


[docs]
def SetAreaFeaturePointListEx(aLayer: "GM_LayerHandle_t32", aAreaIndex: "uint32", aHoleIndex: "uint32", aPointList: "GM_Point_t", aPosInLayerCoords: "boolean", aElevList: "float const *") -> "GM_Error_t32":
    r"""
    SetAreaFeaturePointListEx(GM_LayerHandle_t32 aLayer, uint32 aAreaIndex, uint32 aHoleIndex, [GM_Point_t] aPointList, boolean aPosInLayerCoords, float_array aElevList) -> GM_Error_t32

    	Parameters
    	----------
    	aLayer: GM_LayerHandle_t32
    	aAreaIndex: uint32
    	aHoleIndex: uint32
    	aPointList: [GM_Point_t]
    	aPosInLayerCoords: boolean
    	aElevList: float_array


    """
    return _globalmapper.SetAreaFeaturePointListEx(aLayer, aAreaIndex, aHoleIndex, aPointList, aPosInLayerCoords, aElevList)


[docs]
def SetFeatureAttrList(aLayer: "GM_LayerHandle_t32", aFeatureClassType: "GM_FeatureClassType_t8", aFeatureIndex: "uint32", aAttrList: "GM_AttrValue_t", aNumAttrs: "uint16") -> "GM_Error_t32":
    r"""
    SetFeatureAttrList(GM_LayerHandle_t32 aLayer, GM_FeatureClassType_t8 aFeatureClassType, uint32 aFeatureIndex, GM_AttrValue_t aAttrList, uint16 aNumAttrs) -> GM_Error_t32

    	Parameters
    	----------
    	aLayer: GM_LayerHandle_t32
    	aFeatureClassType: GM_FeatureClassType_t8
    	aFeatureIndex: uint32
    	aAttrList: GM_AttrValue_t
    	aNumAttrs: uint16


    """
    return _globalmapper.SetFeatureAttrList(aLayer, aFeatureClassType, aFeatureIndex, aAttrList, aNumAttrs)


[docs]
def SetFeatureClass(aLayer: "GM_LayerHandle_t32", aFeatureClassType: "GM_FeatureClassType_t8", aFeatureIndex: "uint32", aFeatureClass: "FeatureClass_t16") -> "GM_Error_t32":
    r"""
    SetFeatureClass(GM_LayerHandle_t32 aLayer, GM_FeatureClassType_t8 aFeatureClassType, uint32 aFeatureIndex, FeatureClass_t16 aFeatureClass) -> GM_Error_t32

    	Parameters
    	----------
    	aLayer: GM_LayerHandle_t32
    	aFeatureClassType: GM_FeatureClassType_t8
    	aFeatureIndex: uint32
    	aFeatureClass: FeatureClass_t16


    """
    return _globalmapper.SetFeatureClass(aLayer, aFeatureClassType, aFeatureIndex, aFeatureClass)


[docs]
def SetFeatureDescription(aLayer: "GM_LayerHandle_t32", aFeatureClassType: "GM_FeatureClassType_t8", aFeatureIndex: "uint32", aDesc: "char const *") -> "GM_Error_t32":
    r"""
    SetFeatureDescription(GM_LayerHandle_t32 aLayer, GM_FeatureClassType_t8 aFeatureClassType, uint32 aFeatureIndex, str aDesc) -> GM_Error_t32

    	Parameters
    	----------
    	aLayer: GM_LayerHandle_t32
    	aFeatureClassType: GM_FeatureClassType_t8
    	aFeatureIndex: uint32
    	aDesc: str


    """
    return _globalmapper.SetFeatureDescription(aLayer, aFeatureClassType, aFeatureIndex, aDesc)


[docs]
def SetFeatureLabel(aLayer: "GM_LayerHandle_t32", aFeatureClassType: "GM_FeatureClassType_t8", aFeatureIndex: "uint32", aLabel: "char const *") -> "GM_Error_t32":
    r"""
    SetFeatureLabel(GM_LayerHandle_t32 aLayer, GM_FeatureClassType_t8 aFeatureClassType, uint32 aFeatureIndex, str aLabel) -> GM_Error_t32

    	Parameters
    	----------
    	aLayer: GM_LayerHandle_t32
    	aFeatureClassType: GM_FeatureClassType_t8
    	aFeatureIndex: uint32
    	aLabel: str


    """
    return _globalmapper.SetFeatureLabel(aLayer, aFeatureClassType, aFeatureIndex, aLabel)


[docs]
def SetLayerCodePage(aLayer: "GM_LayerHandle_t32", aCodePage: "sint32") -> "GM_Error_t32":
    r"""
    SetLayerCodePage(GM_LayerHandle_t32 aLayer, sint32 aCodePage) -> GM_Error_t32

    	Parameters
    	----------
    	aLayer: GM_LayerHandle_t32
    	aCodePage: sint32


    """
    return _globalmapper.SetLayerCodePage(aLayer, aCodePage)


[docs]
def SetLayerDescription(aLayer: "GM_LayerHandle_t32", aDesc: "char const *") -> "GM_Error_t32":
    r"""
    SetLayerDescription(GM_LayerHandle_t32 aLayer, str aDesc) -> GM_Error_t32

    	Parameters
    	----------
    	aLayer: GM_LayerHandle_t32
    	aDesc: str


    """
    return _globalmapper.SetLayerDescription(aLayer, aDesc)


[docs]
def SetLayerElevationAttribute(aLayer: "GM_LayerHandle_t32", aAttrName: "char const *", aReserved: "uint32") -> "GM_Error_t32":
    r"""
    SetLayerElevationAttribute(GM_LayerHandle_t32 aLayer, str aAttrName, uint32 aReserved=0) -> GM_Error_t32

    	Parameters
    	----------
    	aLayer: GM_LayerHandle_t32
    	aAttrName: str
    	aReserved: uint32


    """
    return _globalmapper.SetLayerElevationAttribute(aLayer, aAttrName, aReserved)


[docs]
def SetLayerElevationUnits(aLayer: "GM_LayerHandle_t32", aElevUnits: "GM_ElevUnits_t8") -> "GM_Error_t32":
    r"""
    SetLayerElevationUnits(GM_LayerHandle_t32 aLayer, GM_ElevUnits_t8 aElevUnits) -> GM_Error_t32

    	Parameters
    	----------
    	aLayer: GM_LayerHandle_t32
    	aElevUnits: GM_ElevUnits_t8


    """
    return _globalmapper.SetLayerElevationUnits(aLayer, aElevUnits)


[docs]
def SetLayerHeightAttribute(aLayer: "GM_LayerHandle_t32", aAttrName: "char const *", aReserved: "uint32") -> "GM_Error_t32":
    r"""
    SetLayerHeightAttribute(GM_LayerHandle_t32 aLayer, str aAttrName, uint32 aReserved=0) -> GM_Error_t32

    	Parameters
    	----------
    	aLayer: GM_LayerHandle_t32
    	aAttrName: str
    	aReserved: uint32


    """
    return _globalmapper.SetLayerHeightAttribute(aLayer, aAttrName, aReserved)


[docs]
def SetLayerHeightUnits(aLayer: "GM_LayerHandle_t32", aHeightUnits: "GM_ElevUnits_t8") -> "GM_Error_t32":
    r"""
    SetLayerHeightUnits(GM_LayerHandle_t32 aLayer, GM_ElevUnits_t8 aHeightUnits) -> GM_Error_t32

    	Parameters
    	----------
    	aLayer: GM_LayerHandle_t32
    	aHeightUnits: GM_ElevUnits_t8


    """
    return _globalmapper.SetLayerHeightUnits(aLayer, aHeightUnits)


[docs]
def SetLayerLabelAttribute(aLayer: "GM_LayerHandle_t32", aAttrName: "char const *", aReserved: "uint32") -> "GM_Error_t32":
    r"""
    SetLayerLabelAttribute(GM_LayerHandle_t32 aLayer, str aAttrName, uint32 aReserved=0) -> GM_Error_t32

    	Parameters
    	----------
    	aLayer: GM_LayerHandle_t32
    	aAttrName: str
    	aReserved: uint32


    """
    return _globalmapper.SetLayerLabelAttribute(aLayer, aAttrName, aReserved)


[docs]
def SetLayerUserData(aLayer: "GM_LayerHandle_t32", aUserData: "void *") -> "GM_Error_t32":
    r"""
    SetLayerUserData(GM_LayerHandle_t32 aLayer, int aUserData) -> GM_Error_t32

    	Parameters
    	----------
    	aLayer: GM_LayerHandle_t32
    	aUserData: int


    """
    return _globalmapper.SetLayerUserData(aLayer, aUserData)


[docs]
def SetLayerUserText(aLayer: "GM_LayerHandle_t32", aUserText: "char const *") -> "GM_Error_t32":
    r"""
    SetLayerUserText(GM_LayerHandle_t32 aLayer, str aUserText) -> GM_Error_t32

    	Parameters
    	----------
    	aLayer: GM_LayerHandle_t32
    	aUserText: str


    """
    return _globalmapper.SetLayerUserText(aLayer, aUserText)


[docs]
def SetLineFeaturePointList(aLayer: "GM_LayerHandle_t32", aLineIndex: "uint32", aPointList: "GM_Point_t", aPosInLayerCoords: "boolean") -> "GM_Error_t32":
    r"""
    SetLineFeaturePointList(GM_LayerHandle_t32 aLayer, uint32 aLineIndex, GM_Point_t aPointList, boolean aPosInLayerCoords) -> GM_Error_t32

    	Parameters
    	----------
    	aLayer: GM_LayerHandle_t32
    	aLineIndex: uint32
    	aPointList: GM_Point_t
    	aPosInLayerCoords: boolean


    """
    return _globalmapper.SetLineFeaturePointList(aLayer, aLineIndex, aPointList, aPosInLayerCoords)


[docs]
def SetLineFeaturePointListEx(aLayer: "GM_LayerHandle_t32", aLineIndex: "uint32", aPointList: "GM_Point_t", aPosInLayerCoords: "boolean", aElevList: "float const *") -> "GM_Error_t32":
    r"""
    SetLineFeaturePointListEx(GM_LayerHandle_t32 aLayer, uint32 aLineIndex, [GM_Point_t] aPointList, boolean aPosInLayerCoords, float_array aElevList) -> GM_Error_t32

    	Parameters
    	----------
    	aLayer: GM_LayerHandle_t32
    	aLineIndex: uint32
    	aPointList: [GM_Point_t]
    	aPosInLayerCoords: boolean
    	aElevList: float_array


    """
    return _globalmapper.SetLineFeaturePointListEx(aLayer, aLineIndex, aPointList, aPosInLayerCoords, aElevList)


[docs]
def SetPointFeaturePosition(aLayer: "GM_LayerHandle_t32", aPointIndex: "uint32", aPosition: "GM_Point_t", aPosInLayerCoords: "boolean") -> "GM_Error_t32":
    r"""
    SetPointFeaturePosition(GM_LayerHandle_t32 aLayer, uint32 aPointIndex, GM_Point_t aPosition, boolean aPosInLayerCoords) -> GM_Error_t32

    	Parameters
    	----------
    	aLayer: GM_LayerHandle_t32
    	aPointIndex: uint32
    	aPosition: GM_Point_t
    	aPosInLayerCoords: boolean


    """
    return _globalmapper.SetPointFeaturePosition(aLayer, aPointIndex, aPosition, aPosInLayerCoords)


[docs]
def AddCustomAreaClass(aName: "char const *", aStyle: "GM_AreaStyle_t") -> "AreaFeatureClass_t16 *":
    r"""
    AddCustomAreaClass(str aName, GM_AreaStyle_t aStyle) -> GM_Error_t32, AreaFeatureClass_t16

    	Parameters
    	----------
    	aName: str
    	aStyle: GM_AreaStyle_t


    """
    return _globalmapper.AddCustomAreaClass(aName, aStyle)


[docs]
def AddCustomBrushStyle(aImageFilename: "char const *", aStyleName: "char const *") -> "GM_BrushStyle_t16 *":
    r"""
    AddCustomBrushStyle(str aImageFilename, str aStyleName) -> GM_Error_t32, GM_BrushStyle_t16

    	Parameters
    	----------
    	aImageFilename: str
    	aStyleName: str


    """
    return _globalmapper.AddCustomBrushStyle(aImageFilename, aStyleName)


[docs]
def AddCustomLineClass(aName: "char const *", aStyle: "GM_LineStyle_t") -> "LineFeatureClass_t16 *":
    r"""
    AddCustomLineClass(str aName, GM_LineStyle_t aStyle) -> GM_Error_t32, LineFeatureClass_t16

    	Parameters
    	----------
    	aName: str
    	aStyle: GM_LineStyle_t


    """
    return _globalmapper.AddCustomLineClass(aName, aStyle)


[docs]
def AddCustomPointClass(aName: "char const *", aStyle: "GM_PointStyle_t") -> "unsigned short *":
    r"""
    AddCustomPointClass(str aName, GM_PointStyle_t aStyle) -> GM_Error_t32, PointFeatureClass_t16

    	Parameters
    	----------
    	aName: str
    	aStyle: GM_PointStyle_t


    """
    return _globalmapper.AddCustomPointClass(aName, aStyle)


[docs]
def AddCustomSymbol(aSymbolFilename: "char const *", aSymbolName: "char const *") -> "GM_Error_t32":
    r"""
    AddCustomSymbol(str aSymbolFilename, str aSymbolName) -> GM_Error_t32

    	Parameters
    	----------
    	aSymbolFilename: str
    	aSymbolName: str


    """
    return _globalmapper.AddCustomSymbol(aSymbolFilename, aSymbolName)


[docs]
def AddHoleInArea(aLayer: "GM_LayerHandle_t32", aAreaIndex: "uint32", aNewHoleDef: "GM_HoleInArea_t", aCheckHoleInParent: "boolean") -> "GM_Error_t32":
    r"""
    AddHoleInArea(GM_LayerHandle_t32 aLayer, uint32 aAreaIndex, GM_HoleInArea_t aNewHoleDef, boolean aCheckHoleInParent) -> GM_Error_t32

    	Parameters
    	----------
    	aLayer: GM_LayerHandle_t32
    	aAreaIndex: uint32
    	aNewHoleDef: GM_HoleInArea_t
    	aCheckHoleInParent: boolean


    """
    return _globalmapper.AddHoleInArea(aLayer, aAreaIndex, aNewHoleDef, aCheckHoleInParent)


[docs]
def GetAreaFeatureClassDrawStyle(aFeatureClass: "AreaFeatureClass_t16") -> "GM_AreaStyle_t *":
    r"""
    GetAreaFeatureClassDrawStyle(AreaFeatureClass_t16 aFeatureClass) -> GM_Error_t32, GM_AreaStyle_t

    	Parameters
    	----------
    	aFeatureClass: AreaFeatureClass_t16


    """
    return _globalmapper.GetAreaFeatureClassDrawStyle(aFeatureClass)


[docs]
def GetAvailableSymbolNames() -> "uint32 *":
    r"""GetAvailableSymbolNames() -> [str]"""
    return _globalmapper.GetAvailableSymbolNames()


[docs]
def GetLineFeatureClassDrawStyle(aFeatureClass: "LineFeatureClass_t16") -> "GM_LineStyle_t *":
    r"""
    GetLineFeatureClassDrawStyle(LineFeatureClass_t16 aFeatureClass) -> GM_Error_t32, GM_LineStyle_t

    	Parameters
    	----------
    	aFeatureClass: LineFeatureClass_t16


    """
    return _globalmapper.GetLineFeatureClassDrawStyle(aFeatureClass)


[docs]
def GetPointFeatureClassDrawStyle(aFeatureClass: "PointFeatureClass_t16") -> "GM_PointStyle_t *":
    r"""
    GetPointFeatureClassDrawStyle(PointFeatureClass_t16 aFeatureClass) -> GM_Error_t32, GM_PointStyle_t

    	Parameters
    	----------
    	aFeatureClass: PointFeatureClass_t16


    """
    return _globalmapper.GetPointFeatureClassDrawStyle(aFeatureClass)


[docs]
def RemoveCustomBrushStyle(aBrushName: "char const *") -> "GM_Error_t32":
    r"""
    RemoveCustomBrushStyle(str aBrushName) -> GM_Error_t32

    	Parameters
    	----------
    	aBrushName: str


    """
    return _globalmapper.RemoveCustomBrushStyle(aBrushName)


[docs]
def RemoveCustomSymbol(aSymbolName: "char const *") -> "GM_Error_t32":
    r"""
    RemoveCustomSymbol(str aSymbolName) -> GM_Error_t32

    	Parameters
    	----------
    	aSymbolName: str


    """
    return _globalmapper.RemoveCustomSymbol(aSymbolName)


[docs]
def SelectAreaStyle(aAreaStyle: "GM_AreaStyle_t") -> "GM_Error_t32":
    r"""
    SelectAreaStyle(GM_AreaStyle_t aAreaStyle) -> GM_Error_t32

    	Parameters
    	----------
    	aAreaStyle: GM_AreaStyle_t


    """
    return _globalmapper.SelectAreaStyle(aAreaStyle)


[docs]
def SelectFont(aFontDef: "GM_FontDef_t") -> "GM_Error_t32":
    r"""
    SelectFont(GM_FontDef_t aFontDef) -> GM_Error_t32

    	Parameters
    	----------
    	aFontDef: GM_FontDef_t


    """
    return _globalmapper.SelectFont(aFontDef)


[docs]
def SelectLineStyle(aLineStyle: "GM_LineStyle_t") -> "GM_Error_t32":
    r"""
    SelectLineStyle(GM_LineStyle_t aLineStyle) -> GM_Error_t32

    	Parameters
    	----------
    	aLineStyle: GM_LineStyle_t


    """
    return _globalmapper.SelectLineStyle(aLineStyle)


[docs]
def SetAreaFeatureClassDrawStyle(aFeatureClass: "AreaFeatureClass_t16", aAreaStyle: "GM_AreaStyle_t") -> "GM_Error_t32":
    r"""
    SetAreaFeatureClassDrawStyle(AreaFeatureClass_t16 aFeatureClass, GM_AreaStyle_t aAreaStyle) -> GM_Error_t32

    	Parameters
    	----------
    	aFeatureClass: AreaFeatureClass_t16
    	aAreaStyle: GM_AreaStyle_t


    """
    return _globalmapper.SetAreaFeatureClassDrawStyle(aFeatureClass, aAreaStyle)


[docs]
def SetAreaFeatureDrawStyle(aLayer: "GM_LayerHandle_t32", aAreaIndex: "uint32", aAreaStyle: "GM_AreaStyle_t") -> "GM_Error_t32":
    r"""
    SetAreaFeatureDrawStyle(GM_LayerHandle_t32 aLayer, uint32 aAreaIndex, GM_AreaStyle_t aAreaStyle) -> GM_Error_t32

    	Parameters
    	----------
    	aLayer: GM_LayerHandle_t32
    	aAreaIndex: uint32
    	aAreaStyle: GM_AreaStyle_t


    """
    return _globalmapper.SetAreaFeatureDrawStyle(aLayer, aAreaIndex, aAreaStyle)


[docs]
def SetLineFeatureClassDrawStyle(aFeatureClass: "LineFeatureClass_t16", aLineStyle: "GM_LineStyle_t") -> "GM_Error_t32":
    r"""
    SetLineFeatureClassDrawStyle(LineFeatureClass_t16 aFeatureClass, GM_LineStyle_t aLineStyle) -> GM_Error_t32

    	Parameters
    	----------
    	aFeatureClass: LineFeatureClass_t16
    	aLineStyle: GM_LineStyle_t


    """
    return _globalmapper.SetLineFeatureClassDrawStyle(aFeatureClass, aLineStyle)


[docs]
def SetLineFeatureDrawStyle(aLayer: "GM_LayerHandle_t32", aLineIndex: "uint32", aLineStyle: "GM_LineStyle_t") -> "GM_Error_t32":
    r"""
    SetLineFeatureDrawStyle(GM_LayerHandle_t32 aLayer, uint32 aLineIndex, GM_LineStyle_t aLineStyle) -> GM_Error_t32

    	Parameters
    	----------
    	aLayer: GM_LayerHandle_t32
    	aLineIndex: uint32
    	aLineStyle: GM_LineStyle_t


    """
    return _globalmapper.SetLineFeatureDrawStyle(aLayer, aLineIndex, aLineStyle)


[docs]
def SetPointFeatureClassDrawStyle(aFeatureClass: "PointFeatureClass_t16", aPointStyle: "GM_PointStyle_t") -> "GM_Error_t32":
    r"""
    SetPointFeatureClassDrawStyle(PointFeatureClass_t16 aFeatureClass, GM_PointStyle_t aPointStyle) -> GM_Error_t32

    	Parameters
    	----------
    	aFeatureClass: PointFeatureClass_t16
    	aPointStyle: GM_PointStyle_t


    """
    return _globalmapper.SetPointFeatureClassDrawStyle(aFeatureClass, aPointStyle)


[docs]
def SetPointFeatureDrawStyle(aLayer: "GM_LayerHandle_t32", aPointIndex: "uint32", aPointStyle: "GM_PointStyle_t") -> "GM_Error_t32":
    r"""
    SetPointFeatureDrawStyle(GM_LayerHandle_t32 aLayer, uint32 aPointIndex, GM_PointStyle_t aPointStyle) -> GM_Error_t32

    	Parameters
    	----------
    	aLayer: GM_LayerHandle_t32
    	aPointIndex: uint32
    	aPointStyle: GM_PointStyle_t


    """
    return _globalmapper.SetPointFeatureDrawStyle(aLayer, aPointIndex, aPointStyle)


[docs]
def GetFeatureClassInfo(aFeatureClass: "FeatureClass_t16", aFeatureClassType: "GM_FeatureClassType_t8") -> "GM_FeatureClassInfo_t *":
    r"""
    GetFeatureClassInfo(FeatureClass_t16 aFeatureClass, GM_FeatureClassType_t8 aFeatureClassType) -> GM_Error_t32, GM_FeatureClassInfo_t

    	Parameters
    	----------
    	aFeatureClass: FeatureClass_t16
    	aFeatureClassType: GM_FeatureClassType_t8


    """
    return _globalmapper.GetFeatureClassInfo(aFeatureClass, aFeatureClassType)


[docs]
def SetFeatureClassEnabled(aFeatureClass: "FeatureClass_t16", aFeatureClassType: "GM_FeatureClassType_t8", aEnable: "boolean") -> "boolean":
    r"""
    SetFeatureClassEnabled(FeatureClass_t16 aFeatureClass, GM_FeatureClassType_t8 aFeatureClassType, boolean aEnable) -> GM_Error_t32

    	Parameters
    	----------
    	aFeatureClass: FeatureClass_t16
    	aFeatureClassType: GM_FeatureClassType_t8
    	aEnable: boolean


    """
    return _globalmapper.SetFeatureClassEnabled(aFeatureClass, aFeatureClassType, aEnable)


[docs]
def CalcAreaElevStats(*args) -> "GM_AreaElevStats_t *":
    r"""
    CalcAreaElevStats([GM_LayerHandle_t32] aLayerList, GM_Point_t aPointList, float aXSpacing, float aYSpacing, uint32 aReserved=0) -> GM_Error_t32, GM_AreaElevStats_t

    	Parameters
    	----------
    	aLayerList: [GM_LayerHandle_t32]
    	aPointList: GM_Point_t
    	aXSpacing: float
    	aYSpacing: float
    	aReserved: uint32


    """
    return _globalmapper.CalcAreaElevStats(*args)


[docs]
def CalcViewShed(aLayer: "GM_LayerHandle_t32", aViewShedParms: "GM_ViewShedParams_t") -> "GM_LayerHandle_t32 *":
    r"""
    CalcViewShed(GM_LayerHandle_t32 aLayer, GM_ViewShedParams_t aViewShedParms) -> GM_Error_t32, GM_LayerHandle_t32

    	Parameters
    	----------
    	aLayer: GM_LayerHandle_t32
    	aViewShedParms: GM_ViewShedParams_t


    """
    return _globalmapper.CalcViewShed(aLayer, aViewShedParms)


[docs]
def CalcVolumeAlongLine(aLayer: "GM_LayerHandle_t32", aVolumeParms: "GM_LineVolumeParams_t") -> "double *, double *":
    r"""
    CalcVolumeAlongLine(GM_LayerHandle_t32 aLayer, GM_LineVolumeParams_t aVolumeParms) -> GM_Error_t32, float, float

    	Parameters
    	----------
    	aLayer: GM_LayerHandle_t32
    	aVolumeParms: GM_LineVolumeParams_t


    """
    return _globalmapper.CalcVolumeAlongLine(aLayer, aVolumeParms)


[docs]
def CalcVolumeOfArea(aLayer: "GM_LayerHandle_t32", aVolumeParms: "GM_AreaVolumeParams_t") -> "double *, double *":
    r"""
    CalcVolumeOfArea(GM_LayerHandle_t32 aLayer, GM_AreaVolumeParams_t aVolumeParms) -> GM_Error_t32, float, float

    	Parameters
    	----------
    	aLayer: GM_LayerHandle_t32
    	aVolumeParms: GM_AreaVolumeParams_t


    """
    return _globalmapper.CalcVolumeOfArea(aLayer, aVolumeParms)


[docs]
def CombineTerrainLayers(*args) -> "GM_LayerHandle_t32 *":
    r"""
    CombineTerrainLayers(GM_GridCombineSetup_t aSetup, uint32 aReserved=0) -> GM_Error_t32, GM_LayerHandle_t32

    	Parameters
    	----------
    	aSetup: GM_GridCombineSetup_t
    	aReserved: uint32


    """
    return _globalmapper.CombineTerrainLayers(*args)


[docs]
def GenerateAreasFromEqualValues(aLayer: "GM_LayerHandle_t32", aSetup: "GM_EqualValueAreaSetup_t") -> "GM_LayerHandle_t32 *":
    r"""
    GenerateAreasFromEqualValues(GM_LayerHandle_t32 aLayer, GM_EqualValueAreaSetup_t aSetup) -> GM_Error_t32, GM_LayerHandle_t32

    	Parameters
    	----------
    	aLayer: GM_LayerHandle_t32
    	aSetup: GM_EqualValueAreaSetup_t


    """
    return _globalmapper.GenerateAreasFromEqualValues(aLayer, aSetup)


[docs]
def GenerateContours(aLayer: "GM_LayerHandle_t32", aContourParms: "GM_ContourParams_t") -> "GM_LayerHandle_t32 *":
    r"""
    GenerateContours(GM_LayerHandle_t32 aLayer, GM_ContourParams_t aContourParms) -> GM_Error_t32, GM_LayerHandle_t32

    	Parameters
    	----------
    	aLayer: GM_LayerHandle_t32
    	aContourParms: GM_ContourParams_t


    """
    return _globalmapper.GenerateContours(aLayer, aContourParms)


[docs]
def GenerateContoursEx(aLayerList: "GM_LayerHandle_t32 *", aContourParms: "GM_ContourParams_t") -> "GM_LayerHandle_t32 *":
    r"""
    GenerateContoursEx([GM_LayerHandle_t32] aLayerList, GM_ContourParams_t aContourParms) -> GM_Error_t32, GM_LayerHandle_t32

    	Parameters
    	----------
    	aLayerList: [GM_LayerHandle_t32]
    	aContourParms: GM_ContourParams_t


    """
    return _globalmapper.GenerateContoursEx(aLayerList, aContourParms)


[docs]
def GenerateDensityGrid(aPointLayer: "GM_LayerHandle_t32", aGridParms: "GM_DensityGridParams_t") -> "GM_LayerHandle_t32 *":
    r"""
    GenerateDensityGrid(GM_LayerHandle_t32 aPointLayer, GM_DensityGridParams_t aGridParms) -> GM_Error_t32, GM_LayerHandle_t32

    	Parameters
    	----------
    	aPointLayer: GM_LayerHandle_t32
    	aGridParms: GM_DensityGridParams_t


    """
    return _globalmapper.GenerateDensityGrid(aPointLayer, aGridParms)


[docs]
def GenerateElevationGrid(aLayerList: "GM_LayerHandle_t32 *", aGridSetup: "GM_GridGenSetup_t") -> "GM_LayerHandle_t32 *, GM_LayerHandle_t32 *":
    r"""
    GenerateElevationGrid([GM_LayerHandle_t32] aLayerList, GM_GridGenSetup_t aGridSetup) -> GM_Error_t32, GM_LayerHandle_t32, GM_LayerHandle_t32

    	Parameters
    	----------
    	aLayerList: [GM_LayerHandle_t32]
    	aGridSetup: GM_GridGenSetup_t


    """
    return _globalmapper.GenerateElevationGrid(aLayerList, aGridSetup)


[docs]
def GenerateElevationGrid2(aLayerList: "GM_LayerHandle_t32 *", aGridSetup: "GM_GridGenSetup_t") -> "GM_LayerHandle_t32 *":
    r"""
    GenerateElevationGrid2([GM_LayerHandle_t32] aLayerList, GM_GridGenSetup_t aGridSetup) -> GM_Error_t32, GM_LayerHandle_t32

    	Parameters
    	----------
    	aLayerList: [GM_LayerHandle_t32]
    	aGridSetup: GM_GridGenSetup_t


    """
    return _globalmapper.GenerateElevationGrid2(aLayerList, aGridSetup)


[docs]
def GenerateRoughnessGrid(*args) -> "GM_LayerHandle_t32 *":
    r"""
    GenerateRoughnessGrid(GM_LayerHandle_t32 aLandCoverLayer, GM_RoughnessGridParams_t aGridParms, uint32 aReserved=0) -> GM_Error_t32, GM_LayerHandle_t32

    	Parameters
    	----------
    	aLandCoverLayer: GM_LayerHandle_t32
    	aGridParms: GM_RoughnessGridParams_t
    	aReserved: uint32


    """
    return _globalmapper.GenerateRoughnessGrid(*args)


[docs]
def GenerateWatershed(*args) -> "GM_LayerHandle_t32 *, GM_LayerHandle_t32 *":
    r"""
    GenerateWatershed([GM_LayerHandle_t32] aLayerList, GM_WatershedParams_t aWatershedParms, uint32 aReserved=0) -> GM_Error_t32, GM_LayerHandle_t32, GM_LayerHandle_t32

    	Parameters
    	----------
    	aLayerList: [GM_LayerHandle_t32]
    	aWatershedParms: GM_WatershedParams_t
    	aReserved: uint32


    """
    return _globalmapper.GenerateWatershed(*args)


[docs]
def GetPathProfile(aLayer: "GM_LayerHandle_t32", aStartX: "double", aStartY: "double", aEndX: "double", aEndY: "double", aElevList: "float *", aListSize: "uint32", aDfltElev: "float") -> "GM_Error_t32":
    r"""
    GetPathProfile(GM_LayerHandle_t32 aLayer, float aStartX, float aStartY, float aEndX, float aEndY, float_array aElevList, int aListSize, float aDfltElev) -> GM_Error_t32

    	Parameters
    	----------
    	aLayer: GM_LayerHandle_t32
    	aStartX: float
    	aStartY: float
    	aEndX: float
    	aEndY: float
    	aElevList: float_array
    	aListSize: int
    	aDfltElev: float


    """
    return _globalmapper.GetPathProfile(aLayer, aStartX, aStartY, aEndX, aEndY, aElevList, aListSize, aDfltElev)


[docs]
def GetPathProfileLOS(aLayer: "GM_LayerHandle_t32", aParams: "GM_PathProfileLOSParams_t") -> "GM_Error_t32":
    r"""
    GetPathProfileLOS(GM_LayerHandle_t32 aLayer, GM_PathProfileLOSParams_t aParams) -> GM_Error_t32

    	Parameters
    	----------
    	aLayer: GM_LayerHandle_t32
    	aParams: GM_PathProfileLOSParams_t


    """
    return _globalmapper.GetPathProfileLOS(aLayer, aParams)


[docs]
def GetPathProfileLOSEx(aLayerList: "GM_LayerHandle_t32 *", aParams: "GM_PathProfileLOSParams_t") -> "GM_Error_t32":
    r"""
    GetPathProfileLOSEx([GM_LayerHandle_t32] aLayerList, GM_PathProfileLOSParams_t aParams) -> GM_Error_t32

    	Parameters
    	----------
    	aLayerList: [GM_LayerHandle_t32]
    	aParams: GM_PathProfileLOSParams_t


    """
    return _globalmapper.GetPathProfileLOSEx(aLayerList, aParams)


[docs]
def MapCatalogAddFile(aCatalogLayer: "GM_LayerHandle_t32", aFilename: "char const *") -> "GM_Error_t32":
    r"""
    MapCatalogAddFile(GM_LayerHandle_t32 aCatalogLayer, str aFilename) -> GM_Error_t32

    	Parameters
    	----------
    	aCatalogLayer: GM_LayerHandle_t32
    	aFilename: str


    """
    return _globalmapper.MapCatalogAddFile(aCatalogLayer, aFilename)


[docs]
def MapCatalogAddLayer(aCatalogLayer: "GM_LayerHandle_t32", aMapLayer: "GM_LayerHandle_t32") -> "GM_Error_t32":
    r"""
    MapCatalogAddLayer(GM_LayerHandle_t32 aCatalogLayer, GM_LayerHandle_t32 aMapLayer) -> GM_Error_t32

    	Parameters
    	----------
    	aCatalogLayer: GM_LayerHandle_t32
    	aMapLayer: GM_LayerHandle_t32


    """
    return _globalmapper.MapCatalogAddLayer(aCatalogLayer, aMapLayer)


[docs]
def MapCatalogCreate(aDescription: "char const *", aProj: "GM_Projection_t") -> "GM_LayerHandle_t32":
    r"""
    MapCatalogCreate(str aDescription, GM_Projection_t aProj) -> GM_LayerHandle_t32

    	Parameters
    	----------
    	aDescription: str
    	aProj: GM_Projection_t


    """
    return _globalmapper.MapCatalogCreate(aDescription, aProj)


[docs]
def MapCatalogDisableMap(aCatalogLayer: "GM_LayerHandle_t32", aMapIndex: "uint32", aDisable: "boolean") -> "GM_Error_t32":
    r"""
    MapCatalogDisableMap(GM_LayerHandle_t32 aCatalogLayer, uint32 aMapIndex, boolean aDisable) -> GM_Error_t32

    	Parameters
    	----------
    	aCatalogLayer: GM_LayerHandle_t32
    	aMapIndex: uint32
    	aDisable: boolean


    """
    return _globalmapper.MapCatalogDisableMap(aCatalogLayer, aMapIndex, aDisable)


[docs]
def MapCatalogGetInfo(aCatalogLayer: "GM_LayerHandle_t32") -> "GM_MapCatalogInfo_t *":
    r"""
    MapCatalogGetInfo(GM_LayerHandle_t32 aCatalogLayer) -> GM_Error_t32, GM_MapCatalogInfo_t

    	Parameters
    	----------
    	aCatalogLayer: GM_LayerHandle_t32


    """
    return _globalmapper.MapCatalogGetInfo(aCatalogLayer)


[docs]
def MapCatalogGetMapInfo(aCatalogLayer: "GM_LayerHandle_t32", aMapIndex: "uint32") -> "GM_LayerInfo_t const *":
    r"""
    MapCatalogGetMapInfo(GM_LayerHandle_t32 aCatalogLayer, uint32 aMapIndex) -> GM_LayerInfo_t

    	Parameters
    	----------
    	aCatalogLayer: GM_LayerHandle_t32
    	aMapIndex: uint32


    """
    return _globalmapper.MapCatalogGetMapInfo(aCatalogLayer, aMapIndex)


[docs]
def MapCatalogChangeMapOrder(*args) -> "GM_Error_t32":
    r"""
    MapCatalogChangeMapOrder(GM_LayerHandle_t32 aCatalogLayer, uint32 aCurMapIndex, uint32 aNewMapIndex, sint32 aNumMapsToMove, uint32 aReserved=0) -> GM_Error_t32

    	Parameters
    	----------
    	aCatalogLayer: GM_LayerHandle_t32
    	aCurMapIndex: uint32
    	aNewMapIndex: uint32
    	aNumMapsToMove: sint32
    	aReserved: uint32


    """
    return _globalmapper.MapCatalogChangeMapOrder(*args)


[docs]
def MapCatalogRemoveMap(aCatalogLayer: "GM_LayerHandle_t32", aMapIndex: "uint32") -> "GM_Error_t32":
    r"""
    MapCatalogRemoveMap(GM_LayerHandle_t32 aCatalogLayer, uint32 aMapIndex) -> GM_Error_t32

    	Parameters
    	----------
    	aCatalogLayer: GM_LayerHandle_t32
    	aMapIndex: uint32


    """
    return _globalmapper.MapCatalogRemoveMap(aCatalogLayer, aMapIndex)


[docs]
def MapCatalogSave(aCatalogLayer: "GM_LayerHandle_t32", aFilename: "char const *") -> "GM_Error_t32":
    r"""
    MapCatalogSave(GM_LayerHandle_t32 aCatalogLayer, str aFilename) -> GM_Error_t32

    	Parameters
    	----------
    	aCatalogLayer: GM_LayerHandle_t32
    	aFilename: str


    """
    return _globalmapper.MapCatalogSave(aCatalogLayer, aFilename)


[docs]
def MapCatalogSetDisplayInfo(aCatalogLayer: "GM_LayerHandle_t32", aDisplayType: "GM_MapCatalogDisplayType_t8", aDisplayValue: "double", aDisplayValue2: "double", aHideBounds: "boolean") -> "GM_Error_t32":
    r"""
    MapCatalogSetDisplayInfo(GM_LayerHandle_t32 aCatalogLayer, GM_MapCatalogDisplayType_t8 aDisplayType, float aDisplayValue, float aDisplayValue2, boolean aHideBounds) -> GM_Error_t32

    	Parameters
    	----------
    	aCatalogLayer: GM_LayerHandle_t32
    	aDisplayType: GM_MapCatalogDisplayType_t8
    	aDisplayValue: float
    	aDisplayValue2: float
    	aHideBounds: boolean


    """
    return _globalmapper.MapCatalogSetDisplayInfo(aCatalogLayer, aDisplayType, aDisplayValue, aDisplayValue2, aHideBounds)


[docs]
def MapCatalogSetMapOption(aCatalogLayer: "GM_LayerHandle_t32", aMapIndex: "uint32", aMapOpt: "GM_MapCatalogMapOpt_t8", aOptData: "void const *") -> "GM_Error_t32":
    r"""
    MapCatalogSetMapOption(GM_LayerHandle_t32 aCatalogLayer, uint32 aMapIndex, GM_MapCatalogMapOpt_t8 aMapOpt, int aOptData) -> GM_Error_t32

    	Parameters
    	----------
    	aCatalogLayer: GM_LayerHandle_t32
    	aMapIndex: uint32
    	aMapOpt: GM_MapCatalogMapOpt_t8
    	aOptData: int


    """
    return _globalmapper.MapCatalogSetMapOption(aCatalogLayer, aMapIndex, aMapOpt, aOptData)


[docs]
def AddAreaToVectorLayer(aLayer: "GM_LayerHandle_t32", aArea: "GM_AreaFeature_t", aFlags: "GM_AddFeatureFlags_t8") -> "GM_Error_t32":
    r"""
    AddAreaToVectorLayer(GM_LayerHandle_t32 aLayer, GM_AreaFeature_t aArea, GM_AddFeatureFlags_t8 aFlags) -> GM_Error_t32

    	Parameters
    	----------
    	aLayer: GM_LayerHandle_t32
    	aArea: GM_AreaFeature_t
    	aFlags: GM_AddFeatureFlags_t8


    """
    return _globalmapper.AddAreaToVectorLayer(aLayer, aArea, aFlags)


[docs]
def AddLineToVectorLayer(aLayer: "GM_LayerHandle_t32", aLine: "GM_LineFeature_t", aFlags: "GM_AddFeatureFlags_t8") -> "GM_Error_t32":
    r"""
    AddLineToVectorLayer(GM_LayerHandle_t32 aLayer, GM_LineFeature_t aLine, GM_AddFeatureFlags_t8 aFlags) -> GM_Error_t32

    	Parameters
    	----------
    	aLayer: GM_LayerHandle_t32
    	aLine: GM_LineFeature_t
    	aFlags: GM_AddFeatureFlags_t8


    """
    return _globalmapper.AddLineToVectorLayer(aLayer, aLine, aFlags)


[docs]
def AddPointToVectorLayer(aLayer: "GM_LayerHandle_t32", aPoint: "GM_PointFeature_t", aFlags: "GM_AddFeatureFlags_t8") -> "GM_Error_t32":
    r"""
    AddPointToVectorLayer(GM_LayerHandle_t32 aLayer, GM_PointFeature_t aPoint, GM_AddFeatureFlags_t8 aFlags) -> GM_Error_t32

    	Parameters
    	----------
    	aLayer: GM_LayerHandle_t32
    	aPoint: GM_PointFeature_t
    	aFlags: GM_AddFeatureFlags_t8


    """
    return _globalmapper.AddPointToVectorLayer(aLayer, aPoint, aFlags)


[docs]
def ApplyConvolutionFilter(*args) -> "GM_LayerHandle_t32 *":
    r"""
    ApplyConvolutionFilter(GM_LayerHandle_t32 aLayer, GM_ConvolutionLayerSetup_t aSetup, uint32 aReserved=0) -> GM_Error_t32, GM_LayerHandle_t32 

    	Parameters
    	----------
    	aLayer: GM_LayerHandle_t32
    	aSetup: GM_ConvolutionLayerSetup_t
    	aReserved: uint32


    """
    return _globalmapper.ApplyConvolutionFilter(*args)


[docs]
def CombineAreas(aAreaList: "GM_AreaFeature_t", aNumAreas: "uint32", aAreaProj: "GM_Projection_t", aNewAreaLayer: "GM_LayerHandle_t32") -> "GM_Error_t32":
    r"""
    CombineAreas(GM_AreaFeature_t aAreaList, uint32 aNumAreas, GM_Projection_t aAreaProj, GM_LayerHandle_t32 aNewAreaLayer) -> GM_Error_t32

    	Parameters
    	----------
    	aAreaList: GM_AreaFeature_t
    	aNumAreas: uint32
    	aAreaProj: GM_Projection_t
    	aNewAreaLayer: GM_LayerHandle_t32


    """
    return _globalmapper.CombineAreas(aAreaList, aNumAreas, aAreaProj, aNewAreaLayer)


[docs]
def CreateBufferArea(aFeatureLayer: "GM_LayerHandle_t32", aFeatureClassType: "GM_FeatureClassType_t8", aFeatureIndex: "uint32", aBufferDistance: "double", aBufferLayer: "GM_LayerHandle_t32") -> "GM_Error_t32":
    r"""
    CreateBufferArea(GM_LayerHandle_t32 aFeatureLayer, GM_FeatureClassType_t8 aFeatureClassType, uint32 aFeatureIndex, float aBufferDistance, GM_LayerHandle_t32 aBufferLayer) -> GM_Error_t32

    	Parameters
    	----------
    	aFeatureLayer: GM_LayerHandle_t32
    	aFeatureClassType: GM_FeatureClassType_t8
    	aFeatureIndex: uint32
    	aBufferDistance: float
    	aBufferLayer: GM_LayerHandle_t32


    """
    return _globalmapper.CreateBufferArea(aFeatureLayer, aFeatureClassType, aFeatureIndex, aBufferDistance, aBufferLayer)


[docs]
def CreateCustomElevGridLayer(aDescription: "char const *", aProj: "GM_Projection_t", aTopLeft: "GM_Point_t", aXSampleSize: "double", aYSampleSize: "double", aNumSamplesX: "sint32", aNumSamplesY: "sint32", aElevGrid: "void const *", aGridValType: "GM_GridValType_t8", aNoDataValue: "float") -> "GM_LayerHandle_t32":
    r"""
    CreateCustomElevGridLayer(str aDescription, GM_Projection_t aProj, GM_Point_t aTopLeft, float aXSampleSize, float aYSampleSize, sint32 aNumSamplesX, sint32 aNumSamplesY, int aElevGrid, GM_GridValType_t8 aGridValType, float aNoDataValue) -> GM_LayerHandle_t32

    	Parameters
    	----------
    	aDescription: str
    	aProj: GM_Projection_t
    	aTopLeft: GM_Point_t
    	aXSampleSize: float
    	aYSampleSize: float
    	aNumSamplesX: sint32
    	aNumSamplesY: sint32
    	aElevGrid: int
    	aGridValType: GM_GridValType_t8
    	aNoDataValue: float


    """
    return _globalmapper.CreateCustomElevGridLayer(aDescription, aProj, aTopLeft, aXSampleSize, aYSampleSize, aNumSamplesX, aNumSamplesY, aElevGrid, aGridValType, aNoDataValue)


[docs]
def CreateCustomElevGridLayerEx(*args) -> "GM_LayerHandle_t32":
    r"""
    CreateCustomElevGridLayerEx(str aDescription, GM_Projection_t aProj, GM_GridLayout_t aGridLayout, int aElevGrid, uint32 aReserved=0) -> GM_LayerHandle_t32

    	Parameters
    	----------
    	aDescription: str
    	aProj: GM_Projection_t
    	aGridLayout: GM_GridLayout_t
    	aElevGrid: int
    	aReserved: uint32


    """
    return _globalmapper.CreateCustomElevGridLayerEx(*args)


[docs]
def CreateCustomRasterLayer(aDescription: "char const *", aProj: "GM_Projection_t", aRasterLayout: "GM_RasterLayout_t", aDataBuf: "void const *") -> "GM_LayerHandle_t32":
    r"""
    CreateCustomRasterLayer(str aDescription, GM_Projection_t aProj, GM_RasterLayout_t aRasterLayout, int aDataBuf) -> GM_LayerHandle_t32

    	Parameters
    	----------
    	aDescription: str
    	aProj: GM_Projection_t
    	aRasterLayout: GM_RasterLayout_t
    	aDataBuf: int


    """
    return _globalmapper.CreateCustomRasterLayer(aDescription, aProj, aRasterLayout, aDataBuf)


[docs]
def CreateCustomVectorLayer(aDescription: "char const *", aProj: "GM_Projection_t") -> "GM_LayerHandle_t32":
    r"""
    CreateCustomVectorLayer(str aDescription, GM_Projection_t aProj) -> GM_LayerHandle_t32

    	Parameters
    	----------
    	aDescription: str
    	aProj: GM_Projection_t


    """
    return _globalmapper.CreateCustomVectorLayer(aDescription, aProj)


[docs]
def CreateVectorLayerFromFindResults(aDescription: "char const *", aProj: "GM_Projection_t", aResultList: "GM_FoundFeatureResults_t") -> "GM_LayerHandle_t32":
    r"""
    CreateVectorLayerFromFindResults(str aDescription, GM_Projection_t aProj, GM_FoundFeatureResults_t aResultList) -> GM_LayerHandle_t32

    	Parameters
    	----------
    	aDescription: str
    	aProj: GM_Projection_t
    	aResultList: GM_FoundFeatureResults_t


    """
    return _globalmapper.CreateVectorLayerFromFindResults(aDescription, aProj, aResultList)


def GetExtensionData(aExtensionName: "char const *", aValueName: "char const *", aBufferLen: "uint32") -> "char *":
    r"""
    GetExtensionData(char const * aExtensionName, char const * aValueName, uint32 aBufferLen) -> GM_Error_t32

    Parameters
    ----------
    aExtensionName: char const *
    aValueName: char const *
    aBufferLen: uint32

    """
    return _globalmapper.GetExtensionData(aExtensionName, aValueName, aBufferLen)

def SetExtensionData(aExtensionName: "char const *", aValueName: "char const *", aData: "char const *") -> "GM_Error_t32":
    r"""
    SetExtensionData(char const * aExtensionName, char const * aValueName, char const * aData) -> GM_Error_t32

    Parameters
    ----------
    aExtensionName: char const *
    aValueName: char const *
    aData: char const *

    """
    return _globalmapper.SetExtensionData(aExtensionName, aValueName, aData)

[docs]
def ShowGlobalMapperHelp(aURL: "char const *") -> "GM_Error_t32":
    r"""
    ShowGlobalMapperHelp(str aURL) -> GM_Error_t32

    	Parameters
    	----------
    	aURL: str


    """
    return _globalmapper.ShowGlobalMapperHelp(aURL)


[docs]
def CreateS63UserPermitFile(aFilename: "char const *") -> "GM_Error_t32":
    r"""
    CreateS63UserPermitFile(str aFilename) -> GM_Error_t32

    	Parameters
    	----------
    	aFilename: str


    """
    return _globalmapper.CreateS63UserPermitFile(aFilename)


[docs]
def GetFilterString() -> "char const *":
    r"""GetFilterString() -> str"""
    return _globalmapper.GetFilterString()


[docs]
def GetMACAddress() -> "char const *":
    r"""GetMACAddress() -> str"""
    return _globalmapper.GetMACAddress()


[docs]
def GetMiscOption(*args) -> "void *":
    r"""
    GetMiscOption(GM_MiscOpt_t32 aOpt, uint32 aReserved=0) -> int

    	Parameters
    	----------
    	aOpt: GM_MiscOpt_t32
    	aReserved: uint32


    """
    return _globalmapper.GetMiscOption(*args)


[docs]
def GetProgressCallback() -> "GM_ProgressCallbackFunc":
    r"""GetProgressCallback() -> GM_ProgressCallbackFunc"""
    return _globalmapper.GetProgressCallback()


[docs]
def GetSDKBuildDate() -> "time_t":
    r"""GetSDKBuildDate() -> int"""
    return _globalmapper.GetSDKBuildDate()


[docs]
def GetSDKVersion() -> "uint32":
    r"""GetSDKVersion() -> int"""
    return _globalmapper.GetSDKVersion()


[docs]
def IsRegistered() -> "boolean":
    r"""IsRegistered() -> boolean"""
    return _globalmapper.IsRegistered()


[docs]
def SelectFile(aFilterStr: "char const *", aInitialDir: "char const *", aParentWnd: "HWND") -> "char *":
    r"""
    SelectFile(str aFilterStr, str aInitialDir, HWND aParentWnd) -> GM_Error_t32, str

    	Parameters
    	----------
    	aFilterStr: str
    	aInitialDir: str
    	aParentWnd: HWND


    """
    return _globalmapper.SelectFile(aFilterStr, aInitialDir, aParentWnd)


[docs]
def SetMemoryLimit(aMemoryLimit: "uint32") -> "void":
    r"""
    SetMemoryLimit(uint32 aMemoryLimit) -> None

    	Parameters
    	----------
    	aMemoryLimit: uint32


    """
    return _globalmapper.SetMemoryLimit(aMemoryLimit)


[docs]
def SetMessageCallback(aCallbackFunc: "GM_MessageCallbackFunc") -> "void":
    r"""
    SetMessageCallback(GM_MessageCallbackFunc aCallbackFunc) -> None

    	Parameters
    	----------
    	aCallbackFunc: GM_MessageCallbackFunc


    """
    return _globalmapper.SetMessageCallback(aCallbackFunc)


[docs]
def SetMessageCallbackEx(*args) -> "void":
    r"""
    SetMessageCallbackEx(GM_MessageCallbackFunc aCallbackFunc, boolean aThreadLocal, uint32 aReserved=0) -> None

    	Parameters
    	----------
    	aCallbackFunc: GM_MessageCallbackFunc
    	aThreadLocal: boolean
    	aReserved: uint32


    """
    return _globalmapper.SetMessageCallbackEx(*args)


[docs]
def SetMiscOption(aOpt: "GM_MiscOpt_t32", aNewValue: "uint8") -> "uint8":
    r"""
    SetMiscOption(GM_MiscOpt_t32 aOpt, uint8 aNewValue) -> int

    	Parameters
    	----------
    	aOpt: GM_MiscOpt_t32
    	aNewValue: uint8


    """
    return _globalmapper.SetMiscOption(aOpt, aNewValue)


[docs]
def SetMiscOptionEx(*args) -> "void *":
    r"""
    SetMiscOptionEx(GM_MiscOpt_t32 aOpt, int aNewValue, uint32 aReserved=0) -> int

    	Parameters
    	----------
    	aOpt: GM_MiscOpt_t32
    	aNewValue: int
    	aReserved: uint32


    """
    return _globalmapper.SetMiscOptionEx(*args)


[docs]
def SetMiscOptionExString(*args) -> "char const *":
    r"""
    SetMiscOptionExString(GM_MiscOpt_t32 aOpt, str aNewValue, uint32 aReserved=0) -> str

    	Parameters
    	----------
    	aOpt: GM_MiscOpt_t32
    	aNewValue: str
    	aReserved: uint32


    """
    return _globalmapper.SetMiscOptionExString(*args)


[docs]
def SetMiscOptionExBool(*args) -> "bool":
    r"""
    SetMiscOptionExBool(GM_MiscOpt_t32 aOpt, boolean aNewValue, uint32 aReserved=0) -> boolean

    	Parameters
    	----------
    	aOpt: GM_MiscOpt_t32
    	aNewValue: boolean
    	aReserved: uint32


    """
    return _globalmapper.SetMiscOptionExBool(*args)


[docs]
def SetProgressCallback(aCallbackFunc: "GM_ProgressCallbackFunc") -> "void":
    r"""
    SetProgressCallback(GM_ProgressCallbackFunc aCallbackFunc) -> None

    	Parameters
    	----------
    	aCallbackFunc: GM_ProgressCallbackFunc


    """
    return _globalmapper.SetProgressCallback(aCallbackFunc)


[docs]
def SetQuickPDFUnlockCode(aUnlockCode: "char const *") -> "GM_Error_t32":
    r"""
    SetQuickPDFUnlockCode(str aUnlockCode) -> GM_Error_t32

    	Parameters
    	----------
    	aUnlockCode: str


    """
    return _globalmapper.SetQuickPDFUnlockCode(aUnlockCode)


[docs]
def SetRegistryKey(aKeyName: "char const *") -> "GM_Error_t32":
    r"""
    SetRegistryKey(str aKeyName) -> GM_Error_t32

    	Parameters
    	----------
    	aKeyName: str


    """
    return _globalmapper.SetRegistryKey(aKeyName)


[docs]
def SetSettingsFilePath(aPathName: "char const *") -> "GM_Error_t32":
    r"""
    SetSettingsFilePath(str aPathName) -> GM_Error_t32

    	Parameters
    	----------
    	aPathName: str


    """
    return _globalmapper.SetSettingsFilePath(aPathName)


[docs]
def LogMessage(level: "GM_LogLevel_t8", message: "char const *") -> "void":
    r"""
    LogMessage(GM_LogLevel_t8 level, str message) -> None

    	Parameters
    	----------
    	level: GM_LogLevel_t8
    	message: str


    """
    return _globalmapper.LogMessage(level, message)


[docs]
def SetProgressCallbackThread(aCallbackFunc: "GM_ProgressCallbackFunc") -> "void":
    r"""
    SetProgressCallbackThread(GM_ProgressCallbackFunc aCallbackFunc) -> None

    	Parameters
    	----------
    	aCallbackFunc: GM_ProgressCallbackFunc


    """
    return _globalmapper.SetProgressCallbackThread(aCallbackFunc)


[docs]
def toRGB(r: "uint8", g: "uint8", b: "uint8") -> "COLORREF":
    r"""
    toRGB(uint8 r, uint8 g, uint8 b) -> COLORREF

    	Parameters
    	----------
    	r: uint8
    	g: uint8
    	b: uint8


    """
    return _globalmapper.toRGB(r, g, b)


[docs]
def toRGBA(r: "uint8", g: "uint8", b: "uint8", a: "uint8") -> "COLORREF":
    r"""
    toRGBA(uint8 r, uint8 g, uint8 b, uint8 a) -> COLORREF

    	Parameters
    	----------
    	r: uint8
    	g: uint8
    	b: uint8
    	a: uint8


    """
    return _globalmapper.toRGBA(r, g, b, a)


def debug_break() -> "void":
    r"""debug_break()"""
    return _globalmapper.debug_break()

[docs]
def GetLayerLidarStats(*args) -> "GM_LidarStats_t *":
    r"""
    GetLayerLidarStats(GM_LayerHandle_t32 aLayer, uint32 aReserved=0) -> GM_Error_t32, GM_LidarStats_t

    	Parameters
    	----------
    	aLayer: GM_LayerHandle_t32
    	aReserved: uint32


    """
    return _globalmapper.GetLayerLidarStats(*args)


[docs]
def CreateSwathSeparationImage(*args) -> "GM_LayerHandle_t32 *":
    r"""
    CreateSwathSeparationImage(str aOutputImageFilename, GM_SwathSeparationImageSetup_t aSetup, uint32 aReserved=0) -> GM_Error_t32, GM_LayerHandle_t32

    	Parameters
    	----------
    	aOutputImageFilename: str
    	aSetup: GM_SwathSeparationImageSetup_t
    	aReserved: uint32


    """
    return _globalmapper.CreateSwathSeparationImage(*args)


[docs]
def GetLidarClassInfo(aLidarClass: "GM_LidarClass_t8", aGetDefault: "boolean") -> "GM_LidarClassInfo_t *":
    r"""
    GetLidarClassInfo(GM_LidarClass_t8 aLidarClass, boolean aGetDefault) -> GM_Error_t32, GM_LidarClassInfo_t

    	Parameters
    	----------
    	aLidarClass: GM_LidarClass_t8
    	aGetDefault: boolean


    """
    return _globalmapper.GetLidarClassInfo(aLidarClass, aGetDefault)


[docs]
def GetLidarPoint(*args) -> "GM_LidarPoint_t *":
    r"""
    GetLidarPoint(GM_LayerHandle_t32 aLayer, uint64 aPointIndex, GM_GetFeatureFlags_t32 aFlags, uint32 aReserved=0) -> GM_Error_t32, GM_LidarPoint_t

    	Parameters
    	----------
    	aLayer: GM_LayerHandle_t32
    	aPointIndex: uint64
    	aFlags: GM_GetFeatureFlags_t32
    	aReserved: uint32


    """
    return _globalmapper.GetLidarPoint(*args)


[docs]
def SetLidarClassInfo(aLidarClass: "GM_LidarClass_t8", aClassInfo: "GM_LidarClassInfo_t") -> "GM_Error_t32":
    r"""
    SetLidarClassInfo(GM_LidarClass_t8 aLidarClass, GM_LidarClassInfo_t aClassInfo) -> GM_Error_t32

    	Parameters
    	----------
    	aLidarClass: GM_LidarClass_t8
    	aClassInfo: GM_LidarClassInfo_t


    """
    return _globalmapper.SetLidarClassInfo(aLidarClass, aClassInfo)


[docs]
def SetLidarPoint(*args) -> "GM_Error_t32":
    r"""
    SetLidarPoint(GM_LayerHandle_t32 aLayer, uint64 aPointIndex, GM_LidarPoint_t aLidarPoint, uint32 aReserved=0) -> GM_Error_t32

    	Parameters
    	----------
    	aLayer: GM_LayerHandle_t32
    	aPointIndex: uint64
    	aLidarPoint: GM_LidarPoint_t
    	aReserved: uint32


    """
    return _globalmapper.SetLidarPoint(*args)


[docs]
def AddLidarQueryToQuery(*args) -> "GM_Error_t32":
    r"""
    AddLidarQueryToQuery(GM_LidarQueryHandle_t aAddToLidarQuery, GM_LidarQueryHandle_t aAddFromLidarQuery, uint32 aReserved=0) -> GM_Error_t32

    	Parameters
    	----------
    	aAddToLidarQuery: GM_LidarQueryHandle_t
    	aAddFromLidarQuery: GM_LidarQueryHandle_t
    	aReserved: uint32


    """
    return _globalmapper.AddLidarQueryToQuery(*args)


[docs]
def AddRemovePointToLidarQuery(aLidarQuery: "GM_LidarQueryHandle_t", aLayer: "GM_LayerHandle_t32", aPointIndex: "uint64", aAddPoint: "boolean") -> "GM_Error_t32":
    r"""
    AddRemovePointToLidarQuery(GM_LidarQueryHandle_t aLidarQuery, GM_LayerHandle_t32 aLayer, uint64 aPointIndex, boolean aAddPoint) -> GM_Error_t32

    	Parameters
    	----------
    	aLidarQuery: GM_LidarQueryHandle_t
    	aLayer: GM_LayerHandle_t32
    	aPointIndex: uint64
    	aAddPoint: boolean


    """
    return _globalmapper.AddRemovePointToLidarQuery(aLidarQuery, aLayer, aPointIndex, aAddPoint)


[docs]
def CreateEmptyLidarQuery() -> "GM_LidarQueryHandle_t *":
    r"""CreateEmptyLidarQuery() -> GM_Error_t32, GM_LidarQueryHandle_t"""
    return _globalmapper.CreateEmptyLidarQuery()


[docs]
def CreateLayerFromLidarQuery(*args) -> "GM_LayerHandle_t32 *":
    r"""
    CreateLayerFromLidarQuery(GM_LidarQueryHandle_t aLidarQuery, str aDescription, GM_Projection_t aProj, uint32 aReserved=0) -> GM_Error_t32, GM_LayerHandle_t32

    	Parameters
    	----------
    	aLidarQuery: GM_LidarQueryHandle_t
    	aDescription: str
    	aProj: GM_Projection_t
    	aReserved: uint32


    """
    return _globalmapper.CreateLayerFromLidarQuery(*args)


[docs]
def CreateLidarQuery(aLayerList: "GM_LayerHandle_t32 *", aWorldBounds: "GM_Rectangle_t", aFilter: "GM_LidarQueryFilter_t") -> "GM_LidarQueryHandle_t *, uint64 *":
    r"""
    CreateLidarQuery([GM_LayerHandle_t32] aLayerList, GM_Rectangle_t aWorldBounds, GM_LidarQueryFilter_t aFilter) -> GM_Error_t32, GM_LidarQueryHandle_t

    	Parameters
    	----------
    	aLayerList: [GM_LayerHandle_t32]
    	aWorldBounds: GM_Rectangle_t
    	aFilter: GM_LidarQueryFilter_t


    """
    return _globalmapper.CreateLidarQuery(aLayerList, aWorldBounds, aFilter)


[docs]
def FreeLidarQuery(aLidarQuery: "GM_LidarQueryHandle_t") -> "GM_Error_t32":
    r"""
    FreeLidarQuery(GM_LidarQueryHandle_t aLidarQuery) -> GM_Error_t32

    	Parameters
    	----------
    	aLidarQuery: GM_LidarQueryHandle_t


    """
    return _globalmapper.FreeLidarQuery(aLidarQuery)


[docs]
def GetLidarQueryInfo(aLidarQuery: "GM_LidarQueryHandle_t") -> "GM_LidarQueryInfo_t *":
    r"""
    GetLidarQueryInfo(GM_LidarQueryHandle_t aLidarQuery) -> GM_Error_t32, GM_LidarQueryInfo_t

    	Parameters
    	----------
    	aLidarQuery: GM_LidarQueryHandle_t


    """
    return _globalmapper.GetLidarQueryInfo(aLidarQuery)


[docs]
def GetNextLidarQueryPoints(*args) -> "unsigned long *":
    r"""
    GetNextLidarQueryPoints(GM_LidarQueryHandle_t aLidarQuery, GM_LidarPoint_array aPointList, uint32 aListSize, GM_GetFeatureFlags_t32 aFlags, uint32 aReserved=0) -> GM_Error_t32, uint32

    	Parameters
    	----------
    	aLidarQuery: GM_LidarQueryHandle_t
    	aPointList: GM_LidarPoint_t
    	uint32 aListSize
    	aFlags: GM_GetFeatureFlags_t32
    	aReserved: uint32


    """
    return _globalmapper.GetNextLidarQueryPoints(*args)


[docs]
def InitLidarQueryFilter(aEmptyClassFilter: "boolean") -> "GM_LidarQueryFilter_t *":
    r"""
    InitLidarQueryFilter(boolean aEmptyClassFilter) -> GM_Error_t32, GM_LidarQueryFilter_t

    	Parameters
    	----------
    	aEmptyClassFilter: boolean


    """
    return _globalmapper.InitLidarQueryFilter(aEmptyClassFilter)


[docs]
def LidarClassFilter_IsClassEnabled(aClassFilter: "GM_LidarClassFilter_t", aClass: "GM_LidarClass_t8") -> "boolean":
    r"""
    LidarClassFilter_IsClassEnabled(GM_LidarClassFilter_t aClassFilter, GM_LidarClass_t8 aClass) -> boolean

    	Parameters
    	----------
    	aClassFilter: GM_LidarClassFilter_t
    	aClass: GM_LidarClass_t8


    """
    return _globalmapper.LidarClassFilter_IsClassEnabled(aClassFilter, aClass)


[docs]
def LidarClassFilter_SetClassEnabled(INOUT: "GM_LidarClassFilter_t", aClass: "GM_LidarClass_t8", aEnable: "boolean") -> "GM_LidarClassFilter_t *":
    r"""
    LidarClassFilter_SetClassEnabled(GM_LidarClassFilter_t aClassFilter, GM_LidarClass_t8 aClass, boolean aEnable) -> GM_Error_t32, GM_LidarClassFilter_t

    	Parameters
    	----------
    	aClassFilter: GM_LidarClassFilter_t
    	aClass: GM_LidarClass_t8
    	aEnable: boolean


    """
    return _globalmapper.LidarClassFilter_SetClassEnabled(INOUT, aClass, aEnable)


[docs]
def UpdateLidarQueryPoints(*args) -> "GM_Error_t32":
    r"""
    UpdateLidarQueryPoints(GM_LidarQueryHandle_t aLidarQuery, GM_LidarFieldMask_t32 aValidFields, GM_LidarPoint_t aNewPointData, uint32 aReserved=0) -> GM_Error_t32

    	Parameters
    	----------
    	aLidarQuery: GM_LidarQueryHandle_t
    	aValidFields: GM_LidarFieldMask_t32
    	aNewPointData: GM_LidarPoint_t
    	aReserved: uint32


    """
    return _globalmapper.UpdateLidarQueryPoints(*args)


[docs]
def GetLidarClassFilter() -> "GM_LidarClassFilter_t *":
    r"""GetLidarClassFilter() -> GM_Error_t32, GM_LidarClassFilter_t"""
    return _globalmapper.GetLidarClassFilter()


[docs]
def SetLidarClassFilter(aClassFilter: "GM_LidarClassFilter_t") -> "GM_Error_t32":
    r"""
    SetLidarClassFilter(GM_LidarClassFilter_t aClassFilter) -> GM_Error_t32

    	Parameters
    	----------
    	aClassFilter: GM_LidarClassFilter_t


    """
    return _globalmapper.SetLidarClassFilter(aClassFilter)


[docs]
def LidarClassifyBuildingVeg(*args) -> "GM_Error_t32":
    r"""
    LidarClassifyBuildingVeg([GM_LayerHandle_t32] aLayerList, GM_ClassifyNonGroundSetup_t aSettings, uint32 aReserved=0) -> GM_Error_t32

    	Parameters
    	----------
    	aLayerList: [GM_LayerHandle_t32]
    	aSettings: GM_ClassifyNonGroundSetup_t
    	aReserved: uint32


    """
    return _globalmapper.LidarClassifyBuildingVeg(*args)


[docs]
def LidarClassifyBuildingVegFromQuery(*args) -> "GM_Error_t32":
    r"""
    LidarClassifyBuildingVegFromQuery(GM_LidarQueryHandle_t aLidarQuery, GM_ClassifyNonGroundSetup_t aSettings, uint32 aReserved=0) -> GM_Error_t32

    	Parameters
    	----------
    	aLidarQuery: GM_LidarQueryHandle_t
    	aSettings: GM_ClassifyNonGroundSetup_t
    	aReserved: uint32


    """
    return _globalmapper.LidarClassifyBuildingVegFromQuery(*args)


[docs]
def LidarClassifyGraph(*args) -> "GM_Error_t32":
    r"""
    LidarClassifyGraph([GM_LayerHandle_t32] aLayerList, GM_ClassifyGraphSetup_t aSettings, uint32 aReserved=0) -> GM_Error_t32

    	Parameters
    	----------
    	aLayerList: [GM_LayerHandle_t32]
    	aSettings: GM_ClassifyGraphSetup_t
    	aReserved: uint32


    """
    return _globalmapper.LidarClassifyGraph(*args)


[docs]
def LidarClassifyGraphFromQuery(*args) -> "GM_Error_t32":
    r"""
    LidarClassifyGraphFromQuery(GM_LidarQueryHandle_t aLidarQuery, GM_ClassifyGraphSetup_t aSettings, uint32 aReserved=0) -> GM_Error_t32

    	Parameters
    	----------
    	aLidarQuery: GM_LidarQueryHandle_t
    	aSettings: GM_ClassifyGraphSetup_t
    	aReserved: uint32


    """
    return _globalmapper.LidarClassifyGraphFromQuery(*args)


[docs]
def LidarClassifyGround(*args) -> "GM_Error_t32":
    r"""
    LidarClassifyGround([GM_LayerHandle_t32] aLayerList, GM_ClassifyGroundSetup_t aSettings, uint32 aReserved=0) -> GM_Error_t32

    	Parameters
    	----------
    	aLayerList: [GM_LayerHandle_t32]
    	aSettings: GM_ClassifyGroundSetup_t
    	aReserved: uint32


    """
    return _globalmapper.LidarClassifyGround(*args)


[docs]
def LidarClassifyGroundFromQuery(*args) -> "GM_Error_t32":
    r"""
    LidarClassifyGroundFromQuery(GM_LidarQueryHandle_t aLidarQuery, GM_ClassifyGroundSetup_t aSettings, uint32 aReserved=0) -> GM_Error_t32

    	Parameters
    	----------
    	aLidarQuery: GM_LidarQueryHandle_t
    	aSettings: GM_ClassifyGroundSetup_t
    	aReserved: uint32


    """
    return _globalmapper.LidarClassifyGroundFromQuery(*args)


[docs]
def LidarClassifyNoise(*args) -> "GM_Error_t32":
    r"""
    LidarClassifyNoise([GM_LayerHandle_t32] aLayerList, GM_ClassifyNoiseSetup_t aSettings, uint32 aReserved=0) -> GM_Error_t32

    	Parameters
    	----------
    	aLayerList: [GM_LayerHandle_t32]
    	aSettings: GM_ClassifyNoiseSetup_t
    	aReserved: uint32


    """
    return _globalmapper.LidarClassifyNoise(*args)


[docs]
def LidarClassifyNoiseFromQuery(*args) -> "GM_Error_t32":
    r"""
    LidarClassifyNoiseFromQuery(GM_LidarQueryHandle_t aLidarQuery, GM_ClassifyNoiseSetup_t aSettings, uint32 aReserved=0) -> GM_Error_t32

    	Parameters
    	----------
    	aLidarQuery: GM_LidarQueryHandle_t
    	aSettings: GM_ClassifyNoiseSetup_t
    	aReserved: uint32


    """
    return _globalmapper.LidarClassifyNoiseFromQuery(*args)


[docs]
def LidarClassifyPolePower(*args) -> "GM_Error_t32":
    r"""
    LidarClassifyPolePower([GM_LayerHandle_t32] aLayerList, GM_ClassifyPolePowerSetup_t aSettings, uint32 aReserved=0) -> GM_Error_t32

    	Parameters
    	----------
    	aLayerList: [GM_LayerHandle_t32]
    	aSettings: GM_ClassifyPolePowerSetup_t
    	aReserved: uint32


    """
    return _globalmapper.LidarClassifyPolePower(*args)


[docs]
def LidarClassifyPolePowerFromQuery(*args) -> "GM_Error_t32":
    r"""
    LidarClassifyPolePowerFromQuery(GM_LidarQueryHandle_t aLidarQuery, GM_ClassifyPolePowerSetup_t aSettings, uint32 aReserved=0) -> GM_Error_t32

    	Parameters
    	----------
    	aLidarQuery: GM_LidarQueryHandle_t
    	aSettings: GM_ClassifyPolePowerSetup_t
    	aReserved: uint32


    """
    return _globalmapper.LidarClassifyPolePowerFromQuery(*args)


[docs]
def LidarExtractFeatures(*args) -> "GM_LidarExtractOutput_t *":
    r"""
    LidarExtractFeatures([GM_LayerHandle_t32] aLayerList, GM_LidarExtractSetup_t aExtractOpts, uint32 aReserved=0) -> GM_Error_t32, GM_LidarExtractOutput_t

    	Parameters
    	----------
    	aLayerList: [GM_LayerHandle_t32]
    	aExtractOpts: GM_LidarExtractSetup_t
    	aReserved: uint32


    """
    return _globalmapper.LidarExtractFeatures(*args)


[docs]
def LidarExtractFeaturesFromQuery(*args) -> "GM_LidarExtractOutput_t *":
    r"""
    LidarExtractFeaturesFromQuery(GM_LidarQueryHandle_t aLidarQuery, GM_LidarExtractSetup_t aExtractOpts, uint32 aReserved=0) -> GM_Error_t32, GM_LidarExtractOutput_t

    	Parameters
    	----------
    	aLidarQuery: GM_LidarQueryHandle_t
    	aExtractOpts: GM_LidarExtractSetup_t
    	aReserved: uint32


    """
    return _globalmapper.LidarExtractFeaturesFromQuery(*args)


[docs]
def LidarClassFilter_EnableGroups(INOUT: "GM_LidarClassFilter_t", aGroupMask: "GM_LidarClassGroup_t16", aMatchAny: "boolean") -> "GM_LidarClassFilter_t *":
    r"""
    LidarClassFilter_EnableGroups(GM_LidarClassFilter_t aClassFilter, GM_LidarClassGroup_t16 aGroupMask, boolean aMatchAny) -> GM_Error_t32, GM_LidarClassFilter_t

    	Parameters
    	----------
    	aClassFilter: GM_LidarClassFilter_t
    	aGroupMask: GM_LidarClassGroup_t16
    	aMatchAny: boolean


    """
    return _globalmapper.LidarClassFilter_EnableGroups(INOUT, aGroupMask, aMatchAny)


[docs]
def LidarClassFilter_Init(aEnableAll: "boolean") -> "GM_LidarClassFilter_t *":
    r"""
    LidarClassFilter_Init(boolean aEnableAll) -> GM_Error_t32, GM_LidarClassFilter_t

    	Parameters
    	----------
    	aEnableAll: boolean


    """
    return _globalmapper.LidarClassFilter_Init(aEnableAll)


[docs]
def LidarThin(*args) -> "GM_Error_t32":
    r"""
    LidarThin(GM_LayerHandle_t32 aLayer, GM_LidarSpatialThinSetup_t aSetup, uint32 aReserved=0) -> GM_Error_t32

    	Parameters
    	----------
    	aLayer: GM_LayerHandle_t32
    	aSetup: GM_LidarSpatialThinSetup_t
    	aReserved: uint32


    """
    return _globalmapper.LidarThin(*args)


[docs]
def LidarCompare(*args) -> "GM_Error_t32":
    r"""
    LidarCompare([GM_LayerHandle_t32] aLayerList, [GM_LayerHandle_t32] aLayerList2, GM_LidarCompareSetup_t aSetup, uint32 aReserved=0) -> GM_Error_t32

    	Parameters
    	----------
    	aLayerList: [GM_LayerHandle_t32]
    	aLayerList2: [GM_LayerHandle_t32]
    	aSetup: GM_LidarCompareSetup_t
    	aReserved: uint32


    """
    return _globalmapper.LidarCompare(*args)


[docs]
def LidarCompareQuery(*args) -> "GM_Error_t32":
    r"""
    LidarCompareQuery(GM_LidarQueryHandle_t aQueryCompareTo, GM_LidarQueryHandle_t aQueryCompare, GM_LidarCompareSetup_t aSetup, uint32 aReserved=0) -> GM_Error_t32

    	Parameters
    	----------
    	aQueryCompareTo: GM_LidarQueryHandle_t
    	aQueryCompare: GM_LidarQueryHandle_t
    	aSetup: GM_LidarCompareSetup_t
    	aReserved: uint32


    """
    return _globalmapper.LidarCompareQuery(*args)


[docs]
def LidarSmoothQuery(*args) -> "GM_Error_t32":
    r"""
    LidarSmoothQuery(GM_LidarQueryHandle_t aLidarQuery, GM_LidarSmoothSetup_t aSetup, uint32 aReserved=0) -> GM_Error_t32

    	Parameters
    	----------
    	aLidarQuery: GM_LidarQueryHandle_t
    	aSetup: GM_LidarSmoothSetup_t
    	aReserved: uint32


    """
    return _globalmapper.LidarSmoothQuery(*args)


[docs]
def LidarColorize(*args) -> "GM_Error_t32":
    r"""
    LidarColorize(GM_LayerHandle_t32 aLidarLayer, [GM_LayerHandle_t32] aLayerList, GM_LidarColorizeSetup_t aSetup, uint32 aReserved=0) -> GM_Error_t32

    	Parameters
    	----------
    	aLidarLayer: GM_LayerHandle_t32
    	aLayerList: [GM_LayerHandle_t32]
    	aSetup: GM_LidarColorizeSetup_t
    	aReserved: uint32


    """
    return _globalmapper.LidarColorize(*args)


[docs]
def LidarColorizeQuery(*args) -> "GM_Error_t32":
    r"""
    LidarColorizeQuery(GM_LidarQueryHandle_t aLidarQuery, [GM_LayerHandle_t32] aLayerList, GM_LidarColorizeSetup_t aSetup, uint32 aReserved=0) -> GM_Error_t32

    	Parameters
    	----------
    	aLidarQuery: GM_LidarQueryHandle_t
    	aLayerList: [GM_LayerHandle_t32]
    	aSetup: GM_LidarColorizeSetup_t
    	aReserved: uint32


    """
    return _globalmapper.LidarColorizeQuery(*args)


[docs]
def PixelsToPoints(*args) -> "GM_P2PSetup_t *":
    r"""
    PixelsToPoints(GM_P2PSetup_t  aSetup, uint32 aReserved=0) -> GM_Error_t32

    	Parameters
    	----------
    	aSetup: GM_P2PSetup_t
    	aReserved: uint32


    """
    return _globalmapper.PixelsToPoints(*args)


[docs]
def PixelsToPointsInitSetup() -> "GM_P2PSetup_t *":
    r"""PixelsToPointsInitSetup() -> GM_Error_t32, GM_P2PSetup_t"""
    return _globalmapper.PixelsToPointsInitSetup()


[docs]
def CloseViewWindow3D() -> "GM_Error_t32":
    r"""CloseViewWindow3D() -> GM_Error_t32"""
    return _globalmapper.CloseViewWindow3D()


[docs]
def GetCameraPosition3D() -> "double *, double *, float *, double *, double *, double *":
    r"""GetCameraPosition3D() -> GM_Error_t32, float, float, float, float, float, float"""
    return _globalmapper.GetCameraPosition3D()


[docs]
def IsWindowOpen3D() -> "BOOL":
    r"""IsWindowOpen3D() -> boolean"""
    return _globalmapper.IsWindowOpen3D()


[docs]
def PositionCamera3D(aX: "double", aY: "double", aElev: "float", aHeading: "double", aPitch: "double", aBank: "double") -> "GM_Error_t32":
    r"""
    PositionCamera3D(float aX, float aY, float aElev, float aHeading, float aPitch, float aBank) -> GM_Error_t32

    	Parameters
    	----------
    	aX: float
    	aY: float
    	aElev: float
    	aHeading: float
    	aPitch: float
    	aBank: float


    """
    return _globalmapper.PositionCamera3D(aX, aY, aElev, aHeading, aPitch, aBank)


[docs]
def SaveViewToFile3D(aFilename: "char const *", aFormat: "GM_RasterExportFormat_t32", aPixWidth: "sint32", aPixHeight: "sint32") -> "GM_Error_t32":
    r"""
    SaveViewToFile3D(str aFilename, GM_RasterExportFormat_t32 aFormat, sint32 aPixWidth, sint32 aPixHeight) -> GM_Error_t32

    	Parameters
    	----------
    	aFilename: str
    	aFormat: GM_RasterExportFormat_t32
    	aPixWidth: sint32
    	aPixHeight: sint32


    """
    return _globalmapper.SaveViewToFile3D(aFilename, aFormat, aPixWidth, aPixHeight)


[docs]
def SetChangeViewCallback3D(aCallbackFunc: "GM_3DChangeViewCallbackFunc", aUserData: "void *") -> "void":
    r"""
    SetChangeViewCallback3D(GM_3DChangeViewCallbackFunc aCallbackFunc, int aUserData) -> None

    	Parameters
    	----------
    	aCallbackFunc: GM_3DChangeViewCallbackFunc
    	aUserData: int


    """
    return _globalmapper.SetChangeViewCallback3D(aCallbackFunc, aUserData)


[docs]
def SetView3D(aLayerList: "GM_LayerHandle_t32 *", aDrawFlags: "GM_DrawFlags_t32", aWorldBounds: "GM_Rectangle_t", aPixelRect: "GM_PixelRect_t", aReserved: "uint32") -> "GM_Error_t32":
    r"""
    SetView3D([GM_LayerHandle_t32] aLayerList, GM_DrawFlags_t32 aDrawFlags, GM_Rectangle_t aWorldBounds, GM_PixelRect_t aPixelRect, uint32 aReserved=0) -> GM_Error_t32

    	Parameters
    	----------
    	aLayerList: [GM_LayerHandle_t32]
    	aDrawFlags: GM_DrawFlags_t32
    	aWorldBounds: GM_Rectangle_t
    	aPixelRect: GM_PixelRect_t
    	aReserved: uint32


    """
    return _globalmapper.SetView3D(aLayerList, aDrawFlags, aWorldBounds, aPixelRect, aReserved)


def CallMessageCallback(aMessage: "char const *") -> "void":
    r"""
    CallMessageCallback(string aMEssage) -> None

    	Parameters
    	----------
    	aMessage: string


    """
    return _globalmapper.CallMessageCallback(aMessage)

def CallProgressCallback(aOperationIdx: "uint32", aUpdateType: "GM_ProgressUpdate_t8", aStatus: "char const *", aPercent: "uint32") -> "boolean":
    r"""
    CallProgressCallback(uint32 aOperationIdx, GM_ProgressUpdate_t8 aUpdateType, string aStatus, uint32 aPercent) -> boolean

    	Parameters
    	----------
    	aOperationIdx: uint32
        aUpdateType: GM_ProgressUpdate_t8
        aStatus: string
        aPercent: uint32


    """
    return _globalmapper.CallProgressCallback(aOperationIdx, aUpdateType, aStatus, aPercent)

def CallQueryProjectionCallback(aInitialPos: "GM_Point_t") -> "GM_Projection_t *, signed char *":
    r"""
    CallQueryProjectionCallback(GM_Point_t aInitialPos) -> boolean, GM_Projection_t, GM_ElevUnits_t8

    	Parameters
    	----------
    	aInitialPos: GM_Point_t


    """
    return _globalmapper.CallQueryProjectionCallback(aInitialPos)

[docs]
def SpatialOpsParameterInit() -> "GM_SpatialOps_Params_t *":
    r"""SpatialOpsParameterInit() -> GM_SpatialOps_Params_t"""
    return _globalmapper.SpatialOpsParameterInit()


[docs]
def DistanceInit() -> "GM_Distance_t *":
    r"""DistanceInit() -> GM_Distance_t"""
    return _globalmapper.DistanceInit()


[docs]
def SpatialOperation(aOperation: "GM_SpatialOperations_t8", aLayer1: "GM_LayerHandle_t32", aLayer2: "GM_LayerHandle_t32", aParams: "GM_SpatialOps_Params_t") -> "GM_Error_t32":
    r"""
    SpatialOperation(GM_SpatialOperations_t8 aOperation, GM_LayerHandle_t32 aLayer1, GM_LayerHandle_t32 aLayer2, GM_SpatialOps_Params_t aParams) -> GM_Error_t32

    	Parameters
    	----------
    	aOperation: GM_SpatialOperations_t8
    	aLayer1: GM_LayerHandle_t32
    	aLayer2: GM_LayerHandle_t32
    	aParams: GM_SpatialOps_Params_t


    """
    return _globalmapper.SpatialOperation(aOperation, aLayer1, aLayer2, aParams)


[docs]
def SpatialUnion(aLayer1: "GM_LayerHandle_t32", aLayer2: "GM_LayerHandle_t32", aParams: "GM_SpatialOps_Params_t") -> "GM_Error_t32":
    r"""
    SpatialUnion(GM_LayerHandle_t32 aLayer1, GM_LayerHandle_t32 aLayer2, GM_SpatialOps_Params_t aParams) -> GM_Error_t32

    	Parameters
    	----------
    	aLayer1: GM_LayerHandle_t32
    	aLayer2: GM_LayerHandle_t32
    	aParams: GM_SpatialOps_Params_t


    """
    return _globalmapper.SpatialUnion(aLayer1, aLayer2, aParams)


[docs]
def SpatialUnionSingle(aLayer1: "GM_LayerHandle_t32", aParams: "GM_SpatialOps_Params_t") -> "GM_Error_t32":
    r"""
    SpatialUnionSingle(GM_LayerHandle_t32 aLayer1, GM_SpatialOps_Params_t aParams) -> GM_Error_t32

    	Parameters
    	----------
    	aLayer1: GM_LayerHandle_t32
    	aParams: GM_SpatialOps_Params_t


    """
    return _globalmapper.SpatialUnionSingle(aLayer1, aParams)


[docs]
def SpatialIntersection(aLayer1: "GM_LayerHandle_t32", aLayer2: "GM_LayerHandle_t32", aParams: "GM_SpatialOps_Params_t") -> "GM_Error_t32":
    r"""
    SpatialIntersection(GM_LayerHandle_t32 aLayer1, GM_LayerHandle_t32 aLayer2, GM_SpatialOps_Params_t aParams) -> GM_Error_t32

    	Parameters
    	----------
    	aLayer1: GM_LayerHandle_t32
    	aLayer2: GM_LayerHandle_t32
    	aParams: GM_SpatialOps_Params_t


    """
    return _globalmapper.SpatialIntersection(aLayer1, aLayer2, aParams)


[docs]
def SpatialDifference(aLayer1: "GM_LayerHandle_t32", aLayer2: "GM_LayerHandle_t32", aParams: "GM_SpatialOps_Params_t") -> "GM_Error_t32":
    r"""
    SpatialDifference(GM_LayerHandle_t32 aLayer1, GM_LayerHandle_t32 aLayer2, GM_SpatialOps_Params_t aParams) -> GM_Error_t32

    	Parameters
    	----------
    	aLayer1: GM_LayerHandle_t32
    	aLayer2: GM_LayerHandle_t32
    	aParams: GM_SpatialOps_Params_t


    """
    return _globalmapper.SpatialDifference(aLayer1, aLayer2, aParams)


[docs]
def SpatialSymmetricDifference(aLayer1: "GM_LayerHandle_t32", aLayer2: "GM_LayerHandle_t32", aParams: "GM_SpatialOps_Params_t") -> "GM_Error_t32":
    r"""
    SpatialSymmetricDifference(GM_LayerHandle_t32 aLayer1, GM_LayerHandle_t32 aLayer2, GM_SpatialOps_Params_t aParams) -> GM_Error_t32

    	Parameters
    	----------
    	aLayer1: GM_LayerHandle_t32
    	aLayer2: GM_LayerHandle_t32
    	aParams: GM_SpatialOps_Params_t


    """
    return _globalmapper.SpatialSymmetricDifference(aLayer1, aLayer2, aParams)


[docs]
def SpatialPredicate(aPredicate: "GM_SpatialPredicates_t16", aLayer1: "GM_LayerHandle_t32", aLayer2: "GM_LayerHandle_t32", aParams: "GM_SpatialOps_Params_t") -> "GM_Error_t32":
    r"""
    SpatialPredicate(GM_SpatialPredicates_t16 aPredicate, GM_LayerHandle_t32 aLayer1, GM_LayerHandle_t32 aLayer2, GM_SpatialOps_Params_t aParams) -> GM_Error_t32

    	Parameters
    	----------
    	aPredicate: GM_SpatialPredicates_t16
    	aLayer1: GM_LayerHandle_t32
    	aLayer2: GM_LayerHandle_t32
    	aParams: GM_SpatialOps_Params_t


    """
    return _globalmapper.SpatialPredicate(aPredicate, aLayer1, aLayer2, aParams)


[docs]
def SpatialIntersects(aLayer1: "GM_LayerHandle_t32", aLayer2: "GM_LayerHandle_t32", aParams: "GM_SpatialOps_Params_t") -> "GM_Error_t32":
    r"""
    SpatialIntersects(GM_LayerHandle_t32 aLayer1, GM_LayerHandle_t32 aLayer2, GM_SpatialOps_Params_t aParams) -> GM_Error_t32

    	Parameters
    	----------
    	aLayer1: GM_LayerHandle_t32
    	aLayer2: GM_LayerHandle_t32
    	aParams: GM_SpatialOps_Params_t


    """
    return _globalmapper.SpatialIntersects(aLayer1, aLayer2, aParams)


[docs]
def SpatialOverlaps(aLayer1: "GM_LayerHandle_t32", aLayer2: "GM_LayerHandle_t32", aParams: "GM_SpatialOps_Params_t") -> "GM_Error_t32":
    r"""
    SpatialOverlaps(GM_LayerHandle_t32 aLayer1, GM_LayerHandle_t32 aLayer2, GM_SpatialOps_Params_t aParams) -> GM_Error_t32

    	Parameters
    	----------
    	aLayer1: GM_LayerHandle_t32
    	aLayer2: GM_LayerHandle_t32
    	aParams: GM_SpatialOps_Params_t


    """
    return _globalmapper.SpatialOverlaps(aLayer1, aLayer2, aParams)


[docs]
def SpatialTouches(aLayer1: "GM_LayerHandle_t32", aLayer2: "GM_LayerHandle_t32", aParams: "GM_SpatialOps_Params_t") -> "GM_Error_t32":
    r"""
    SpatialTouches(GM_LayerHandle_t32 aLayer1, GM_LayerHandle_t32 aLayer2, GM_SpatialOps_Params_t aParams) -> GM_Error_t32

    	Parameters
    	----------
    	aLayer1: GM_LayerHandle_t32
    	aLayer2: GM_LayerHandle_t32
    	aParams: GM_SpatialOps_Params_t


    """
    return _globalmapper.SpatialTouches(aLayer1, aLayer2, aParams)


[docs]
def SpatialContains(aLayer1: "GM_LayerHandle_t32", aLayer2: "GM_LayerHandle_t32", aParams: "GM_SpatialOps_Params_t") -> "GM_Error_t32":
    r"""
    SpatialContains(GM_LayerHandle_t32 aLayer1, GM_LayerHandle_t32 aLayer2, GM_SpatialOps_Params_t aParams) -> GM_Error_t32

    	Parameters
    	----------
    	aLayer1: GM_LayerHandle_t32
    	aLayer2: GM_LayerHandle_t32
    	aParams: GM_SpatialOps_Params_t


    """
    return _globalmapper.SpatialContains(aLayer1, aLayer2, aParams)


[docs]
def SpatialEquals(aLayer1: "GM_LayerHandle_t32", aLayer2: "GM_LayerHandle_t32", aParams: "GM_SpatialOps_Params_t") -> "GM_Error_t32":
    r"""
    SpatialEquals(GM_LayerHandle_t32 aLayer1, GM_LayerHandle_t32 aLayer2, GM_SpatialOps_Params_t aParams) -> GM_Error_t32

    	Parameters
    	----------
    	aLayer1: GM_LayerHandle_t32
    	aLayer2: GM_LayerHandle_t32
    	aParams: GM_SpatialOps_Params_t


    """
    return _globalmapper.SpatialEquals(aLayer1, aLayer2, aParams)


[docs]
def SpatialWithin(aLayer1: "GM_LayerHandle_t32", aLayer2: "GM_LayerHandle_t32", aParams: "GM_SpatialOps_Params_t") -> "GM_Error_t32":
    r"""
    SpatialWithin(GM_LayerHandle_t32 aLayer1, GM_LayerHandle_t32 aLayer2, GM_SpatialOps_Params_t aParams) -> GM_Error_t32

    	Parameters
    	----------
    	aLayer1: GM_LayerHandle_t32
    	aLayer2: GM_LayerHandle_t32
    	aParams: GM_SpatialOps_Params_t


    """
    return _globalmapper.SpatialWithin(aLayer1, aLayer2, aParams)


[docs]
def SpatialDisjoint(aLayer1: "GM_LayerHandle_t32", aLayer2: "GM_LayerHandle_t32", aParams: "GM_SpatialOps_Params_t") -> "GM_Error_t32":
    r"""
    SpatialDisjoint(GM_LayerHandle_t32 aLayer1, GM_LayerHandle_t32 aLayer2, GM_SpatialOps_Params_t aParams) -> GM_Error_t32

    	Parameters
    	----------
    	aLayer1: GM_LayerHandle_t32
    	aLayer2: GM_LayerHandle_t32
    	aParams: GM_SpatialOps_Params_t


    """
    return _globalmapper.SpatialDisjoint(aLayer1, aLayer2, aParams)


[docs]
def SpatialCrosses(aLayer1: "GM_LayerHandle_t32", aLayer2: "GM_LayerHandle_t32", aParams: "GM_SpatialOps_Params_t") -> "GM_Error_t32":
    r"""
    SpatialCrosses(GM_LayerHandle_t32 aLayer1, GM_LayerHandle_t32 aLayer2, GM_SpatialOps_Params_t aParams) -> GM_Error_t32

    	Parameters
    	----------
    	aLayer1: GM_LayerHandle_t32
    	aLayer2: GM_LayerHandle_t32
    	aParams: GM_SpatialOps_Params_t


    """
    return _globalmapper.SpatialCrosses(aLayer1, aLayer2, aParams)


[docs]
def SpatialCovers(aLayer1: "GM_LayerHandle_t32", aLayer2: "GM_LayerHandle_t32", aParams: "GM_SpatialOps_Params_t") -> "GM_Error_t32":
    r"""
    SpatialCovers(GM_LayerHandle_t32 aLayer1, GM_LayerHandle_t32 aLayer2, GM_SpatialOps_Params_t aParams) -> GM_Error_t32

    	Parameters
    	----------
    	aLayer1: GM_LayerHandle_t32
    	aLayer2: GM_LayerHandle_t32
    	aParams: GM_SpatialOps_Params_t


    """
    return _globalmapper.SpatialCovers(aLayer1, aLayer2, aParams)


[docs]
def SpatialCoveredBy(aLayer1: "GM_LayerHandle_t32", aLayer2: "GM_LayerHandle_t32", aParams: "GM_SpatialOps_Params_t") -> "GM_Error_t32":
    r"""
    SpatialCoveredBy(GM_LayerHandle_t32 aLayer1, GM_LayerHandle_t32 aLayer2, GM_SpatialOps_Params_t aParams) -> GM_Error_t32

    	Parameters
    	----------
    	aLayer1: GM_LayerHandle_t32
    	aLayer2: GM_LayerHandle_t32
    	aParams: GM_SpatialOps_Params_t


    """
    return _globalmapper.SpatialCoveredBy(aLayer1, aLayer2, aParams)


[docs]
def SpatialRelate(aLayer1: "GM_LayerHandle_t32", aLayer2: "GM_LayerHandle_t32", aParams: "GM_SpatialOps_Params_t", aStr: "char const *") -> "GM_Error_t32":
    r"""
    SpatialRelate(GM_LayerHandle_t32 aLayer1, GM_LayerHandle_t32 aLayer2, GM_SpatialOps_Params_t aParams, str aStr) -> GM_Error_t32

    	Parameters
    	----------
    	aLayer1: GM_LayerHandle_t32
    	aLayer2: GM_LayerHandle_t32
    	aParams: GM_SpatialOps_Params_t
    	aStr: str


    """
    return _globalmapper.SpatialRelate(aLayer1, aLayer2, aParams, aStr)


[docs]
def SpatialDissolve(aLayer: "GM_LayerHandle_t32", aParams: "GM_SpatialOps_Params_t", aGrouping: "GM_FeatureGrouping_t8", aStr: "char const *") -> "GM_Error_t32":
    r"""
    SpatialDissolve(GM_LayerHandle_t32 aLayer, GM_SpatialOps_Params_t aParams, GM_FeatureGrouping_t8 aGrouping, str aStr) -> GM_Error_t32

    	Parameters
    	----------
    	aLayer: GM_LayerHandle_t32
    	aParams: GM_SpatialOps_Params_t
        aGrouping: GM_FeatureGrouping_t8
    	aStr: str


    """
    return _globalmapper.SpatialDissolve(aLayer, aParams, aGrouping, aStr)


[docs]
def SpatialTransform(aTransform: "GM_SpatialTransforms_t16", aLayer: "GM_LayerHandle_t32", aParams: "GM_SpatialOps_Params_t", aGrouping: "GM_FeatureGrouping_t8", aStr: "char const *") -> "GM_Error_t32":
    r"""
    SpatialTransform(GM_SpatialTransforms_t16 aTransform, GM_LayerHandle_t32 aLayer, GM_SpatialOps_Params_t aParams, GM_FeatureGrouping_t8 aGrouping, str aStr) -> GM_Error_t32

    	Parameters
    	----------
    	aTransform: GM_SpatialTransforms_t16
    	aLayer: GM_LayerHandle_t32
    	aParams: GM_SpatialOps_Params_t
    	aGrouping: GM_FeatureGrouping_t8
    	aStr: str


    """
    return _globalmapper.SpatialTransform(aTransform, aLayer, aParams, aGrouping, aStr)


[docs]
def SpatialMBR(aLayer: "GM_LayerHandle_t32", aParams: "GM_SpatialOps_Params_t", aGrouping: "GM_FeatureGrouping_t8", aStr: "char const *") -> "GM_Error_t32":
    r"""
    SpatialMBR(GM_LayerHandle_t32 aLayer, GM_SpatialOps_Params_t aParams, GM_FeatureGrouping_t8 aGrouping, str aStr) -> GM_Error_t32

    	Parameters
    	----------
    	aLayer: GM_LayerHandle_t32
    	aParams: GM_SpatialOps_Params_t
    	aGrouping: GM_FeatureGrouping_t8
    	aStr: str


    """
    return _globalmapper.SpatialMBR(aLayer, aParams, aGrouping, aStr)


[docs]
def SpatialCentroid(aLayer: "GM_LayerHandle_t32", aParams: "GM_SpatialOps_Params_t", aGrouping: "GM_FeatureGrouping_t8", aStr: "char const *") -> "GM_Error_t32":
    r"""
    SpatialCentroid(GM_LayerHandle_t32 aLayer, GM_SpatialOps_Params_t aParams, GM_FeatureGrouping_t8 aGrouping, str aStr) -> GM_Error_t32

    	Parameters
    	----------
    	aLayer: GM_LayerHandle_t32
    	aParams: GM_SpatialOps_Params_t
    	aGrouping: GM_FeatureGrouping_t8
    	aStr: str


    """
    return _globalmapper.SpatialCentroid(aLayer, aParams, aGrouping, aStr)


[docs]
def SpatialCenter(aLayer: "GM_LayerHandle_t32", aParams: "GM_SpatialOps_Params_t", aGrouping: "GM_FeatureGrouping_t8", aStr: "char const *") -> "GM_Error_t32":
    r"""
    SpatialCenter(GM_LayerHandle_t32 aLayer, GM_SpatialOps_Params_t aParams, GM_FeatureGrouping_t8 aGrouping, str aStr) -> GM_Error_t32

    	Parameters
    	----------
    	aLayer: GM_LayerHandle_t32
    	aParams: GM_SpatialOps_Params_t
    	aGrouping: GM_FeatureGrouping_t8
    	aStr: str


    """
    return _globalmapper.SpatialCenter(aLayer, aParams, aGrouping, aStr)


[docs]
def SpatialCircle(aLayer: "GM_LayerHandle_t32", aParams: "GM_SpatialOps_Params_t", aDistance: "GM_Distance_t", aGrouping: "GM_FeatureGrouping_t8", aStr: "char const *") -> "GM_Error_t32":
    r"""
    SpatialCircle(GM_LayerHandle_t32 aLayer, GM_SpatialOps_Params_t aParams, GM_Distance_t aDistance, GM_FeatureGrouping_t8 aGrouping, str aStr) -> GM_Error_t32

    	Parameters
    	----------
    	aLayer: GM_LayerHandle_t32
    	aParams: GM_SpatialOps_Params_t
    	aDistance: GM_Distance_t
    	aGrouping: GM_FeatureGrouping_t8
    	aStr: str


    """
    return _globalmapper.SpatialCircle(aLayer, aParams, aDistance, aGrouping, aStr)


[docs]
def SpatialBuffer(aLayer: "GM_LayerHandle_t32", aParams: "GM_SpatialOps_Params_t", aDistance: "GM_Distance_t", aGrouping: "GM_FeatureGrouping_t8", aStr: "char const *", aDissolveResults: "bool") -> "GM_Error_t32":
    r"""
    SpatialBuffer(GM_LayerHandle_t32 aLayer, GM_SpatialOps_Params_t aParams, GM_Distance_t aDistance, GM_FeatureGrouping_t8 aGrouping, str aStr) -> GM_Error_t32

    	Parameters
    	----------
    	aLayer: GM_LayerHandle_t32
    	aParams: GM_SpatialOps_Params_t
    	aDistance: GM_Distance_t
    	aGrouping: GM_FeatureGrouping_t8
    	aStr: str


    """
    return _globalmapper.SpatialBuffer(aLayer, aParams, aDistance, aGrouping, aStr, aDissolveResults)


[docs]
def SpatialConvexHull(aLayer: "GM_LayerHandle_t32", aParams: "GM_SpatialOps_Params_t", aGrouping: "GM_FeatureGrouping_t8", aStr: "char const *") -> "GM_Error_t32":
    r"""
    SpatialConvexHull(GM_LayerHandle_t32 aLayer, GM_SpatialOps_Params_t aParams, GM_FeatureGrouping_t8 aGrouping, str aStr) -> GM_Error_t32

    	Parameters
    	----------
    	aLayer: GM_LayerHandle_t32
    	aParams: GM_SpatialOps_Params_t
    	aGrouping: GM_FeatureGrouping_t8
    	aStr: str


    """
    return _globalmapper.SpatialConvexHull(aLayer, aParams, aGrouping, aStr)


[docs]
def SpatialConcaveHull(aLayer: "GM_LayerHandle_t32", aParams: "GM_SpatialOps_Params_t", aSmoothing: "double", aGrouping: "GM_FeatureGrouping_t8", aStr: "char const *") -> "GM_Error_t32":
    r"""
    SpatialConcaveHull(GM_LayerHandle_t32 aLayer, GM_SpatialOps_Params_t aParams, double aSmoothing, GM_FeatureGrouping_t8 aGrouping, str aStr) -> GM_Error_t32

    	Parameters
    	----------
    	aLayer: GM_LayerHandle_t32
    	aParams: GM_SpatialOps_Params_t
    	aSmoothing: double
    	aGrouping: GM_FeatureGrouping_t8
    	aStr: str


    """
    return _globalmapper.SpatialConcaveHull(aLayer, aParams, aSmoothing, aGrouping, aStr)


[docs]
def RunSpatialScript(aStr: "char const *") -> "GM_Error_t32":
    r"""
    RunSpatialScript(str aScriptString) -> GM_Error_t32

    	Parameters
    	----------
    	aScriptString: str


    """
    return _globalmapper.RunSpatialScript(aStr)


[docs]
def print_module_info():
    """print_module_info() -> void"""
    print ('SDK Loaded:', __file__)
    print ('SDK Version:', GetSDKVersion())
    print ('SDK Build Date:', GetSDKBuildDate())


carray_to_list.__doc__ = "carray_to_list(uint32 arr, uint32 size) -> list"
free_void.__doc__ = "free_void(int pointer) -> None"
gmobject_to_map.__doc__ = "gmobject_to_map(void gmobject) -> map"
malloc_void.__doc__ = "malloc_void(uint32 nbytes) -> int"
strerror.__doc__ = "strerror(uint32 code) -> str"

if True:
    GM_LidarFieldMask_All = GM_LidarFieldMask_All & 0xFFFFFFFF
    GM_LidarFieldMask_Stats = GM_LidarFieldMask_Stats & 0xFFFFFFFF
    GM_Prompt_ShowPrompt = GM_Prompt_ShowPrompt & 0xFFFFFFFF
    GM_Prompt_AlreadyShown = GM_Prompt_AlreadyShown & 0xFFFFFFFF
    GM_LayerFetch_OnlySelectable = GM_LayerFetch_OnlySelectable & 0xFFFFFFFF
    GM_LayerType_AllTypes = GM_LayerType_AllTypes & 0xFFFFFFFF
    GM_Layer_NormalPtr = GM_Layer_NormalPtr & 0xFFFFFFFF
    GM_MiscOpt_Invalid = GM_MiscOpt_Invalid & 0xFFFFFFFF
    GM_ExportFlags_RasterMask = GM_ExportFlags_RasterMask & 0xFFFFFFFF

if __name__ == "__main__":
    print_module_info()



Logo
Quick search

    index
    modules |
    Global Mapper Python Documentation »
    Module code »
    globalmapper

© Copyright 2022, Blue Marble Geographics. Created using Sphinx 6.1.3.
